
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008600  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  080087a0  080087a0  000187a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008bf4  08008bf4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08008bf4  08008bf4  00018bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008bfc  08008bfc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008bfc  08008bfc  00018bfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c00  08008c00  00018c00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08008c04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  200001dc  08008de0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000388  08008de0  00020388  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e47a  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f36  00000000  00000000  0002e686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fa8  00000000  00000000  000305c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ed8  00000000  00000000  00031568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b89  00000000  00000000  00032440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fd4e  00000000  00000000  00049fc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095076  00000000  00000000  00059d17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eed8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055ec  00000000  00000000  000eede0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008788 	.word	0x08008788

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08008788 	.word	0x08008788

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b974 	b.w	8001174 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	9d08      	ldr	r5, [sp, #32]
 8000eaa:	4604      	mov	r4, r0
 8000eac:	468e      	mov	lr, r1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d14d      	bne.n	8000f4e <__udivmoddi4+0xaa>
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	4694      	mov	ip, r2
 8000eb6:	d969      	bls.n	8000f8c <__udivmoddi4+0xe8>
 8000eb8:	fab2 f282 	clz	r2, r2
 8000ebc:	b152      	cbz	r2, 8000ed4 <__udivmoddi4+0x30>
 8000ebe:	fa01 f302 	lsl.w	r3, r1, r2
 8000ec2:	f1c2 0120 	rsb	r1, r2, #32
 8000ec6:	fa20 f101 	lsr.w	r1, r0, r1
 8000eca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ece:	ea41 0e03 	orr.w	lr, r1, r3
 8000ed2:	4094      	lsls	r4, r2
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	0c21      	lsrs	r1, r4, #16
 8000eda:	fbbe f6f8 	udiv	r6, lr, r8
 8000ede:	fa1f f78c 	uxth.w	r7, ip
 8000ee2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ee6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000eea:	fb06 f107 	mul.w	r1, r6, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d90a      	bls.n	8000f08 <__udivmoddi4+0x64>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000efa:	f080 811f 	bcs.w	800113c <__udivmoddi4+0x298>
 8000efe:	4299      	cmp	r1, r3
 8000f00:	f240 811c 	bls.w	800113c <__udivmoddi4+0x298>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb00 f707 	mul.w	r7, r0, r7
 8000f1c:	42a7      	cmp	r7, r4
 8000f1e:	d90a      	bls.n	8000f36 <__udivmoddi4+0x92>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	f080 810a 	bcs.w	8001140 <__udivmoddi4+0x29c>
 8000f2c:	42a7      	cmp	r7, r4
 8000f2e:	f240 8107 	bls.w	8001140 <__udivmoddi4+0x29c>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f3a:	1be4      	subs	r4, r4, r7
 8000f3c:	2600      	movs	r6, #0
 8000f3e:	b11d      	cbz	r5, 8000f48 <__udivmoddi4+0xa4>
 8000f40:	40d4      	lsrs	r4, r2
 8000f42:	2300      	movs	r3, #0
 8000f44:	e9c5 4300 	strd	r4, r3, [r5]
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d909      	bls.n	8000f66 <__udivmoddi4+0xc2>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	f000 80ef 	beq.w	8001136 <__udivmoddi4+0x292>
 8000f58:	2600      	movs	r6, #0
 8000f5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f5e:	4630      	mov	r0, r6
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	fab3 f683 	clz	r6, r3
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d14a      	bne.n	8001004 <__udivmoddi4+0x160>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d302      	bcc.n	8000f78 <__udivmoddi4+0xd4>
 8000f72:	4282      	cmp	r2, r0
 8000f74:	f200 80f9 	bhi.w	800116a <__udivmoddi4+0x2c6>
 8000f78:	1a84      	subs	r4, r0, r2
 8000f7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f7e:	2001      	movs	r0, #1
 8000f80:	469e      	mov	lr, r3
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d0e0      	beq.n	8000f48 <__udivmoddi4+0xa4>
 8000f86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f8a:	e7dd      	b.n	8000f48 <__udivmoddi4+0xa4>
 8000f8c:	b902      	cbnz	r2, 8000f90 <__udivmoddi4+0xec>
 8000f8e:	deff      	udf	#255	; 0xff
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	f040 8092 	bne.w	80010be <__udivmoddi4+0x21a>
 8000f9a:	eba1 010c 	sub.w	r1, r1, ip
 8000f9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa2:	fa1f fe8c 	uxth.w	lr, ip
 8000fa6:	2601      	movs	r6, #1
 8000fa8:	0c20      	lsrs	r0, r4, #16
 8000faa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fae:	fb07 1113 	mls	r1, r7, r3, r1
 8000fb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fb6:	fb0e f003 	mul.w	r0, lr, r3
 8000fba:	4288      	cmp	r0, r1
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x12c>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fc6:	d202      	bcs.n	8000fce <__udivmoddi4+0x12a>
 8000fc8:	4288      	cmp	r0, r1
 8000fca:	f200 80cb 	bhi.w	8001164 <__udivmoddi4+0x2c0>
 8000fce:	4643      	mov	r3, r8
 8000fd0:	1a09      	subs	r1, r1, r0
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000fdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fe0:	fb0e fe00 	mul.w	lr, lr, r0
 8000fe4:	45a6      	cmp	lr, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x156>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ff0:	d202      	bcs.n	8000ff8 <__udivmoddi4+0x154>
 8000ff2:	45a6      	cmp	lr, r4
 8000ff4:	f200 80bb 	bhi.w	800116e <__udivmoddi4+0x2ca>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	eba4 040e 	sub.w	r4, r4, lr
 8000ffe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001002:	e79c      	b.n	8000f3e <__udivmoddi4+0x9a>
 8001004:	f1c6 0720 	rsb	r7, r6, #32
 8001008:	40b3      	lsls	r3, r6
 800100a:	fa22 fc07 	lsr.w	ip, r2, r7
 800100e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001012:	fa20 f407 	lsr.w	r4, r0, r7
 8001016:	fa01 f306 	lsl.w	r3, r1, r6
 800101a:	431c      	orrs	r4, r3
 800101c:	40f9      	lsrs	r1, r7
 800101e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001022:	fa00 f306 	lsl.w	r3, r0, r6
 8001026:	fbb1 f8f9 	udiv	r8, r1, r9
 800102a:	0c20      	lsrs	r0, r4, #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fb09 1118 	mls	r1, r9, r8, r1
 8001034:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001038:	fb08 f00e 	mul.w	r0, r8, lr
 800103c:	4288      	cmp	r0, r1
 800103e:	fa02 f206 	lsl.w	r2, r2, r6
 8001042:	d90b      	bls.n	800105c <__udivmoddi4+0x1b8>
 8001044:	eb1c 0101 	adds.w	r1, ip, r1
 8001048:	f108 3aff 	add.w	sl, r8, #4294967295
 800104c:	f080 8088 	bcs.w	8001160 <__udivmoddi4+0x2bc>
 8001050:	4288      	cmp	r0, r1
 8001052:	f240 8085 	bls.w	8001160 <__udivmoddi4+0x2bc>
 8001056:	f1a8 0802 	sub.w	r8, r8, #2
 800105a:	4461      	add	r1, ip
 800105c:	1a09      	subs	r1, r1, r0
 800105e:	b2a4      	uxth	r4, r4
 8001060:	fbb1 f0f9 	udiv	r0, r1, r9
 8001064:	fb09 1110 	mls	r1, r9, r0, r1
 8001068:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800106c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001070:	458e      	cmp	lr, r1
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x1e2>
 8001074:	eb1c 0101 	adds.w	r1, ip, r1
 8001078:	f100 34ff 	add.w	r4, r0, #4294967295
 800107c:	d26c      	bcs.n	8001158 <__udivmoddi4+0x2b4>
 800107e:	458e      	cmp	lr, r1
 8001080:	d96a      	bls.n	8001158 <__udivmoddi4+0x2b4>
 8001082:	3802      	subs	r0, #2
 8001084:	4461      	add	r1, ip
 8001086:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800108a:	fba0 9402 	umull	r9, r4, r0, r2
 800108e:	eba1 010e 	sub.w	r1, r1, lr
 8001092:	42a1      	cmp	r1, r4
 8001094:	46c8      	mov	r8, r9
 8001096:	46a6      	mov	lr, r4
 8001098:	d356      	bcc.n	8001148 <__udivmoddi4+0x2a4>
 800109a:	d053      	beq.n	8001144 <__udivmoddi4+0x2a0>
 800109c:	b15d      	cbz	r5, 80010b6 <__udivmoddi4+0x212>
 800109e:	ebb3 0208 	subs.w	r2, r3, r8
 80010a2:	eb61 010e 	sbc.w	r1, r1, lr
 80010a6:	fa01 f707 	lsl.w	r7, r1, r7
 80010aa:	fa22 f306 	lsr.w	r3, r2, r6
 80010ae:	40f1      	lsrs	r1, r6
 80010b0:	431f      	orrs	r7, r3
 80010b2:	e9c5 7100 	strd	r7, r1, [r5]
 80010b6:	2600      	movs	r6, #0
 80010b8:	4631      	mov	r1, r6
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010be:	f1c2 0320 	rsb	r3, r2, #32
 80010c2:	40d8      	lsrs	r0, r3
 80010c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010c8:	fa21 f303 	lsr.w	r3, r1, r3
 80010cc:	4091      	lsls	r1, r2
 80010ce:	4301      	orrs	r1, r0
 80010d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d4:	fa1f fe8c 	uxth.w	lr, ip
 80010d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80010dc:	fb07 3610 	mls	r6, r7, r0, r3
 80010e0:	0c0b      	lsrs	r3, r1, #16
 80010e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010e6:	fb00 f60e 	mul.w	r6, r0, lr
 80010ea:	429e      	cmp	r6, r3
 80010ec:	fa04 f402 	lsl.w	r4, r4, r2
 80010f0:	d908      	bls.n	8001104 <__udivmoddi4+0x260>
 80010f2:	eb1c 0303 	adds.w	r3, ip, r3
 80010f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80010fa:	d22f      	bcs.n	800115c <__udivmoddi4+0x2b8>
 80010fc:	429e      	cmp	r6, r3
 80010fe:	d92d      	bls.n	800115c <__udivmoddi4+0x2b8>
 8001100:	3802      	subs	r0, #2
 8001102:	4463      	add	r3, ip
 8001104:	1b9b      	subs	r3, r3, r6
 8001106:	b289      	uxth	r1, r1
 8001108:	fbb3 f6f7 	udiv	r6, r3, r7
 800110c:	fb07 3316 	mls	r3, r7, r6, r3
 8001110:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001114:	fb06 f30e 	mul.w	r3, r6, lr
 8001118:	428b      	cmp	r3, r1
 800111a:	d908      	bls.n	800112e <__udivmoddi4+0x28a>
 800111c:	eb1c 0101 	adds.w	r1, ip, r1
 8001120:	f106 38ff 	add.w	r8, r6, #4294967295
 8001124:	d216      	bcs.n	8001154 <__udivmoddi4+0x2b0>
 8001126:	428b      	cmp	r3, r1
 8001128:	d914      	bls.n	8001154 <__udivmoddi4+0x2b0>
 800112a:	3e02      	subs	r6, #2
 800112c:	4461      	add	r1, ip
 800112e:	1ac9      	subs	r1, r1, r3
 8001130:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001134:	e738      	b.n	8000fa8 <__udivmoddi4+0x104>
 8001136:	462e      	mov	r6, r5
 8001138:	4628      	mov	r0, r5
 800113a:	e705      	b.n	8000f48 <__udivmoddi4+0xa4>
 800113c:	4606      	mov	r6, r0
 800113e:	e6e3      	b.n	8000f08 <__udivmoddi4+0x64>
 8001140:	4618      	mov	r0, r3
 8001142:	e6f8      	b.n	8000f36 <__udivmoddi4+0x92>
 8001144:	454b      	cmp	r3, r9
 8001146:	d2a9      	bcs.n	800109c <__udivmoddi4+0x1f8>
 8001148:	ebb9 0802 	subs.w	r8, r9, r2
 800114c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001150:	3801      	subs	r0, #1
 8001152:	e7a3      	b.n	800109c <__udivmoddi4+0x1f8>
 8001154:	4646      	mov	r6, r8
 8001156:	e7ea      	b.n	800112e <__udivmoddi4+0x28a>
 8001158:	4620      	mov	r0, r4
 800115a:	e794      	b.n	8001086 <__udivmoddi4+0x1e2>
 800115c:	4640      	mov	r0, r8
 800115e:	e7d1      	b.n	8001104 <__udivmoddi4+0x260>
 8001160:	46d0      	mov	r8, sl
 8001162:	e77b      	b.n	800105c <__udivmoddi4+0x1b8>
 8001164:	3b02      	subs	r3, #2
 8001166:	4461      	add	r1, ip
 8001168:	e732      	b.n	8000fd0 <__udivmoddi4+0x12c>
 800116a:	4630      	mov	r0, r6
 800116c:	e709      	b.n	8000f82 <__udivmoddi4+0xde>
 800116e:	4464      	add	r4, ip
 8001170:	3802      	subs	r0, #2
 8001172:	e742      	b.n	8000ffa <__udivmoddi4+0x156>

08001174 <__aeabi_idiv0>:
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <delay>:
uint8_t pres = 0;
#define DHT22_PORT GPIOA
#define DHT22_PIN GPIO_PIN_4
int reqwater;

void delay(uint16_t time){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <delay+0x30>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 800118a:	bf00      	nop
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <delay+0x30>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3f9      	bcc.n	800118c <delay+0x14>
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000294 	.word	0x20000294

080011ac <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f001 fcb4 	bl	8002b48 <HAL_GPIO_Init>
}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 fc96 	bl	8002b48 <HAL_GPIO_Init>
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <DHT22_Start>:

void DHT22_Start (void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8001228:	2110      	movs	r1, #16
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <DHT22_Start+0x4c>)
 800122c:	f7ff ffbe 	bl	80011ac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	2110      	movs	r1, #16
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <DHT22_Start+0x4c>)
 8001236:	f001 fe23 	bl	8002e80 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800123a:	200a      	movs	r0, #10
 800123c:	f000 ffd0 	bl	80021e0 <HAL_Delay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001240:	2200      	movs	r2, #0
 8001242:	2110      	movs	r1, #16
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <DHT22_Start+0x4c>)
 8001246:	f001 fe1b 	bl	8002e80 <HAL_GPIO_WritePin>
	delay(1500);   // wait for > 1ms
 800124a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800124e:	f7ff ff93 	bl	8001178 <delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001252:	2201      	movs	r2, #1
 8001254:	2110      	movs	r1, #16
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <DHT22_Start+0x4c>)
 8001258:	f001 fe12 	bl	8002e80 <HAL_GPIO_WritePin>
	delay(20);   // wait for 30us
 800125c:	2014      	movs	r0, #20
 800125e:	f7ff ff8b 	bl	8001178 <delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8001262:	2110      	movs	r1, #16
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DHT22_Start+0x4c>)
 8001266:	f7ff ffbf 	bl	80011e8 <Set_Pin_Input>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020000 	.word	0x40020000

08001274 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 800127a:	2110      	movs	r1, #16
 800127c:	4815      	ldr	r0, [pc, #84]	; (80012d4 <DHT22_Check_Response+0x60>)
 800127e:	f7ff ffb3 	bl	80011e8 <Set_Pin_Input>
	uint8_t Response = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
	delay(40);  // wait for 40us
 8001286:	2028      	movs	r0, #40	; 0x28
 8001288:	f7ff ff76 	bl	8001178 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 800128c:	2110      	movs	r1, #16
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <DHT22_Check_Response+0x60>)
 8001290:	f001 fdde 	bl	8002e50 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <DHT22_Check_Response+0x44>
	{
		delay(80);   // wait for 80us
 800129a:	2050      	movs	r0, #80	; 0x50
 800129c:	f7ff ff6c 	bl	8001178 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 80012a0:	2110      	movs	r1, #16
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <DHT22_Check_Response+0x60>)
 80012a4:	f001 fdd4 	bl	8002e50 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <DHT22_Check_Response+0x40>
 80012ae:	2301      	movs	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e001      	b.n	80012b8 <DHT22_Check_Response+0x44>
		else Response = -1;
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 80012b8:	bf00      	nop
 80012ba:	2110      	movs	r1, #16
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <DHT22_Check_Response+0x60>)
 80012be:	f001 fdc7 	bl	8002e50 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f8      	bne.n	80012ba <DHT22_Check_Response+0x46>
	return Response;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020000 	.word	0x40020000

080012d8 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80012de:	2300      	movs	r3, #0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	e03a      	b.n	800135a <DHT22_Read+0x82>
	{
		delay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f7ff ff47 	bl	8001178 <delay>
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 80012ea:	bf00      	nop
 80012ec:	2110      	movs	r1, #16
 80012ee:	481f      	ldr	r0, [pc, #124]	; (800136c <DHT22_Read+0x94>)
 80012f0:	f001 fdae 	bl	8002e50 <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f8      	beq.n	80012ec <DHT22_Read+0x14>
		delay(30);   // wait for 40 us
 80012fa:	201e      	movs	r0, #30
 80012fc:	f7ff ff3c 	bl	8001178 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001300:	2110      	movs	r1, #16
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <DHT22_Read+0x94>)
 8001304:	f001 fda4 	bl	8002e50 <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10e      	bne.n	800132c <DHT22_Read+0x54>
		{
			i&= ~(1<<(7-j));   // write 0
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	f1c3 0307 	rsb	r3, r3, #7
 8001314:	2201      	movs	r2, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	b25b      	sxtb	r3, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	b25a      	sxtb	r2, r3
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4013      	ands	r3, r2
 8001326:	b25b      	sxtb	r3, r3
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	e00b      	b.n	8001344 <DHT22_Read+0x6c>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2201      	movs	r2, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	b25a      	sxtb	r2, r3
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	4313      	orrs	r3, r2
 8001340:	b25b      	sxtb	r3, r3
 8001342:	71fb      	strb	r3, [r7, #7]
		while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN));  // wait for the pin to go low
 8001344:	bf00      	nop
 8001346:	2110      	movs	r1, #16
 8001348:	4808      	ldr	r0, [pc, #32]	; (800136c <DHT22_Read+0x94>)
 800134a:	f001 fd81 	bl	8002e50 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f8      	bne.n	8001346 <DHT22_Read+0x6e>
	for (j=0;j<8;j++)
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	3301      	adds	r3, #1
 8001358:	71bb      	strb	r3, [r7, #6]
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	2b07      	cmp	r3, #7
 800135e:	d9c1      	bls.n	80012e4 <DHT22_Read+0xc>
	}

	return i;
 8001360:	79fb      	ldrb	r3, [r7, #7]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40020000 	.word	0x40020000

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001374:	b0c3      	sub	sp, #268	; 0x10c
 8001376:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fec0 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f9d4 	bl	8001728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f000 fbac 	bl	8001adc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001384:	f000 fb80 	bl	8001a88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001388:	f000 fab8 	bl	80018fc <MX_TIM1_Init>
  MX_ADC1_Init();
 800138c:	f000 fa36 	bl	80017fc <MX_ADC1_Init>
  MX_I2C1_Init();
 8001390:	f000 fa86 	bl	80018a0 <MX_I2C1_Init>
  MX_TIM2_Init();
 8001394:	f000 fb02 	bl	800199c <MX_TIM2_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim1);
 8001398:	48af      	ldr	r0, [pc, #700]	; (8001658 <main+0x2e8>)
 800139a:	f002 ff02 	bl	80041a2 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800139e:	2100      	movs	r1, #0
 80013a0:	48ae      	ldr	r0, [pc, #696]	; (800165c <main+0x2ec>)
 80013a2:	f002 ff57 	bl	8004254 <HAL_TIM_PWM_Start>
  char buffer[100];
  char tmp[3];
  char p='%';
 80013a6:	2325      	movs	r3, #37	; 0x25
 80013a8:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
  char logger[100];
  uint64_t ADCValue;
  float ADCpercent;
  int state=0;
 80013ac:	2300      	movs	r3, #0
 80013ae:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  while (1)
  {
	  // DHT 22
	  DHT22_Start();
 80013b2:	f7ff ff37 	bl	8001224 <DHT22_Start>
	  pres = DHT22_Check_Response();
 80013b6:	f7ff ff5d 	bl	8001274 <DHT22_Check_Response>
 80013ba:	4603      	mov	r3, r0
 80013bc:	461a      	mov	r2, r3
 80013be:	4ba8      	ldr	r3, [pc, #672]	; (8001660 <main+0x2f0>)
 80013c0:	701a      	strb	r2, [r3, #0]
	  h_byte1 = DHT22_Read();
 80013c2:	f7ff ff89 	bl	80012d8 <DHT22_Read>
 80013c6:	4603      	mov	r3, r0
 80013c8:	461a      	mov	r2, r3
 80013ca:	4ba6      	ldr	r3, [pc, #664]	; (8001664 <main+0x2f4>)
 80013cc:	701a      	strb	r2, [r3, #0]
	  h_byte2 = DHT22_Read();
 80013ce:	f7ff ff83 	bl	80012d8 <DHT22_Read>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	4ba4      	ldr	r3, [pc, #656]	; (8001668 <main+0x2f8>)
 80013d8:	701a      	strb	r2, [r3, #0]
	  t_byte1 = DHT22_Read();
 80013da:	f7ff ff7d 	bl	80012d8 <DHT22_Read>
 80013de:	4603      	mov	r3, r0
 80013e0:	461a      	mov	r2, r3
 80013e2:	4ba2      	ldr	r3, [pc, #648]	; (800166c <main+0x2fc>)
 80013e4:	701a      	strb	r2, [r3, #0]
	  t_byte2 = DHT22_Read();
 80013e6:	f7ff ff77 	bl	80012d8 <DHT22_Read>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4ba0      	ldr	r3, [pc, #640]	; (8001670 <main+0x300>)
 80013f0:	701a      	strb	r2, [r3, #0]
	  sum = DHT22_Read();
 80013f2:	f7ff ff71 	bl	80012d8 <DHT22_Read>
 80013f6:	4603      	mov	r3, r0
 80013f8:	b29a      	uxth	r2, r3
 80013fa:	4b9e      	ldr	r3, [pc, #632]	; (8001674 <main+0x304>)
 80013fc:	801a      	strh	r2, [r3, #0]

	  t = (t_byte1<<8)|t_byte2;
 80013fe:	4b9b      	ldr	r3, [pc, #620]	; (800166c <main+0x2fc>)
 8001400:	781b      	ldrb	r3, [r3, #0]
 8001402:	021b      	lsls	r3, r3, #8
 8001404:	b21a      	sxth	r2, r3
 8001406:	4b9a      	ldr	r3, [pc, #616]	; (8001670 <main+0x300>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	b21b      	sxth	r3, r3
 800140c:	4313      	orrs	r3, r2
 800140e:	b21b      	sxth	r3, r3
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b99      	ldr	r3, [pc, #612]	; (8001678 <main+0x308>)
 8001414:	801a      	strh	r2, [r3, #0]
	  h = (h_byte1<<8)|h_byte2;
 8001416:	4b93      	ldr	r3, [pc, #588]	; (8001664 <main+0x2f4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b21a      	sxth	r2, r3
 800141e:	4b92      	ldr	r3, [pc, #584]	; (8001668 <main+0x2f8>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	b21b      	sxth	r3, r3
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	b29a      	uxth	r2, r3
 800142a:	4b94      	ldr	r3, [pc, #592]	; (800167c <main+0x30c>)
 800142c:	801a      	strh	r2, [r3, #0]
	  temp = (float) (t/10.0);
 800142e:	4b92      	ldr	r3, [pc, #584]	; (8001678 <main+0x308>)
 8001430:	881b      	ldrh	r3, [r3, #0]
 8001432:	4618      	mov	r0, r3
 8001434:	f7ff f87e 	bl	8000534 <__aeabi_i2d>
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	4b90      	ldr	r3, [pc, #576]	; (8001680 <main+0x310>)
 800143e:	f7ff fa0d 	bl	800085c <__aeabi_ddiv>
 8001442:	4602      	mov	r2, r0
 8001444:	460b      	mov	r3, r1
 8001446:	4610      	mov	r0, r2
 8001448:	4619      	mov	r1, r3
 800144a:	f7ff fbb5 	bl	8000bb8 <__aeabi_d2f>
 800144e:	4603      	mov	r3, r0
 8001450:	4a8c      	ldr	r2, [pc, #560]	; (8001684 <main+0x314>)
 8001452:	6013      	str	r3, [r2, #0]
	  humid = (float)(h/10.0);
 8001454:	4b89      	ldr	r3, [pc, #548]	; (800167c <main+0x30c>)
 8001456:	881b      	ldrh	r3, [r3, #0]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff f86b 	bl	8000534 <__aeabi_i2d>
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	4b87      	ldr	r3, [pc, #540]	; (8001680 <main+0x310>)
 8001464:	f7ff f9fa 	bl	800085c <__aeabi_ddiv>
 8001468:	4602      	mov	r2, r0
 800146a:	460b      	mov	r3, r1
 800146c:	4610      	mov	r0, r2
 800146e:	4619      	mov	r1, r3
 8001470:	f7ff fba2 	bl	8000bb8 <__aeabi_d2f>
 8001474:	4603      	mov	r3, r0
 8001476:	4a84      	ldr	r2, [pc, #528]	; (8001688 <main+0x318>)
 8001478:	6013      	str	r3, [r2, #0]
	  humid = (humid>99.9) ? 99.9 : humid;
 800147a:	4b83      	ldr	r3, [pc, #524]	; (8001688 <main+0x318>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff f86a 	bl	8000558 <__aeabi_f2d>
 8001484:	a370      	add	r3, pc, #448	; (adr r3, 8001648 <main+0x2d8>)
 8001486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148a:	f7ff fb4d 	bl	8000b28 <__aeabi_dcmpgt>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <main+0x128>
 8001494:	4b7d      	ldr	r3, [pc, #500]	; (800168c <main+0x31c>)
 8001496:	e001      	b.n	800149c <main+0x12c>
 8001498:	4b7b      	ldr	r3, [pc, #492]	; (8001688 <main+0x318>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a7a      	ldr	r2, [pc, #488]	; (8001688 <main+0x318>)
 800149e:	6013      	str	r3, [r2, #0]

	  //SOIL MOISTURE
	  HAL_ADC_Start(&hadc1);
 80014a0:	487b      	ldr	r0, [pc, #492]	; (8001690 <main+0x320>)
 80014a2:	f000 ff05 	bl	80022b0 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 80014a6:	497b      	ldr	r1, [pc, #492]	; (8001694 <main+0x324>)
 80014a8:	4879      	ldr	r0, [pc, #484]	; (8001690 <main+0x320>)
 80014aa:	f000 ffa7 	bl	80023fc <HAL_ADC_PollForConversion>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d13c      	bne.n	800152e <main+0x1be>
		  ADCValue = HAL_ADC_GetValue(&hadc1);
 80014b4:	4876      	ldr	r0, [pc, #472]	; (8001690 <main+0x320>)
 80014b6:	f001 f825 	bl	8002504 <HAL_ADC_GetValue>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2200      	movs	r2, #0
 80014be:	469a      	mov	sl, r3
 80014c0:	4693      	mov	fp, r2
 80014c2:	e9c7 ab34 	strd	sl, fp, [r7, #208]	; 0xd0
		  ADCpercent = 0.02528;
 80014c6:	4b74      	ldr	r3, [pc, #464]	; (8001698 <main+0x328>)
 80014c8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  ADCpercent = -(float)(ADCValue)*ADCpercent+112.4;
 80014cc:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80014d0:	f7ff fc8a 	bl	8000de8 <__aeabi_ul2f>
 80014d4:	4603      	mov	r3, r0
 80014d6:	ee07 3a90 	vmov	s15, r3
 80014da:	eeb1 7a67 	vneg.f32	s14, s15
 80014de:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80014e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e6:	ee17 0a90 	vmov	r0, s15
 80014ea:	f7ff f835 	bl	8000558 <__aeabi_f2d>
 80014ee:	a358      	add	r3, pc, #352	; (adr r3, 8001650 <main+0x2e0>)
 80014f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f4:	f7fe fed2 	bl	800029c <__adddf3>
 80014f8:	4602      	mov	r2, r0
 80014fa:	460b      	mov	r3, r1
 80014fc:	4610      	mov	r0, r2
 80014fe:	4619      	mov	r1, r3
 8001500:	f7ff fb5a 	bl	8000bb8 <__aeabi_d2f>
 8001504:	4603      	mov	r3, r0
 8001506:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  ADCpercent = (ADCpercent>99.9) ? 99.9 : ADCpercent;
 800150a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800150e:	f7ff f823 	bl	8000558 <__aeabi_f2d>
 8001512:	a34d      	add	r3, pc, #308	; (adr r3, 8001648 <main+0x2d8>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7ff fb06 	bl	8000b28 <__aeabi_dcmpgt>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <main+0x1b6>
 8001522:	4b5a      	ldr	r3, [pc, #360]	; (800168c <main+0x31c>)
 8001524:	e001      	b.n	800152a <main+0x1ba>
 8001526:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800152a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	  }

	  // I2C Transmit
	  sprintf(buffer,"%04.1f%04.1f%04.1f",temp,humid,ADCpercent); // force xx.x
 800152e:	4b55      	ldr	r3, [pc, #340]	; (8001684 <main+0x314>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f7ff f810 	bl	8000558 <__aeabi_f2d>
 8001538:	4680      	mov	r8, r0
 800153a:	4689      	mov	r9, r1
 800153c:	4b52      	ldr	r3, [pc, #328]	; (8001688 <main+0x318>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff f809 	bl	8000558 <__aeabi_f2d>
 8001546:	4604      	mov	r4, r0
 8001548:	460d      	mov	r5, r1
 800154a:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 800154e:	f7ff f803 	bl	8000558 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 800155a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800155e:	e9cd 4500 	strd	r4, r5, [sp]
 8001562:	4642      	mov	r2, r8
 8001564:	464b      	mov	r3, r9
 8001566:	494d      	ldr	r1, [pc, #308]	; (800169c <main+0x32c>)
 8001568:	f004 fe08 	bl	800617c <siprintf>
	  HAL_I2C_Slave_Transmit(&hi2c1, &buffer, strlen(buffer), HAL_MAX_DELAY);
 800156c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001570:	4618      	mov	r0, r3
 8001572:	f7fe fe35 	bl	80001e0 <strlen>
 8001576:	4603      	mov	r3, r0
 8001578:	b29a      	uxth	r2, r3
 800157a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800157e:	f04f 33ff 	mov.w	r3, #4294967295
 8001582:	4847      	ldr	r0, [pc, #284]	; (80016a0 <main+0x330>)
 8001584:	f001 fdda 	bl	800313c <HAL_I2C_Slave_Transmit>

	  // I2C Receive
	  HAL_I2C_Slave_Receive(&hi2c1, &tmp, strlen(tmp), HAL_MAX_DELAY);
 8001588:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800158c:	4618      	mov	r0, r3
 800158e:	f7fe fe27 	bl	80001e0 <strlen>
 8001592:	4603      	mov	r3, r0
 8001594:	b29a      	uxth	r2, r3
 8001596:	f107 0168 	add.w	r1, r7, #104	; 0x68
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	4840      	ldr	r0, [pc, #256]	; (80016a0 <main+0x330>)
 80015a0:	f001 fee2 	bl	8003368 <HAL_I2C_Slave_Receive>
	  reqwater = atoi(tmp);
 80015a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 f947 	bl	800583c <atoi>
 80015ae:	4603      	mov	r3, r0
 80015b0:	4a3c      	ldr	r2, [pc, #240]	; (80016a4 <main+0x334>)
 80015b2:	6013      	str	r3, [r2, #0]

	  // Water Pump
	  /* state 0 = off
	   * state 1 = on */
	  if (state==0 && reqwater==1) {
 80015b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d121      	bne.n	8001600 <main+0x290>
 80015bc:	4b39      	ldr	r3, [pc, #228]	; (80016a4 <main+0x334>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d11d      	bne.n	8001600 <main+0x290>
		  state=1;
 80015c4:	2301      	movs	r3, #1
 80015c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		  for (int i=0;i<450;i++) {
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80015d0:	e010      	b.n	80015f4 <main+0x284>
			  TIM2->CCR1 = (i>100) ? 100 : i;
 80015d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015d6:	2b64      	cmp	r3, #100	; 0x64
 80015d8:	bfa8      	it	ge
 80015da:	2364      	movge	r3, #100	; 0x64
 80015dc:	461a      	mov	r2, r3
 80015de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80015e2:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(10);
 80015e4:	200a      	movs	r0, #10
 80015e6:	f000 fdfb 	bl	80021e0 <HAL_Delay>
		  for (int i=0;i<450;i++) {
 80015ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015ee:	3301      	adds	r3, #1
 80015f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80015f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80015f8:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80015fc:	dbe9      	blt.n	80015d2 <main+0x262>
 80015fe:	e057      	b.n	80016b0 <main+0x340>
		  }
	  }
	  else if (state==1) {
 8001600:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001604:	2b01      	cmp	r3, #1
 8001606:	d14f      	bne.n	80016a8 <main+0x338>
		  state=0;
 8001608:	2300      	movs	r3, #0
 800160a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		  for (int i=449;i>=0;i--) {
 800160e:	f240 13c1 	movw	r3, #449	; 0x1c1
 8001612:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001616:	e010      	b.n	800163a <main+0x2ca>
			  TIM2->CCR1 = (i>100) ? 100 : i;
 8001618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800161c:	2b64      	cmp	r3, #100	; 0x64
 800161e:	bfa8      	it	ge
 8001620:	2364      	movge	r3, #100	; 0x64
 8001622:	461a      	mov	r2, r3
 8001624:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
			  HAL_Delay(10);
 800162a:	200a      	movs	r0, #10
 800162c:	f000 fdd8 	bl	80021e0 <HAL_Delay>
		  for (int i=449;i>=0;i--) {
 8001630:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001634:	3b01      	subs	r3, #1
 8001636:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800163a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800163e:	2b00      	cmp	r3, #0
 8001640:	daea      	bge.n	8001618 <main+0x2a8>
 8001642:	e035      	b.n	80016b0 <main+0x340>
 8001644:	f3af 8000 	nop.w
 8001648:	9999999a 	.word	0x9999999a
 800164c:	4058f999 	.word	0x4058f999
 8001650:	9999999a 	.word	0x9999999a
 8001654:	405c1999 	.word	0x405c1999
 8001658:	20000294 	.word	0x20000294
 800165c:	200002d4 	.word	0x200002d4
 8001660:	20000368 	.word	0x20000368
 8001664:	20000354 	.word	0x20000354
 8001668:	20000355 	.word	0x20000355
 800166c:	20000356 	.word	0x20000356
 8001670:	20000357 	.word	0x20000357
 8001674:	20000358 	.word	0x20000358
 8001678:	2000035c 	.word	0x2000035c
 800167c:	2000035a 	.word	0x2000035a
 8001680:	40240000 	.word	0x40240000
 8001684:	20000360 	.word	0x20000360
 8001688:	20000364 	.word	0x20000364
 800168c:	42c7cccd 	.word	0x42c7cccd
 8001690:	200001f8 	.word	0x200001f8
 8001694:	000f4240 	.word	0x000f4240
 8001698:	3ccf1801 	.word	0x3ccf1801
 800169c:	080087a0 	.word	0x080087a0
 80016a0:	20000240 	.word	0x20000240
 80016a4:	2000036c 	.word	0x2000036c
		  }
	  }
	  else {
		  HAL_Delay(5000);
 80016a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80016ac:	f000 fd98 	bl	80021e0 <HAL_Delay>
	  }

	  // CONSOLE LOGS
	  sprintf(logger, "soilhumid : %.1f , airtemp : %.1f C , airhumid : %.1f%c , reqwater : %d \r\n",ADCpercent,temp,humid,p,reqwater);
 80016b0:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80016b4:	f7fe ff50 	bl	8000558 <__aeabi_f2d>
 80016b8:	4680      	mov	r8, r0
 80016ba:	4689      	mov	r9, r1
 80016bc:	4b15      	ldr	r3, [pc, #84]	; (8001714 <main+0x3a4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff49 	bl	8000558 <__aeabi_f2d>
 80016c6:	4604      	mov	r4, r0
 80016c8:	460d      	mov	r5, r1
 80016ca:	4b13      	ldr	r3, [pc, #76]	; (8001718 <main+0x3a8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7fe ff42 	bl	8000558 <__aeabi_f2d>
 80016d4:	4602      	mov	r2, r0
 80016d6:	460b      	mov	r3, r1
 80016d8:	f897 10df 	ldrb.w	r1, [r7, #223]	; 0xdf
 80016dc:	480f      	ldr	r0, [pc, #60]	; (800171c <main+0x3ac>)
 80016de:	6800      	ldr	r0, [r0, #0]
 80016e0:	1d3e      	adds	r6, r7, #4
 80016e2:	9005      	str	r0, [sp, #20]
 80016e4:	9104      	str	r1, [sp, #16]
 80016e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80016ea:	e9cd 4500 	strd	r4, r5, [sp]
 80016ee:	4642      	mov	r2, r8
 80016f0:	464b      	mov	r3, r9
 80016f2:	490b      	ldr	r1, [pc, #44]	; (8001720 <main+0x3b0>)
 80016f4:	4630      	mov	r0, r6
 80016f6:	f004 fd41 	bl	800617c <siprintf>
	  HAL_UART_Transmit(&huart2, &logger, strlen(logger), HAL_MAX_DELAY);
 80016fa:	1d3b      	adds	r3, r7, #4
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7fe fd6f 	bl	80001e0 <strlen>
 8001702:	4603      	mov	r3, r0
 8001704:	b29a      	uxth	r2, r3
 8001706:	1d39      	adds	r1, r7, #4
 8001708:	f04f 33ff 	mov.w	r3, #4294967295
 800170c:	4805      	ldr	r0, [pc, #20]	; (8001724 <main+0x3b4>)
 800170e:	f003 fae4 	bl	8004cda <HAL_UART_Transmit>
  {
 8001712:	e64e      	b.n	80013b2 <main+0x42>
 8001714:	20000360 	.word	0x20000360
 8001718:	20000364 	.word	0x20000364
 800171c:	2000036c 	.word	0x2000036c
 8001720:	080087b4 	.word	0x080087b4
 8001724:	20000314 	.word	0x20000314

08001728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b094      	sub	sp, #80	; 0x50
 800172c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	2230      	movs	r2, #48	; 0x30
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f004 f8ae 	bl	8005898 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800173c:	f107 030c 	add.w	r3, r7, #12
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
 8001750:	4b28      	ldr	r3, [pc, #160]	; (80017f4 <SystemClock_Config+0xcc>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <SystemClock_Config+0xcc>)
 8001756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175a:	6413      	str	r3, [r2, #64]	; 0x40
 800175c:	4b25      	ldr	r3, [pc, #148]	; (80017f4 <SystemClock_Config+0xcc>)
 800175e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001760:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001764:	60bb      	str	r3, [r7, #8]
 8001766:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
 800176c:	4b22      	ldr	r3, [pc, #136]	; (80017f8 <SystemClock_Config+0xd0>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <SystemClock_Config+0xd0>)
 8001772:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001776:	6013      	str	r3, [r2, #0]
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <SystemClock_Config+0xd0>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001784:	2302      	movs	r3, #2
 8001786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001788:	2301      	movs	r3, #1
 800178a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800178c:	2310      	movs	r3, #16
 800178e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001790:	2302      	movs	r3, #2
 8001792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001794:	2300      	movs	r3, #0
 8001796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001798:	2310      	movs	r3, #16
 800179a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800179c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017a2:	2304      	movs	r3, #4
 80017a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80017a6:	2304      	movs	r3, #4
 80017a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	4618      	mov	r0, r3
 80017b0:	f002 f83e 	bl	8003830 <HAL_RCC_OscConfig>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80017ba:	f000 f9ff 	bl	8001bbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017be:	230f      	movs	r3, #15
 80017c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017c2:	2302      	movs	r3, #2
 80017c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017d0:	2300      	movs	r3, #0
 80017d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017d4:	f107 030c 	add.w	r3, r7, #12
 80017d8:	2102      	movs	r1, #2
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 fa96 	bl	8003d0c <HAL_RCC_ClockConfig>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80017e6:	f000 f9e9 	bl	8001bbc <Error_Handler>
  }
}
 80017ea:	bf00      	nop
 80017ec:	3750      	adds	r7, #80	; 0x50
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40007000 	.word	0x40007000

080017fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001802:	463b      	mov	r3, r7
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <MX_ADC1_Init+0x98>)
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <MX_ADC1_Init+0x9c>)
 8001812:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <MX_ADC1_Init+0x98>)
 8001816:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800181a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800181c:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <MX_ADC1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <MX_ADC1_Init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <MX_ADC1_Init+0x98>)
 800182a:	2200      	movs	r2, #0
 800182c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <MX_ADC1_Init+0x98>)
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001836:	4b17      	ldr	r3, [pc, #92]	; (8001894 <MX_ADC1_Init+0x98>)
 8001838:	2200      	movs	r2, #0
 800183a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <MX_ADC1_Init+0x98>)
 800183e:	4a17      	ldr	r2, [pc, #92]	; (800189c <MX_ADC1_Init+0xa0>)
 8001840:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001842:	4b14      	ldr	r3, [pc, #80]	; (8001894 <MX_ADC1_Init+0x98>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001848:	4b12      	ldr	r3, [pc, #72]	; (8001894 <MX_ADC1_Init+0x98>)
 800184a:	2201      	movs	r2, #1
 800184c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800184e:	4b11      	ldr	r3, [pc, #68]	; (8001894 <MX_ADC1_Init+0x98>)
 8001850:	2200      	movs	r2, #0
 8001852:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <MX_ADC1_Init+0x98>)
 8001858:	2201      	movs	r2, #1
 800185a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800185c:	480d      	ldr	r0, [pc, #52]	; (8001894 <MX_ADC1_Init+0x98>)
 800185e:	f000 fce3 	bl	8002228 <HAL_ADC_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001868:	f000 f9a8 	bl	8001bbc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800186c:	2301      	movs	r3, #1
 800186e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001870:	2301      	movs	r3, #1
 8001872:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001874:	2300      	movs	r3, #0
 8001876:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001878:	463b      	mov	r3, r7
 800187a:	4619      	mov	r1, r3
 800187c:	4805      	ldr	r0, [pc, #20]	; (8001894 <MX_ADC1_Init+0x98>)
 800187e:	f000 fe4f 	bl	8002520 <HAL_ADC_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001888:	f000 f998 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800188c:	bf00      	nop
 800188e:	3710      	adds	r7, #16
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}
 8001894:	200001f8 	.word	0x200001f8
 8001898:	40012000 	.word	0x40012000
 800189c:	0f000001 	.word	0x0f000001

080018a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80018a4:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018a6:	4a13      	ldr	r2, [pc, #76]	; (80018f4 <MX_I2C1_Init+0x54>)
 80018a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80018aa:	4b11      	ldr	r3, [pc, #68]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018ac:	4a12      	ldr	r2, [pc, #72]	; (80018f8 <MX_I2C1_Init+0x58>)
 80018ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80018b0:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018b8:	2210      	movs	r2, #16
 80018ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80018c4:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80018ca:	4b09      	ldr	r3, [pc, #36]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80018d0:	4b07      	ldr	r3, [pc, #28]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018d8:	2200      	movs	r2, #0
 80018da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_I2C1_Init+0x50>)
 80018de:	f001 fae9 	bl	8002eb4 <HAL_I2C_Init>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80018e8:	f000 f968 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	20000240 	.word	0x20000240
 80018f4:	40005400 	.word	0x40005400
 80018f8:	000186a0 	.word	0x000186a0

080018fc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0308 	add.w	r3, r7, #8
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	463b      	mov	r3, r7
 8001912:	2200      	movs	r2, #0
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001918:	4b1e      	ldr	r3, [pc, #120]	; (8001994 <MX_TIM1_Init+0x98>)
 800191a:	4a1f      	ldr	r2, [pc, #124]	; (8001998 <MX_TIM1_Init+0x9c>)
 800191c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 800191e:	4b1d      	ldr	r3, [pc, #116]	; (8001994 <MX_TIM1_Init+0x98>)
 8001920:	2253      	movs	r2, #83	; 0x53
 8001922:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001924:	4b1b      	ldr	r3, [pc, #108]	; (8001994 <MX_TIM1_Init+0x98>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfff-1;
 800192a:	4b1a      	ldr	r3, [pc, #104]	; (8001994 <MX_TIM1_Init+0x98>)
 800192c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001930:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001932:	4b18      	ldr	r3, [pc, #96]	; (8001994 <MX_TIM1_Init+0x98>)
 8001934:	2200      	movs	r2, #0
 8001936:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001938:	4b16      	ldr	r3, [pc, #88]	; (8001994 <MX_TIM1_Init+0x98>)
 800193a:	2200      	movs	r2, #0
 800193c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800193e:	4b15      	ldr	r3, [pc, #84]	; (8001994 <MX_TIM1_Init+0x98>)
 8001940:	2200      	movs	r2, #0
 8001942:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001944:	4813      	ldr	r0, [pc, #76]	; (8001994 <MX_TIM1_Init+0x98>)
 8001946:	f002 fc01 	bl	800414c <HAL_TIM_Base_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001950:	f000 f934 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001954:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001958:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800195a:	f107 0308 	add.w	r3, r7, #8
 800195e:	4619      	mov	r1, r3
 8001960:	480c      	ldr	r0, [pc, #48]	; (8001994 <MX_TIM1_Init+0x98>)
 8001962:	f002 fd6f 	bl	8004444 <HAL_TIM_ConfigClockSource>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800196c:	f000 f926 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001970:	2300      	movs	r3, #0
 8001972:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001974:	2300      	movs	r3, #0
 8001976:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001978:	463b      	mov	r3, r7
 800197a:	4619      	mov	r1, r3
 800197c:	4805      	ldr	r0, [pc, #20]	; (8001994 <MX_TIM1_Init+0x98>)
 800197e:	f003 f8f1 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001988:	f000 f918 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800198c:	bf00      	nop
 800198e:	3718      	adds	r7, #24
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	20000294 	.word	0x20000294
 8001998:	40010000 	.word	0x40010000

0800199c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b08e      	sub	sp, #56	; 0x38
 80019a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019a6:	2200      	movs	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
 80019aa:	605a      	str	r2, [r3, #4]
 80019ac:	609a      	str	r2, [r3, #8]
 80019ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019b0:	f107 0320 	add.w	r3, r7, #32
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ba:	1d3b      	adds	r3, r7, #4
 80019bc:	2200      	movs	r2, #0
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	605a      	str	r2, [r3, #4]
 80019c2:	609a      	str	r2, [r3, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	611a      	str	r2, [r3, #16]
 80019c8:	615a      	str	r2, [r3, #20]
 80019ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019cc:	4b2d      	ldr	r3, [pc, #180]	; (8001a84 <MX_TIM2_Init+0xe8>)
 80019ce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8400-1;
 80019d4:	4b2b      	ldr	r3, [pc, #172]	; (8001a84 <MX_TIM2_Init+0xe8>)
 80019d6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80019da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019dc:	4b29      	ldr	r3, [pc, #164]	; (8001a84 <MX_TIM2_Init+0xe8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100;
 80019e2:	4b28      	ldr	r3, [pc, #160]	; (8001a84 <MX_TIM2_Init+0xe8>)
 80019e4:	2264      	movs	r2, #100	; 0x64
 80019e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <MX_TIM2_Init+0xe8>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019ee:	4b25      	ldr	r3, [pc, #148]	; (8001a84 <MX_TIM2_Init+0xe8>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019f4:	4823      	ldr	r0, [pc, #140]	; (8001a84 <MX_TIM2_Init+0xe8>)
 80019f6:	f002 fba9 	bl	800414c <HAL_TIM_Base_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001a00:	f000 f8dc 	bl	8001bbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481c      	ldr	r0, [pc, #112]	; (8001a84 <MX_TIM2_Init+0xe8>)
 8001a12:	f002 fd17 	bl	8004444 <HAL_TIM_ConfigClockSource>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a1c:	f000 f8ce 	bl	8001bbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a20:	4818      	ldr	r0, [pc, #96]	; (8001a84 <MX_TIM2_Init+0xe8>)
 8001a22:	f002 fbe2 	bl	80041ea <HAL_TIM_PWM_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a2c:	f000 f8c6 	bl	8001bbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a30:	2300      	movs	r3, #0
 8001a32:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4811      	ldr	r0, [pc, #68]	; (8001a84 <MX_TIM2_Init+0xe8>)
 8001a40:	f003 f890 	bl	8004b64 <HAL_TIMEx_MasterConfigSynchronization>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a4a:	f000 f8b7 	bl	8001bbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a4e:	2360      	movs	r3, #96	; 0x60
 8001a50:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a52:	2300      	movs	r3, #0
 8001a54:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2200      	movs	r2, #0
 8001a62:	4619      	mov	r1, r3
 8001a64:	4807      	ldr	r0, [pc, #28]	; (8001a84 <MX_TIM2_Init+0xe8>)
 8001a66:	f002 fc27 	bl	80042b8 <HAL_TIM_PWM_ConfigChannel>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a70:	f000 f8a4 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a74:	4803      	ldr	r0, [pc, #12]	; (8001a84 <MX_TIM2_Init+0xe8>)
 8001a76:	f000 f991 	bl	8001d9c <HAL_TIM_MspPostInit>

}
 8001a7a:	bf00      	nop
 8001a7c:	3738      	adds	r7, #56	; 0x38
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	bf00      	nop
 8001a84:	200002d4 	.word	0x200002d4

08001a88 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a8c:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a8e:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_USART2_UART_Init+0x50>)
 8001a90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a92:	4b10      	ldr	r3, [pc, #64]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aa6:	4b0b      	ldr	r3, [pc, #44]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aac:	4b09      	ldr	r3, [pc, #36]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aae:	220c      	movs	r2, #12
 8001ab0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ab2:	4b08      	ldr	r3, [pc, #32]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ab8:	4b06      	ldr	r3, [pc, #24]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001abe:	4805      	ldr	r0, [pc, #20]	; (8001ad4 <MX_USART2_UART_Init+0x4c>)
 8001ac0:	f003 f8be 	bl	8004c40 <HAL_UART_Init>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d001      	beq.n	8001ace <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aca:	f000 f877 	bl	8001bbc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ace:	bf00      	nop
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	20000314 	.word	0x20000314
 8001ad8:	40004400 	.word	0x40004400

08001adc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b08a      	sub	sp, #40	; 0x28
 8001ae0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]
 8001aec:	609a      	str	r2, [r3, #8]
 8001aee:	60da      	str	r2, [r3, #12]
 8001af0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001af2:	2300      	movs	r3, #0
 8001af4:	613b      	str	r3, [r7, #16]
 8001af6:	4b2d      	ldr	r3, [pc, #180]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	4a2c      	ldr	r2, [pc, #176]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	6313      	str	r3, [r2, #48]	; 0x30
 8001b02:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b06:	f003 0304 	and.w	r3, r3, #4
 8001b0a:	613b      	str	r3, [r7, #16]
 8001b0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b0e:	2300      	movs	r3, #0
 8001b10:	60fb      	str	r3, [r7, #12]
 8001b12:	4b26      	ldr	r3, [pc, #152]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	4a25      	ldr	r2, [pc, #148]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b1e:	4b23      	ldr	r3, [pc, #140]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b26:	60fb      	str	r3, [r7, #12]
 8001b28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	60bb      	str	r3, [r7, #8]
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a1e      	ldr	r2, [pc, #120]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b34:	f043 0301 	orr.w	r3, r3, #1
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0301 	and.w	r3, r3, #1
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	607b      	str	r3, [r7, #4]
 8001b4a:	4b18      	ldr	r3, [pc, #96]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4e:	4a17      	ldr	r2, [pc, #92]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b50:	f043 0302 	orr.w	r3, r3, #2
 8001b54:	6313      	str	r3, [r2, #48]	; 0x30
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <MX_GPIO_Init+0xd0>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5a:	f003 0302 	and.w	r3, r3, #2
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 8001b62:	2200      	movs	r2, #0
 8001b64:	2130      	movs	r1, #48	; 0x30
 8001b66:	4812      	ldr	r0, [pc, #72]	; (8001bb0 <MX_GPIO_Init+0xd4>)
 8001b68:	f001 f98a 	bl	8002e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001b72:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <MX_GPIO_Init+0xd8>)
 8001b74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	480d      	ldr	r0, [pc, #52]	; (8001bb8 <MX_GPIO_Init+0xdc>)
 8001b82:	f000 ffe1 	bl	8002b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 8001b86:	2330      	movs	r3, #48	; 0x30
 8001b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b92:	2300      	movs	r3, #0
 8001b94:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b96:	f107 0314 	add.w	r3, r7, #20
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	4804      	ldr	r0, [pc, #16]	; (8001bb0 <MX_GPIO_Init+0xd4>)
 8001b9e:	f000 ffd3 	bl	8002b48 <HAL_GPIO_Init>

}
 8001ba2:	bf00      	nop
 8001ba4:	3728      	adds	r7, #40	; 0x28
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40020000 	.word	0x40020000
 8001bb4:	10210000 	.word	0x10210000
 8001bb8:	40020800 	.word	0x40020800

08001bbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bc0:	b672      	cpsid	i
}
 8001bc2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001bc4:	e7fe      	b.n	8001bc4 <Error_Handler+0x8>
	...

08001bc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bce:	2300      	movs	r3, #0
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	4b10      	ldr	r3, [pc, #64]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd6:	4a0f      	ldr	r2, [pc, #60]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bde:	4b0d      	ldr	r3, [pc, #52]	; (8001c14 <HAL_MspInit+0x4c>)
 8001be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001be6:	607b      	str	r3, [r7, #4]
 8001be8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	2300      	movs	r3, #0
 8001bec:	603b      	str	r3, [r7, #0]
 8001bee:	4b09      	ldr	r3, [pc, #36]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	4a08      	ldr	r2, [pc, #32]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfa:	4b06      	ldr	r3, [pc, #24]	; (8001c14 <HAL_MspInit+0x4c>)
 8001bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c06:	2007      	movs	r0, #7
 8001c08:	f000 ff6a 	bl	8002ae0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c0c:	bf00      	nop
 8001c0e:	3708      	adds	r7, #8
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	40023800 	.word	0x40023800

08001c18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b08a      	sub	sp, #40	; 0x28
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c20:	f107 0314 	add.w	r3, r7, #20
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a17      	ldr	r2, [pc, #92]	; (8001c94 <HAL_ADC_MspInit+0x7c>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d127      	bne.n	8001c8a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <HAL_ADC_MspInit+0x80>)
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	4a15      	ldr	r2, [pc, #84]	; (8001c98 <HAL_ADC_MspInit+0x80>)
 8001c44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c48:	6453      	str	r3, [r2, #68]	; 0x44
 8001c4a:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <HAL_ADC_MspInit+0x80>)
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	613b      	str	r3, [r7, #16]
 8001c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60fb      	str	r3, [r7, #12]
 8001c5a:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <HAL_ADC_MspInit+0x80>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a0e      	ldr	r2, [pc, #56]	; (8001c98 <HAL_ADC_MspInit+0x80>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b0c      	ldr	r3, [pc, #48]	; (8001c98 <HAL_ADC_MspInit+0x80>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001c72:	2302      	movs	r3, #2
 8001c74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c76:	2303      	movs	r3, #3
 8001c78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7e:	f107 0314 	add.w	r3, r7, #20
 8001c82:	4619      	mov	r1, r3
 8001c84:	4805      	ldr	r0, [pc, #20]	; (8001c9c <HAL_ADC_MspInit+0x84>)
 8001c86:	f000 ff5f 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c8a:	bf00      	nop
 8001c8c:	3728      	adds	r7, #40	; 0x28
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40012000 	.word	0x40012000
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40020000 	.word	0x40020000

08001ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08a      	sub	sp, #40	; 0x28
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]
 8001cb0:	605a      	str	r2, [r3, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
 8001cb4:	60da      	str	r2, [r3, #12]
 8001cb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a19      	ldr	r2, [pc, #100]	; (8001d24 <HAL_I2C_MspInit+0x84>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d12b      	bne.n	8001d1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	4b18      	ldr	r3, [pc, #96]	; (8001d28 <HAL_I2C_MspInit+0x88>)
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	4a17      	ldr	r2, [pc, #92]	; (8001d28 <HAL_I2C_MspInit+0x88>)
 8001ccc:	f043 0302 	orr.w	r3, r3, #2
 8001cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd2:	4b15      	ldr	r3, [pc, #84]	; (8001d28 <HAL_I2C_MspInit+0x88>)
 8001cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	613b      	str	r3, [r7, #16]
 8001cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001cde:	23c0      	movs	r3, #192	; 0xc0
 8001ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ce2:	2312      	movs	r3, #18
 8001ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cea:	2303      	movs	r3, #3
 8001cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001cee:	2304      	movs	r3, #4
 8001cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf2:	f107 0314 	add.w	r3, r7, #20
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <HAL_I2C_MspInit+0x8c>)
 8001cfa:	f000 ff25 	bl	8002b48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b09      	ldr	r3, [pc, #36]	; (8001d28 <HAL_I2C_MspInit+0x88>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a08      	ldr	r2, [pc, #32]	; (8001d28 <HAL_I2C_MspInit+0x88>)
 8001d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b06      	ldr	r3, [pc, #24]	; (8001d28 <HAL_I2C_MspInit+0x88>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d1a:	bf00      	nop
 8001d1c:	3728      	adds	r7, #40	; 0x28
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	40005400 	.word	0x40005400
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40020400 	.word	0x40020400

08001d30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b085      	sub	sp, #20
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a15      	ldr	r2, [pc, #84]	; (8001d94 <HAL_TIM_Base_MspInit+0x64>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d10e      	bne.n	8001d60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	60fb      	str	r3, [r7, #12]
 8001d46:	4b14      	ldr	r3, [pc, #80]	; (8001d98 <HAL_TIM_Base_MspInit+0x68>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a13      	ldr	r2, [pc, #76]	; (8001d98 <HAL_TIM_Base_MspInit+0x68>)
 8001d4c:	f043 0301 	orr.w	r3, r3, #1
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b11      	ldr	r3, [pc, #68]	; (8001d98 <HAL_TIM_Base_MspInit+0x68>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	60fb      	str	r3, [r7, #12]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d5e:	e012      	b.n	8001d86 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d68:	d10d      	bne.n	8001d86 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	60bb      	str	r3, [r7, #8]
 8001d6e:	4b0a      	ldr	r3, [pc, #40]	; (8001d98 <HAL_TIM_Base_MspInit+0x68>)
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_TIM_Base_MspInit+0x68>)
 8001d74:	f043 0301 	orr.w	r3, r3, #1
 8001d78:	6413      	str	r3, [r2, #64]	; 0x40
 8001d7a:	4b07      	ldr	r3, [pc, #28]	; (8001d98 <HAL_TIM_Base_MspInit+0x68>)
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	60bb      	str	r3, [r7, #8]
 8001d84:	68bb      	ldr	r3, [r7, #8]
}
 8001d86:	bf00      	nop
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40023800 	.word	0x40023800

08001d9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dbc:	d11d      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b10      	ldr	r3, [pc, #64]	; (8001e04 <HAL_TIM_MspPostInit+0x68>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a0f      	ldr	r2, [pc, #60]	; (8001e04 <HAL_TIM_MspPostInit+0x68>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_TIM_MspPostInit+0x68>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001dea:	2301      	movs	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4619      	mov	r1, r3
 8001df4:	4804      	ldr	r0, [pc, #16]	; (8001e08 <HAL_TIM_MspPostInit+0x6c>)
 8001df6:	f000 fea7 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40023800 	.word	0x40023800
 8001e08:	40020000 	.word	0x40020000

08001e0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08a      	sub	sp, #40	; 0x28
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 0314 	add.w	r3, r7, #20
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a19      	ldr	r2, [pc, #100]	; (8001e90 <HAL_UART_MspInit+0x84>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d12b      	bne.n	8001e86 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	4b18      	ldr	r3, [pc, #96]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a17      	ldr	r2, [pc, #92]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b15      	ldr	r3, [pc, #84]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	4b11      	ldr	r3, [pc, #68]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b0e      	ldr	r3, [pc, #56]	; (8001e94 <HAL_UART_MspInit+0x88>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e66:	230c      	movs	r3, #12
 8001e68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e76:	2307      	movs	r3, #7
 8001e78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 0314 	add.w	r3, r7, #20
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4805      	ldr	r0, [pc, #20]	; (8001e98 <HAL_UART_MspInit+0x8c>)
 8001e82:	f000 fe61 	bl	8002b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	3728      	adds	r7, #40	; 0x28
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40004400 	.word	0x40004400
 8001e94:	40023800 	.word	0x40023800
 8001e98:	40020000 	.word	0x40020000

08001e9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea0:	e7fe      	b.n	8001ea0 <NMI_Handler+0x4>

08001ea2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler+0x4>

08001ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001eac:	e7fe      	b.n	8001eac <MemManage_Handler+0x4>

08001eae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001eb2:	e7fe      	b.n	8001eb2 <BusFault_Handler+0x4>

08001eb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001eb8:	e7fe      	b.n	8001eb8 <UsageFault_Handler+0x4>

08001eba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec6:	4770      	bx	lr

08001ec8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ecc:	bf00      	nop
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr

08001ed6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ed6:	b480      	push	{r7}
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001eda:	bf00      	nop
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr

08001ee4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ee8:	f000 f95a 	bl	80021a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
	return 1;
 8001ef4:	2301      	movs	r3, #1
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_kill>:

int _kill(int pid, int sig)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001f0a:	f003 fc9b 	bl	8005844 <__errno>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2216      	movs	r2, #22
 8001f12:	601a      	str	r2, [r3, #0]
	return -1;
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3708      	adds	r7, #8
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <_exit>:

void _exit (int status)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001f28:	f04f 31ff 	mov.w	r1, #4294967295
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ffe7 	bl	8001f00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001f32:	e7fe      	b.n	8001f32 <_exit+0x12>

08001f34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b086      	sub	sp, #24
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	60f8      	str	r0, [r7, #12]
 8001f3c:	60b9      	str	r1, [r7, #8]
 8001f3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f40:	2300      	movs	r3, #0
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e00a      	b.n	8001f5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001f46:	f3af 8000 	nop.w
 8001f4a:	4601      	mov	r1, r0
 8001f4c:	68bb      	ldr	r3, [r7, #8]
 8001f4e:	1c5a      	adds	r2, r3, #1
 8001f50:	60ba      	str	r2, [r7, #8]
 8001f52:	b2ca      	uxtb	r2, r1
 8001f54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f56:	697b      	ldr	r3, [r7, #20]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	617b      	str	r3, [r7, #20]
 8001f5c:	697a      	ldr	r2, [r7, #20]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	429a      	cmp	r2, r3
 8001f62:	dbf0      	blt.n	8001f46 <_read+0x12>
	}

return len;
 8001f64:	687b      	ldr	r3, [r7, #4]
}
 8001f66:	4618      	mov	r0, r3
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b086      	sub	sp, #24
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	617b      	str	r3, [r7, #20]
 8001f7e:	e009      	b.n	8001f94 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	1c5a      	adds	r2, r3, #1
 8001f84:	60ba      	str	r2, [r7, #8]
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	3301      	adds	r3, #1
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697a      	ldr	r2, [r7, #20]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	dbf1      	blt.n	8001f80 <_write+0x12>
	}
	return len;
 8001f9c:	687b      	ldr	r3, [r7, #4]
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3718      	adds	r7, #24
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <_close>:

int _close(int file)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	b083      	sub	sp, #12
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
	return -1;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	370c      	adds	r7, #12
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbc:	4770      	bx	lr

08001fbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001fbe:	b480      	push	{r7}
 8001fc0:	b083      	sub	sp, #12
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
 8001fc6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fce:	605a      	str	r2, [r3, #4]
	return 0;
 8001fd0:	2300      	movs	r3, #0
}
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	370c      	adds	r7, #12
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fdc:	4770      	bx	lr

08001fde <_isatty>:

int _isatty(int file)
{
 8001fde:	b480      	push	{r7}
 8001fe0:	b083      	sub	sp, #12
 8001fe2:	af00      	add	r7, sp, #0
 8001fe4:	6078      	str	r0, [r7, #4]
	return 1;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	60f8      	str	r0, [r7, #12]
 8001ffc:	60b9      	str	r1, [r7, #8]
 8001ffe:	607a      	str	r2, [r7, #4]
	return 0;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
	...

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002040:	f003 fc00 	bl	8005844 <__errno>
 8002044:	4603      	mov	r3, r0
 8002046:	220c      	movs	r2, #12
 8002048:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	e009      	b.n	8002064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <_sbrk+0x64>)
 8002060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20020000 	.word	0x20020000
 8002070:	00000400 	.word	0x00000400
 8002074:	20000370 	.word	0x20000370
 8002078:	20000388 	.word	0x20000388

0800207c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <SystemInit+0x28>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <SystemInit+0x28>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SystemInit+0x28>)
 8002092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002096:	609a      	str	r2, [r3, #8]
#endif
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020ae:	e003      	b.n	80020b8 <LoopCopyDataInit>

080020b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020b6:	3104      	adds	r1, #4

080020b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020c0:	d3f6      	bcc.n	80020b0 <CopyDataInit>
  ldr  r2, =_sbss
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020c4:	e002      	b.n	80020cc <LoopFillZerobss>

080020c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020c8:	f842 3b04 	str.w	r3, [r2], #4

080020cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020d0:	d3f9      	bcc.n	80020c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020d2:	f7ff ffd3 	bl	800207c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d6:	f003 fbbb 	bl	8005850 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7ff f949 	bl	8001370 <main>
  bx  lr    
 80020de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020e4:	08008c04 	.word	0x08008c04
  ldr  r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020ec:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 80020f0:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 80020f4:	20000388 	.word	0x20000388

080020f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC_IRQHandler>
	...

080020fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <HAL_Init+0x40>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_Init+0x40>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_Init+0x40>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f000 fcdb 	bl	8002ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f808 	bl	8002140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002130:	f7ff fd4a 	bl	8001bc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023c00 	.word	0x40023c00

08002140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002148:	4b12      	ldr	r3, [pc, #72]	; (8002194 <HAL_InitTick+0x54>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_InitTick+0x58>)
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	4619      	mov	r1, r3
 8002152:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002156:	fbb3 f3f1 	udiv	r3, r3, r1
 800215a:	fbb2 f3f3 	udiv	r3, r2, r3
 800215e:	4618      	mov	r0, r3
 8002160:	f000 fce5 	bl	8002b2e <HAL_SYSTICK_Config>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e00e      	b.n	800218c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2b0f      	cmp	r3, #15
 8002172:	d80a      	bhi.n	800218a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002174:	2200      	movs	r2, #0
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	f04f 30ff 	mov.w	r0, #4294967295
 800217c:	f000 fcbb 	bl	8002af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002180:	4a06      	ldr	r2, [pc, #24]	; (800219c <HAL_InitTick+0x5c>)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	e000      	b.n	800218c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
}
 800218c:	4618      	mov	r0, r3
 800218e:	3708      	adds	r7, #8
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	20000000 	.word	0x20000000
 8002198:	20000008 	.word	0x20000008
 800219c:	20000004 	.word	0x20000004

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021a4:	4b06      	ldr	r3, [pc, #24]	; (80021c0 <HAL_IncTick+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x24>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	; (80021c4 <HAL_IncTick+0x24>)
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000008 	.word	0x20000008
 80021c4:	20000374 	.word	0x20000374

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	; (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	20000374 	.word	0x20000374

080021e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021e8:	f7ff ffee 	bl	80021c8 <HAL_GetTick>
 80021ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f8:	d005      	beq.n	8002206 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021fa:	4b0a      	ldr	r3, [pc, #40]	; (8002224 <HAL_Delay+0x44>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	461a      	mov	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	4413      	add	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002206:	bf00      	nop
 8002208:	f7ff ffde 	bl	80021c8 <HAL_GetTick>
 800220c:	4602      	mov	r2, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1ad3      	subs	r3, r2, r3
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	429a      	cmp	r2, r3
 8002216:	d8f7      	bhi.n	8002208 <HAL_Delay+0x28>
  {
  }
}
 8002218:	bf00      	nop
 800221a:	bf00      	nop
 800221c:	3710      	adds	r7, #16
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	20000008 	.word	0x20000008

08002228 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b084      	sub	sp, #16
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d101      	bne.n	800223e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e033      	b.n	80022a6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	2b00      	cmp	r3, #0
 8002244:	d109      	bne.n	800225a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f7ff fce6 	bl	8001c18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2200      	movs	r2, #0
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	2b00      	cmp	r3, #0
 8002264:	d118      	bne.n	8002298 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800226e:	f023 0302 	bic.w	r3, r3, #2
 8002272:	f043 0202 	orr.w	r2, r3, #2
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fa82 	bl	8002784 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2200      	movs	r2, #0
 8002284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228a:	f023 0303 	bic.w	r3, r3, #3
 800228e:	f043 0201 	orr.w	r2, r3, #1
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
 8002296:	e001      	b.n	800229c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
	...

080022b0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b085      	sub	sp, #20
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d101      	bne.n	80022ca <HAL_ADC_Start+0x1a>
 80022c6:	2302      	movs	r3, #2
 80022c8:	e08a      	b.n	80023e0 <HAL_ADC_Start+0x130>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d018      	beq.n	8002312 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689a      	ldr	r2, [r3, #8]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f042 0201 	orr.w	r2, r2, #1
 80022ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80022f0:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <HAL_ADC_Start+0x13c>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a3e      	ldr	r2, [pc, #248]	; (80023f0 <HAL_ADC_Start+0x140>)
 80022f6:	fba2 2303 	umull	r2, r3, r2, r3
 80022fa:	0c9a      	lsrs	r2, r3, #18
 80022fc:	4613      	mov	r3, r2
 80022fe:	005b      	lsls	r3, r3, #1
 8002300:	4413      	add	r3, r2
 8002302:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002304:	e002      	b.n	800230c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	3b01      	subs	r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d15e      	bne.n	80023de <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002324:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	2b00      	cmp	r3, #0
 8002340:	d007      	beq.n	8002352 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002346:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800234a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800235a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800235e:	d106      	bne.n	800236e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002364:	f023 0206 	bic.w	r2, r3, #6
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	645a      	str	r2, [r3, #68]	; 0x44
 800236c:	e002      	b.n	8002374 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800237c:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_ADC_Start+0x144>)
 800237e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002388:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 031f 	and.w	r3, r3, #31
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11c      	bne.n	80023de <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023b2:	609a      	str	r2, [r3, #8]
 80023b4:	e013      	b.n	80023de <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a0f      	ldr	r2, [pc, #60]	; (80023f8 <HAL_ADC_Start+0x148>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d10e      	bne.n	80023de <HAL_ADC_Start+0x12e>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d107      	bne.n	80023de <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80023dc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	20000000 	.word	0x20000000
 80023f0:	431bde83 	.word	0x431bde83
 80023f4:	40012300 	.word	0x40012300
 80023f8:	40012000 	.word	0x40012000

080023fc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
 8002404:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002418:	d113      	bne.n	8002442 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002424:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002428:	d10b      	bne.n	8002442 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	f043 0220 	orr.w	r2, r3, #32
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2200      	movs	r2, #0
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e05c      	b.n	80024fc <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002442:	f7ff fec1 	bl	80021c8 <HAL_GetTick>
 8002446:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002448:	e01a      	b.n	8002480 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d016      	beq.n	8002480 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d007      	beq.n	8002468 <HAL_ADC_PollForConversion+0x6c>
 8002458:	f7ff feb6 	bl	80021c8 <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d20b      	bcs.n	8002480 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	f043 0204 	orr.w	r2, r3, #4
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e03d      	b.n	80024fc <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b02      	cmp	r3, #2
 800248c:	d1dd      	bne.n	800244a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f06f 0212 	mvn.w	r2, #18
 8002496:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d123      	bne.n	80024fa <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d11f      	bne.n	80024fa <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024c0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d006      	beq.n	80024d6 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d111      	bne.n	80024fa <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d105      	bne.n	80024fa <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3710      	adds	r7, #16
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}

08002504 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002512:	4618      	mov	r0, r3
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800252a:	2300      	movs	r3, #0
 800252c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d101      	bne.n	800253c <HAL_ADC_ConfigChannel+0x1c>
 8002538:	2302      	movs	r3, #2
 800253a:	e113      	b.n	8002764 <HAL_ADC_ConfigChannel+0x244>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b09      	cmp	r3, #9
 800254a:	d925      	bls.n	8002598 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68d9      	ldr	r1, [r3, #12]
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	b29b      	uxth	r3, r3
 8002558:	461a      	mov	r2, r3
 800255a:	4613      	mov	r3, r2
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	4413      	add	r3, r2
 8002560:	3b1e      	subs	r3, #30
 8002562:	2207      	movs	r2, #7
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	43da      	mvns	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	400a      	ands	r2, r1
 8002570:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68d9      	ldr	r1, [r3, #12]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	689a      	ldr	r2, [r3, #8]
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	b29b      	uxth	r3, r3
 8002582:	4618      	mov	r0, r3
 8002584:	4603      	mov	r3, r0
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4403      	add	r3, r0
 800258a:	3b1e      	subs	r3, #30
 800258c:	409a      	lsls	r2, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	430a      	orrs	r2, r1
 8002594:	60da      	str	r2, [r3, #12]
 8002596:	e022      	b.n	80025de <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6919      	ldr	r1, [r3, #16]
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	2207      	movs	r2, #7
 80025ae:	fa02 f303 	lsl.w	r3, r2, r3
 80025b2:	43da      	mvns	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	400a      	ands	r2, r1
 80025ba:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6919      	ldr	r1, [r3, #16]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	4618      	mov	r0, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	4403      	add	r3, r0
 80025d4:	409a      	lsls	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d824      	bhi.n	8002630 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	4613      	mov	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	4413      	add	r3, r2
 80025f6:	3b05      	subs	r3, #5
 80025f8:	221f      	movs	r2, #31
 80025fa:	fa02 f303 	lsl.w	r3, r2, r3
 80025fe:	43da      	mvns	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	400a      	ands	r2, r1
 8002606:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	4618      	mov	r0, r3
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	685a      	ldr	r2, [r3, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4413      	add	r3, r2
 8002620:	3b05      	subs	r3, #5
 8002622:	fa00 f203 	lsl.w	r2, r0, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	430a      	orrs	r2, r1
 800262c:	635a      	str	r2, [r3, #52]	; 0x34
 800262e:	e04c      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	2b0c      	cmp	r3, #12
 8002636:	d824      	bhi.n	8002682 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	685a      	ldr	r2, [r3, #4]
 8002642:	4613      	mov	r3, r2
 8002644:	009b      	lsls	r3, r3, #2
 8002646:	4413      	add	r3, r2
 8002648:	3b23      	subs	r3, #35	; 0x23
 800264a:	221f      	movs	r2, #31
 800264c:	fa02 f303 	lsl.w	r3, r2, r3
 8002650:	43da      	mvns	r2, r3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	400a      	ands	r2, r1
 8002658:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	b29b      	uxth	r3, r3
 8002666:	4618      	mov	r0, r3
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	685a      	ldr	r2, [r3, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	4413      	add	r3, r2
 8002672:	3b23      	subs	r3, #35	; 0x23
 8002674:	fa00 f203 	lsl.w	r2, r0, r3
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	430a      	orrs	r2, r1
 800267e:	631a      	str	r2, [r3, #48]	; 0x30
 8002680:	e023      	b.n	80026ca <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	685a      	ldr	r2, [r3, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	009b      	lsls	r3, r3, #2
 8002690:	4413      	add	r3, r2
 8002692:	3b41      	subs	r3, #65	; 0x41
 8002694:	221f      	movs	r2, #31
 8002696:	fa02 f303 	lsl.w	r3, r2, r3
 800269a:	43da      	mvns	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	400a      	ands	r2, r1
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	4618      	mov	r0, r3
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	4613      	mov	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	4413      	add	r3, r2
 80026bc:	3b41      	subs	r3, #65	; 0x41
 80026be:	fa00 f203 	lsl.w	r2, r0, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	430a      	orrs	r2, r1
 80026c8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ca:	4b29      	ldr	r3, [pc, #164]	; (8002770 <HAL_ADC_ConfigChannel+0x250>)
 80026cc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a28      	ldr	r2, [pc, #160]	; (8002774 <HAL_ADC_ConfigChannel+0x254>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d10f      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1d8>
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2b12      	cmp	r3, #18
 80026de:	d10b      	bne.n	80026f8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a1d      	ldr	r2, [pc, #116]	; (8002774 <HAL_ADC_ConfigChannel+0x254>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d12b      	bne.n	800275a <HAL_ADC_ConfigChannel+0x23a>
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1c      	ldr	r2, [pc, #112]	; (8002778 <HAL_ADC_ConfigChannel+0x258>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d003      	beq.n	8002714 <HAL_ADC_ConfigChannel+0x1f4>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b11      	cmp	r3, #17
 8002712:	d122      	bne.n	800275a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a11      	ldr	r2, [pc, #68]	; (8002778 <HAL_ADC_ConfigChannel+0x258>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d111      	bne.n	800275a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002736:	4b11      	ldr	r3, [pc, #68]	; (800277c <HAL_ADC_ConfigChannel+0x25c>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a11      	ldr	r2, [pc, #68]	; (8002780 <HAL_ADC_ConfigChannel+0x260>)
 800273c:	fba2 2303 	umull	r2, r3, r2, r3
 8002740:	0c9a      	lsrs	r2, r3, #18
 8002742:	4613      	mov	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	4413      	add	r3, r2
 8002748:	005b      	lsls	r3, r3, #1
 800274a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800274c:	e002      	b.n	8002754 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	3b01      	subs	r3, #1
 8002752:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f9      	bne.n	800274e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002762:	2300      	movs	r3, #0
}
 8002764:	4618      	mov	r0, r3
 8002766:	3714      	adds	r7, #20
 8002768:	46bd      	mov	sp, r7
 800276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276e:	4770      	bx	lr
 8002770:	40012300 	.word	0x40012300
 8002774:	40012000 	.word	0x40012000
 8002778:	10000012 	.word	0x10000012
 800277c:	20000000 	.word	0x20000000
 8002780:	431bde83 	.word	0x431bde83

08002784 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002784:	b480      	push	{r7}
 8002786:	b085      	sub	sp, #20
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800278c:	4b79      	ldr	r3, [pc, #484]	; (8002974 <ADC_Init+0x1f0>)
 800278e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	431a      	orrs	r2, r3
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6859      	ldr	r1, [r3, #4]
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	691b      	ldr	r3, [r3, #16]
 80027c4:	021a      	lsls	r2, r3, #8
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80027dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	6859      	ldr	r1, [r3, #4]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689a      	ldr	r2, [r3, #8]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	430a      	orrs	r2, r1
 80027ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	689a      	ldr	r2, [r3, #8]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	6899      	ldr	r1, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002816:	4a58      	ldr	r2, [pc, #352]	; (8002978 <ADC_Init+0x1f4>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d022      	beq.n	8002862 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800282a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6899      	ldr	r1, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	430a      	orrs	r2, r1
 800283c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800284c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	6899      	ldr	r1, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	430a      	orrs	r2, r1
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	e00f      	b.n	8002882 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	689a      	ldr	r2, [r3, #8]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002870:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002880:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689a      	ldr	r2, [r3, #8]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f022 0202 	bic.w	r2, r2, #2
 8002890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	6899      	ldr	r1, [r3, #8]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	7e1b      	ldrb	r3, [r3, #24]
 800289c:	005a      	lsls	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	430a      	orrs	r2, r1
 80028a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d01b      	beq.n	80028e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	685a      	ldr	r2, [r3, #4]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	685a      	ldr	r2, [r3, #4]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80028ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	6859      	ldr	r1, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	3b01      	subs	r3, #1
 80028dc:	035a      	lsls	r2, r3, #13
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	e007      	b.n	80028f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80028f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002906:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	3b01      	subs	r3, #1
 8002914:	051a      	lsls	r2, r3, #20
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	430a      	orrs	r2, r1
 800291c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689a      	ldr	r2, [r3, #8]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800292c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	6899      	ldr	r1, [r3, #8]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800293a:	025a      	lsls	r2, r3, #9
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689a      	ldr	r2, [r3, #8]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002952:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	029a      	lsls	r2, r3, #10
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	430a      	orrs	r2, r1
 8002966:	609a      	str	r2, [r3, #8]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	40012300 	.word	0x40012300
 8002978:	0f000001 	.word	0x0f000001

0800297c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800298c:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002992:	68ba      	ldr	r2, [r7, #8]
 8002994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002998:	4013      	ands	r3, r2
 800299a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80029a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029ae:	4a04      	ldr	r2, [pc, #16]	; (80029c0 <__NVIC_SetPriorityGrouping+0x44>)
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	60d3      	str	r3, [r2, #12]
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029c8:	4b04      	ldr	r3, [pc, #16]	; (80029dc <__NVIC_GetPriorityGrouping+0x18>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	0a1b      	lsrs	r3, r3, #8
 80029ce:	f003 0307 	and.w	r3, r3, #7
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	4603      	mov	r3, r0
 80029e8:	6039      	str	r1, [r7, #0]
 80029ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	db0a      	blt.n	8002a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	b2da      	uxtb	r2, r3
 80029f8:	490c      	ldr	r1, [pc, #48]	; (8002a2c <__NVIC_SetPriority+0x4c>)
 80029fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fe:	0112      	lsls	r2, r2, #4
 8002a00:	b2d2      	uxtb	r2, r2
 8002a02:	440b      	add	r3, r1
 8002a04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a08:	e00a      	b.n	8002a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	b2da      	uxtb	r2, r3
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <__NVIC_SetPriority+0x50>)
 8002a10:	79fb      	ldrb	r3, [r7, #7]
 8002a12:	f003 030f 	and.w	r3, r3, #15
 8002a16:	3b04      	subs	r3, #4
 8002a18:	0112      	lsls	r2, r2, #4
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	440b      	add	r3, r1
 8002a1e:	761a      	strb	r2, [r3, #24]
}
 8002a20:	bf00      	nop
 8002a22:	370c      	adds	r7, #12
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000e100 	.word	0xe000e100
 8002a30:	e000ed00 	.word	0xe000ed00

08002a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b089      	sub	sp, #36	; 0x24
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f003 0307 	and.w	r3, r3, #7
 8002a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a48:	69fb      	ldr	r3, [r7, #28]
 8002a4a:	f1c3 0307 	rsb	r3, r3, #7
 8002a4e:	2b04      	cmp	r3, #4
 8002a50:	bf28      	it	cs
 8002a52:	2304      	movcs	r3, #4
 8002a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3304      	adds	r3, #4
 8002a5a:	2b06      	cmp	r3, #6
 8002a5c:	d902      	bls.n	8002a64 <NVIC_EncodePriority+0x30>
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	3b03      	subs	r3, #3
 8002a62:	e000      	b.n	8002a66 <NVIC_EncodePriority+0x32>
 8002a64:	2300      	movs	r3, #0
 8002a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	f04f 32ff 	mov.w	r2, #4294967295
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a72:	43da      	mvns	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	401a      	ands	r2, r3
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	fa01 f303 	lsl.w	r3, r1, r3
 8002a86:	43d9      	mvns	r1, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a8c:	4313      	orrs	r3, r2
         );
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3724      	adds	r7, #36	; 0x24
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
	...

08002a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aac:	d301      	bcc.n	8002ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e00f      	b.n	8002ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab2:	4a0a      	ldr	r2, [pc, #40]	; (8002adc <SysTick_Config+0x40>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aba:	210f      	movs	r1, #15
 8002abc:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac0:	f7ff ff8e 	bl	80029e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac4:	4b05      	ldr	r3, [pc, #20]	; (8002adc <SysTick_Config+0x40>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aca:	4b04      	ldr	r3, [pc, #16]	; (8002adc <SysTick_Config+0x40>)
 8002acc:	2207      	movs	r2, #7
 8002ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	e000e010 	.word	0xe000e010

08002ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b082      	sub	sp, #8
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ff47 	bl	800297c <__NVIC_SetPriorityGrouping>
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	4603      	mov	r3, r0
 8002afe:	60b9      	str	r1, [r7, #8]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b08:	f7ff ff5c 	bl	80029c4 <__NVIC_GetPriorityGrouping>
 8002b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	68b9      	ldr	r1, [r7, #8]
 8002b12:	6978      	ldr	r0, [r7, #20]
 8002b14:	f7ff ff8e 	bl	8002a34 <NVIC_EncodePriority>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff ff5d 	bl	80029e0 <__NVIC_SetPriority>
}
 8002b26:	bf00      	nop
 8002b28:	3718      	adds	r7, #24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}

08002b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b2e:	b580      	push	{r7, lr}
 8002b30:	b082      	sub	sp, #8
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7ff ffb0 	bl	8002a9c <SysTick_Config>
 8002b3c:	4603      	mov	r3, r0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
	...

08002b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b089      	sub	sp, #36	; 0x24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
 8002b50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002b52:	2300      	movs	r3, #0
 8002b54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b5e:	2300      	movs	r3, #0
 8002b60:	61fb      	str	r3, [r7, #28]
 8002b62:	e159      	b.n	8002e18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002b64:	2201      	movs	r2, #1
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	697a      	ldr	r2, [r7, #20]
 8002b74:	4013      	ands	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002b78:	693a      	ldr	r2, [r7, #16]
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	f040 8148 	bne.w	8002e12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b01      	cmp	r3, #1
 8002b88:	d00b      	beq.n	8002ba2 <HAL_GPIO_Init+0x5a>
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002b96:	2b11      	cmp	r3, #17
 8002b98:	d003      	beq.n	8002ba2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	2b12      	cmp	r3, #18
 8002ba0:	d130      	bne.n	8002c04 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	005b      	lsls	r3, r3, #1
 8002bac:	2203      	movs	r2, #3
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	43db      	mvns	r3, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4013      	ands	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	69ba      	ldr	r2, [r7, #24]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69ba      	ldr	r2, [r7, #24]
 8002bd0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43db      	mvns	r3, r3
 8002be2:	69ba      	ldr	r2, [r7, #24]
 8002be4:	4013      	ands	r3, r2
 8002be6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	091b      	lsrs	r3, r3, #4
 8002bee:	f003 0201 	and.w	r2, r3, #1
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69ba      	ldr	r2, [r7, #24]
 8002c02:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c0a:	69fb      	ldr	r3, [r7, #28]
 8002c0c:	005b      	lsls	r3, r3, #1
 8002c0e:	2203      	movs	r2, #3
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	43db      	mvns	r3, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	69ba      	ldr	r2, [r7, #24]
 8002c32:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d003      	beq.n	8002c44 <HAL_GPIO_Init+0xfc>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	2b12      	cmp	r3, #18
 8002c42:	d123      	bne.n	8002c8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	08da      	lsrs	r2, r3, #3
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3208      	adds	r2, #8
 8002c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	f003 0307 	and.w	r3, r3, #7
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	220f      	movs	r2, #15
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	43db      	mvns	r3, r3
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4013      	ands	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	691a      	ldr	r2, [r3, #16]
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	fa02 f303 	lsl.w	r3, r2, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	08da      	lsrs	r2, r3, #3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3208      	adds	r2, #8
 8002c86:	69b9      	ldr	r1, [r7, #24]
 8002c88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	2203      	movs	r2, #3
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f003 0203 	and.w	r2, r3, #3
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80a2 	beq.w	8002e12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60fb      	str	r3, [r7, #12]
 8002cd2:	4b57      	ldr	r3, [pc, #348]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	4a56      	ldr	r2, [pc, #344]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8002cde:	4b54      	ldr	r3, [pc, #336]	; (8002e30 <HAL_GPIO_Init+0x2e8>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002cea:	4a52      	ldr	r2, [pc, #328]	; (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	089b      	lsrs	r3, r3, #2
 8002cf0:	3302      	adds	r3, #2
 8002cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	220f      	movs	r2, #15
 8002d02:	fa02 f303 	lsl.w	r3, r2, r3
 8002d06:	43db      	mvns	r3, r3
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a49      	ldr	r2, [pc, #292]	; (8002e38 <HAL_GPIO_Init+0x2f0>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d019      	beq.n	8002d4a <HAL_GPIO_Init+0x202>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a48      	ldr	r2, [pc, #288]	; (8002e3c <HAL_GPIO_Init+0x2f4>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d013      	beq.n	8002d46 <HAL_GPIO_Init+0x1fe>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	4a47      	ldr	r2, [pc, #284]	; (8002e40 <HAL_GPIO_Init+0x2f8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d00d      	beq.n	8002d42 <HAL_GPIO_Init+0x1fa>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a46      	ldr	r2, [pc, #280]	; (8002e44 <HAL_GPIO_Init+0x2fc>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d007      	beq.n	8002d3e <HAL_GPIO_Init+0x1f6>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a45      	ldr	r2, [pc, #276]	; (8002e48 <HAL_GPIO_Init+0x300>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d101      	bne.n	8002d3a <HAL_GPIO_Init+0x1f2>
 8002d36:	2304      	movs	r3, #4
 8002d38:	e008      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d3a:	2307      	movs	r3, #7
 8002d3c:	e006      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e004      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e002      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_GPIO_Init+0x204>
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	69fa      	ldr	r2, [r7, #28]
 8002d4e:	f002 0203 	and.w	r2, r2, #3
 8002d52:	0092      	lsls	r2, r2, #2
 8002d54:	4093      	lsls	r3, r2
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002d5c:	4935      	ldr	r1, [pc, #212]	; (8002e34 <HAL_GPIO_Init+0x2ec>)
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	089b      	lsrs	r3, r3, #2
 8002d62:	3302      	adds	r3, #2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d6a:	4b38      	ldr	r3, [pc, #224]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d8e:	4a2f      	ldr	r2, [pc, #188]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002d94:	4b2d      	ldr	r3, [pc, #180]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d003      	beq.n	8002db8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002db8:	4a24      	ldr	r2, [pc, #144]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dbe:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	43db      	mvns	r3, r3
 8002dc8:	69ba      	ldr	r2, [r7, #24]
 8002dca:	4013      	ands	r3, r2
 8002dcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d003      	beq.n	8002de2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002de2:	4a1a      	ldr	r2, [pc, #104]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002de8:	4b18      	ldr	r3, [pc, #96]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002dea:	68db      	ldr	r3, [r3, #12]
 8002dec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	43db      	mvns	r3, r3
 8002df2:	69ba      	ldr	r2, [r7, #24]
 8002df4:	4013      	ands	r3, r2
 8002df6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d003      	beq.n	8002e0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e0c:	4a0f      	ldr	r2, [pc, #60]	; (8002e4c <HAL_GPIO_Init+0x304>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	3301      	adds	r3, #1
 8002e16:	61fb      	str	r3, [r7, #28]
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	2b0f      	cmp	r3, #15
 8002e1c:	f67f aea2 	bls.w	8002b64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	bf00      	nop
 8002e24:	3724      	adds	r7, #36	; 0x24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800
 8002e34:	40013800 	.word	0x40013800
 8002e38:	40020000 	.word	0x40020000
 8002e3c:	40020400 	.word	0x40020400
 8002e40:	40020800 	.word	0x40020800
 8002e44:	40020c00 	.word	0x40020c00
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40013c00 	.word	0x40013c00

08002e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b085      	sub	sp, #20
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	460b      	mov	r3, r1
 8002e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691a      	ldr	r2, [r3, #16]
 8002e60:	887b      	ldrh	r3, [r7, #2]
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d002      	beq.n	8002e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e68:	2301      	movs	r3, #1
 8002e6a:	73fb      	strb	r3, [r7, #15]
 8002e6c:	e001      	b.n	8002e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3714      	adds	r7, #20
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e90:	787b      	ldrb	r3, [r7, #1]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e96:	887a      	ldrh	r2, [r7, #2]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002e9c:	e003      	b.n	8002ea6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002e9e:	887b      	ldrh	r3, [r7, #2]
 8002ea0:	041a      	lsls	r2, r3, #16
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	619a      	str	r2, [r3, #24]
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d101      	bne.n	8002ec6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ec2:	2301      	movs	r3, #1
 8002ec4:	e12b      	b.n	800311e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d106      	bne.n	8002ee0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7fe fee0 	bl	8001ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2224      	movs	r2, #36	; 0x24
 8002ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002f18:	f001 f8f0 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 8002f1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	4a81      	ldr	r2, [pc, #516]	; (8003128 <HAL_I2C_Init+0x274>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d807      	bhi.n	8002f38 <HAL_I2C_Init+0x84>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	4a80      	ldr	r2, [pc, #512]	; (800312c <HAL_I2C_Init+0x278>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	bf94      	ite	ls
 8002f30:	2301      	movls	r3, #1
 8002f32:	2300      	movhi	r3, #0
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	e006      	b.n	8002f46 <HAL_I2C_Init+0x92>
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4a7d      	ldr	r2, [pc, #500]	; (8003130 <HAL_I2C_Init+0x27c>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	bf94      	ite	ls
 8002f40:	2301      	movls	r3, #1
 8002f42:	2300      	movhi	r3, #0
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d001      	beq.n	8002f4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e0e7      	b.n	800311e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	4a78      	ldr	r2, [pc, #480]	; (8003134 <HAL_I2C_Init+0x280>)
 8002f52:	fba2 2303 	umull	r2, r3, r2, r3
 8002f56:	0c9b      	lsrs	r3, r3, #18
 8002f58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68ba      	ldr	r2, [r7, #8]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	4a6a      	ldr	r2, [pc, #424]	; (8003128 <HAL_I2C_Init+0x274>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d802      	bhi.n	8002f88 <HAL_I2C_Init+0xd4>
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	3301      	adds	r3, #1
 8002f86:	e009      	b.n	8002f9c <HAL_I2C_Init+0xe8>
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002f8e:	fb02 f303 	mul.w	r3, r2, r3
 8002f92:	4a69      	ldr	r2, [pc, #420]	; (8003138 <HAL_I2C_Init+0x284>)
 8002f94:	fba2 2303 	umull	r2, r3, r2, r3
 8002f98:	099b      	lsrs	r3, r3, #6
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	6812      	ldr	r2, [r2, #0]
 8002fa0:	430b      	orrs	r3, r1
 8002fa2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	69db      	ldr	r3, [r3, #28]
 8002faa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002fae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	495c      	ldr	r1, [pc, #368]	; (8003128 <HAL_I2C_Init+0x274>)
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d819      	bhi.n	8002ff0 <HAL_I2C_Init+0x13c>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	1e59      	subs	r1, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fca:	1c59      	adds	r1, r3, #1
 8002fcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002fd0:	400b      	ands	r3, r1
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00a      	beq.n	8002fec <HAL_I2C_Init+0x138>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	1e59      	subs	r1, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	005b      	lsls	r3, r3, #1
 8002fe0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fea:	e051      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8002fec:	2304      	movs	r3, #4
 8002fee:	e04f      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d111      	bne.n	800301c <HAL_I2C_Init+0x168>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1e58      	subs	r0, r3, #1
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6859      	ldr	r1, [r3, #4]
 8003000:	460b      	mov	r3, r1
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	440b      	add	r3, r1
 8003006:	fbb0 f3f3 	udiv	r3, r0, r3
 800300a:	3301      	adds	r3, #1
 800300c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003010:	2b00      	cmp	r3, #0
 8003012:	bf0c      	ite	eq
 8003014:	2301      	moveq	r3, #1
 8003016:	2300      	movne	r3, #0
 8003018:	b2db      	uxtb	r3, r3
 800301a:	e012      	b.n	8003042 <HAL_I2C_Init+0x18e>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1e58      	subs	r0, r3, #1
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6859      	ldr	r1, [r3, #4]
 8003024:	460b      	mov	r3, r1
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	0099      	lsls	r1, r3, #2
 800302c:	440b      	add	r3, r1
 800302e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003032:	3301      	adds	r3, #1
 8003034:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x196>
 8003046:	2301      	movs	r3, #1
 8003048:	e022      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10e      	bne.n	8003070 <HAL_I2C_Init+0x1bc>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	1e58      	subs	r0, r3, #1
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	460b      	mov	r3, r1
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	440b      	add	r3, r1
 8003060:	fbb0 f3f3 	udiv	r3, r0, r3
 8003064:	3301      	adds	r3, #1
 8003066:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800306a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800306e:	e00f      	b.n	8003090 <HAL_I2C_Init+0x1dc>
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	1e58      	subs	r0, r3, #1
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6859      	ldr	r1, [r3, #4]
 8003078:	460b      	mov	r3, r1
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	440b      	add	r3, r1
 800307e:	0099      	lsls	r1, r3, #2
 8003080:	440b      	add	r3, r1
 8003082:	fbb0 f3f3 	udiv	r3, r0, r3
 8003086:	3301      	adds	r3, #1
 8003088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800308c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	6809      	ldr	r1, [r1, #0]
 8003094:	4313      	orrs	r3, r2
 8003096:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	69da      	ldr	r2, [r3, #28]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80030be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80030c2:	687a      	ldr	r2, [r7, #4]
 80030c4:	6911      	ldr	r1, [r2, #16]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	4311      	orrs	r1, r2
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6812      	ldr	r2, [r2, #0]
 80030d0:	430b      	orrs	r3, r1
 80030d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	699b      	ldr	r3, [r3, #24]
 80030e6:	431a      	orrs	r2, r3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	430a      	orrs	r2, r1
 80030ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f042 0201 	orr.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2200      	movs	r2, #0
 8003104:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2220      	movs	r2, #32
 800310a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800311c:	2300      	movs	r3, #0
}
 800311e:	4618      	mov	r0, r3
 8003120:	3710      	adds	r7, #16
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	000186a0 	.word	0x000186a0
 800312c:	001e847f 	.word	0x001e847f
 8003130:	003d08ff 	.word	0x003d08ff
 8003134:	431bde83 	.word	0x431bde83
 8003138:	10624dd3 	.word	0x10624dd3

0800313c <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b08a      	sub	sp, #40	; 0x28
 8003140:	af02      	add	r7, sp, #8
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	603b      	str	r3, [r7, #0]
 8003148:	4613      	mov	r3, r2
 800314a:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800314c:	f7ff f83c 	bl	80021c8 <HAL_GetTick>
 8003150:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b20      	cmp	r3, #32
 800315c:	f040 80fb 	bne.w	8003356 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d002      	beq.n	800316c <HAL_I2C_Slave_Transmit+0x30>
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d101      	bne.n	8003170 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 800316c:	2301      	movs	r3, #1
 800316e:	e0f3      	b.n	8003358 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003176:	2b01      	cmp	r3, #1
 8003178:	d101      	bne.n	800317e <HAL_I2C_Slave_Transmit+0x42>
 800317a:	2302      	movs	r3, #2
 800317c:	e0ec      	b.n	8003358 <HAL_I2C_Slave_Transmit+0x21c>
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2201      	movs	r2, #1
 8003182:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0301 	and.w	r3, r3, #1
 8003190:	2b01      	cmp	r3, #1
 8003192:	d007      	beq.n	80031a4 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031b2:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2221      	movs	r2, #33	; 0x21
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2220      	movs	r2, #32
 80031c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	88fa      	ldrh	r2, [r7, #6]
 80031d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031da:	b29a      	uxth	r2, r3
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	4a5f      	ldr	r2, [pc, #380]	; (8003360 <HAL_I2C_Slave_Transmit+0x224>)
 80031e4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80031f4:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	9300      	str	r3, [sp, #0]
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2200      	movs	r2, #0
 80031fe:	4959      	ldr	r1, [pc, #356]	; (8003364 <HAL_I2C_Slave_Transmit+0x228>)
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f9bb 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d001      	beq.n	8003210 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e0a3      	b.n	8003358 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003210:	2300      	movs	r3, #0
 8003212:	61bb      	str	r3, [r7, #24]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	61bb      	str	r3, [r7, #24]
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	61bb      	str	r3, [r7, #24]
 8003224:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800322e:	d165      	bne.n	80032fc <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	9300      	str	r3, [sp, #0]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	2200      	movs	r2, #0
 8003238:	494a      	ldr	r1, [pc, #296]	; (8003364 <HAL_I2C_Slave_Transmit+0x228>)
 800323a:	68f8      	ldr	r0, [r7, #12]
 800323c:	f000 f99e 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 8003240:	4603      	mov	r3, r0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d001      	beq.n	800324a <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e086      	b.n	8003358 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800324a:	2300      	movs	r3, #0
 800324c:	617b      	str	r3, [r7, #20]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	617b      	str	r3, [r7, #20]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	617b      	str	r3, [r7, #20]
 800325e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003260:	e04c      	b.n	80032fc <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003262:	69fa      	ldr	r2, [r7, #28]
 8003264:	6839      	ldr	r1, [r7, #0]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 f9df 	bl	800362a <I2C_WaitOnTXEFlagUntilTimeout>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d009      	beq.n	8003286 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003280:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e068      	b.n	8003358 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	781a      	ldrb	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	3b01      	subs	r3, #1
 80032a4:	b29a      	uxth	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29a      	uxth	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	695b      	ldr	r3, [r3, #20]
 80032bc:	f003 0304 	and.w	r3, r3, #4
 80032c0:	2b04      	cmp	r3, #4
 80032c2:	d11b      	bne.n	80032fc <HAL_I2C_Slave_Transmit+0x1c0>
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d017      	beq.n	80032fc <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	781a      	ldrb	r2, [r3, #0]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032dc:	1c5a      	adds	r2, r3, #1
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032e6:	b29b      	uxth	r3, r3
 80032e8:	3b01      	subs	r3, #1
 80032ea:	b29a      	uxth	r2, r3
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1ae      	bne.n	8003262 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8003304:	69fb      	ldr	r3, [r7, #28]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	2200      	movs	r2, #0
 800330c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f933 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e01b      	b.n	8003358 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003328:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003338:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	e000      	b.n	8003358 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003356:	2302      	movs	r3, #2
  }
}
 8003358:	4618      	mov	r0, r3
 800335a:	3720      	adds	r7, #32
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}
 8003360:	ffff0000 	.word	0xffff0000
 8003364:	00010002 	.word	0x00010002

08003368 <HAL_I2C_Slave_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af02      	add	r7, sp, #8
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	603b      	str	r3, [r7, #0]
 8003374:	4613      	mov	r3, r2
 8003376:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003378:	f7fe ff26 	bl	80021c8 <HAL_GetTick>
 800337c:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b20      	cmp	r3, #32
 8003388:	f040 80ee 	bne.w	8003568 <HAL_I2C_Slave_Receive+0x200>
  {
    if ((pData == NULL) || (Size == (uint16_t)0))
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d002      	beq.n	8003398 <HAL_I2C_Slave_Receive+0x30>
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d101      	bne.n	800339c <HAL_I2C_Slave_Receive+0x34>
    {
      return HAL_ERROR;
 8003398:	2301      	movs	r3, #1
 800339a:	e0e6      	b.n	800356a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d101      	bne.n	80033aa <HAL_I2C_Slave_Receive+0x42>
 80033a6:	2302      	movs	r3, #2
 80033a8:	e0df      	b.n	800356a <HAL_I2C_Slave_Receive+0x202>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d007      	beq.n	80033d0 <HAL_I2C_Slave_Receive+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0201 	orr.w	r2, r2, #1
 80033ce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033de:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2222      	movs	r2, #34	; 0x22
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2220      	movs	r2, #32
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	2200      	movs	r2, #0
 80033f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	68ba      	ldr	r2, [r7, #8]
 80033fa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	88fa      	ldrh	r2, [r7, #6]
 8003400:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4a59      	ldr	r2, [pc, #356]	; (8003574 <HAL_I2C_Slave_Receive+0x20c>)
 8003410:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003420:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	9300      	str	r3, [sp, #0]
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2200      	movs	r2, #0
 800342a:	4953      	ldr	r1, [pc, #332]	; (8003578 <HAL_I2C_Slave_Receive+0x210>)
 800342c:	68f8      	ldr	r0, [r7, #12]
 800342e:	f000 f8a5 	bl	800357c <I2C_WaitOnFlagUntilTimeout>
 8003432:	4603      	mov	r3, r0
 8003434:	2b00      	cmp	r3, #0
 8003436:	d001      	beq.n	800343c <HAL_I2C_Slave_Receive+0xd4>
    {
      return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e096      	b.n	800356a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800343c:	2300      	movs	r3, #0
 800343e:	61bb      	str	r3, [r7, #24]
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	61bb      	str	r3, [r7, #24]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699b      	ldr	r3, [r3, #24]
 800344e:	61bb      	str	r3, [r7, #24]
 8003450:	69bb      	ldr	r3, [r7, #24]

    while (hi2c->XferSize > 0U)
 8003452:	e04e      	b.n	80034f2 <HAL_I2C_Slave_Receive+0x18a>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003454:	69fa      	ldr	r2, [r7, #28]
 8003456:	6839      	ldr	r1, [r7, #0]
 8003458:	68f8      	ldr	r0, [r7, #12]
 800345a:	f000 f964 	bl	8003726 <I2C_WaitOnRXNEFlagUntilTimeout>
 800345e:	4603      	mov	r3, r0
 8003460:	2b00      	cmp	r3, #0
 8003462:	d009      	beq.n	8003478 <HAL_I2C_Slave_Receive+0x110>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003472:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e078      	b.n	800356a <HAL_I2C_Slave_Receive+0x202>
      }

      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	691a      	ldr	r2, [r3, #16]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003482:	b2d2      	uxtb	r2, r2
 8003484:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	3b01      	subs	r3, #1
 80034a4:	b29a      	uxth	r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	f003 0304 	and.w	r3, r3, #4
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d11c      	bne.n	80034f2 <HAL_I2C_Slave_Receive+0x18a>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d018      	beq.n	80034f2 <HAL_I2C_Slave_Receive+0x18a>
      {
        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d1ac      	bne.n	8003454 <HAL_I2C_Slave_Receive+0xec>
      }
    }

    /* Wait until STOP flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034fa:	69fa      	ldr	r2, [r7, #28]
 80034fc:	6839      	ldr	r1, [r7, #0]
 80034fe:	68f8      	ldr	r0, [r7, #12]
 8003500:	f000 f8d4 	bl	80036ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8003504:	4603      	mov	r3, r0
 8003506:	2b00      	cmp	r3, #0
 8003508:	d009      	beq.n	800351e <HAL_I2C_Slave_Receive+0x1b6>
    {
      /* Disable Address Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003518:	601a      	str	r2, [r3, #0]

      return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e025      	b.n	800356a <HAL_I2C_Slave_Receive+0x202>
    }

    /* Clear STOP flag */
    __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800351e:	2300      	movs	r3, #0
 8003520:	617b      	str	r3, [r7, #20]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	695b      	ldr	r3, [r3, #20]
 8003528:	617b      	str	r3, [r7, #20]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f042 0201 	orr.w	r2, r2, #1
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	697b      	ldr	r3, [r7, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800354a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	2200      	movs	r2, #0
 8003560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003564:	2300      	movs	r3, #0
 8003566:	e000      	b.n	800356a <HAL_I2C_Slave_Receive+0x202>
  }
  else
  {
    return HAL_BUSY;
 8003568:	2302      	movs	r3, #2
  }
}
 800356a:	4618      	mov	r0, r3
 800356c:	3720      	adds	r7, #32
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	ffff0000 	.word	0xffff0000
 8003578:	00010002 	.word	0x00010002

0800357c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b084      	sub	sp, #16
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	4613      	mov	r3, r2
 800358a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800358c:	e025      	b.n	80035da <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d021      	beq.n	80035da <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fe fe17 	bl	80021c8 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	69bb      	ldr	r3, [r7, #24]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	683a      	ldr	r2, [r7, #0]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnFlagUntilTimeout+0x30>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d116      	bne.n	80035da <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f043 0220 	orr.w	r2, r3, #32
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2200      	movs	r2, #0
 80035d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e023      	b.n	8003622 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	0c1b      	lsrs	r3, r3, #16
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10d      	bne.n	8003600 <I2C_WaitOnFlagUntilTimeout+0x84>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	43da      	mvns	r2, r3
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4013      	ands	r3, r2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	bf0c      	ite	eq
 80035f6:	2301      	moveq	r3, #1
 80035f8:	2300      	movne	r3, #0
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	461a      	mov	r2, r3
 80035fe:	e00c      	b.n	800361a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	43da      	mvns	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	b29b      	uxth	r3, r3
 800360e:	2b00      	cmp	r3, #0
 8003610:	bf0c      	ite	eq
 8003612:	2301      	moveq	r3, #1
 8003614:	2300      	movne	r3, #0
 8003616:	b2db      	uxtb	r3, r3
 8003618:	461a      	mov	r2, r3
 800361a:	79fb      	ldrb	r3, [r7, #7]
 800361c:	429a      	cmp	r2, r3
 800361e:	d0b6      	beq.n	800358e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b084      	sub	sp, #16
 800362e:	af00      	add	r7, sp, #0
 8003630:	60f8      	str	r0, [r7, #12]
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003636:	e02d      	b.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003638:	68f8      	ldr	r0, [r7, #12]
 800363a:	f000 f8ca 	bl	80037d2 <I2C_IsAcknowledgeFailed>
 800363e:	4603      	mov	r3, r0
 8003640:	2b00      	cmp	r3, #0
 8003642:	d001      	beq.n	8003648 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e02d      	b.n	80036a4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d021      	beq.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003650:	f7fe fdba 	bl	80021c8 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	429a      	cmp	r2, r3
 800365e:	d302      	bcc.n	8003666 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003660:	68bb      	ldr	r3, [r7, #8]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	2200      	movs	r2, #0
 800366a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2220      	movs	r2, #32
 8003670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	f043 0220 	orr.w	r2, r3, #32
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e007      	b.n	80036a4 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b80      	cmp	r3, #128	; 0x80
 80036a0:	d1ca      	bne.n	8003638 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}

080036ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036b8:	e029      	b.n	800370e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ba:	68f8      	ldr	r0, [r7, #12]
 80036bc:	f000 f889 	bl	80037d2 <I2C_IsAcknowledgeFailed>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <I2C_WaitOnSTOPFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e029      	b.n	800371e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ca:	f7fe fd7d 	bl	80021c8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	68ba      	ldr	r2, [r7, #8]
 80036d6:	429a      	cmp	r2, r3
 80036d8:	d302      	bcc.n	80036e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x34>
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d116      	bne.n	800370e <I2C_WaitOnSTOPFlagUntilTimeout+0x62>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	f043 0220 	orr.w	r2, r3, #32
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e007      	b.n	800371e <I2C_WaitOnSTOPFlagUntilTimeout+0x72>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	695b      	ldr	r3, [r3, #20]
 8003714:	f003 0310 	and.w	r3, r3, #16
 8003718:	2b10      	cmp	r3, #16
 800371a:	d1ce      	bne.n	80036ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3710      	adds	r7, #16
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b084      	sub	sp, #16
 800372a:	af00      	add	r7, sp, #0
 800372c:	60f8      	str	r0, [r7, #12]
 800372e:	60b9      	str	r1, [r7, #8]
 8003730:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003732:	e042      	b.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d119      	bne.n	8003776 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f06f 0210 	mvn.w	r2, #16
 800374a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e029      	b.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003776:	f7fe fd27 	bl	80021c8 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	68ba      	ldr	r2, [r7, #8]
 8003782:	429a      	cmp	r2, r3
 8003784:	d302      	bcc.n	800378c <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d116      	bne.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	2200      	movs	r2, #0
 8003790:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	f043 0220 	orr.w	r2, r3, #32
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e007      	b.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c4:	2b40      	cmp	r3, #64	; 0x40
 80037c6:	d1b5      	bne.n	8003734 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80037d2:	b480      	push	{r7}
 80037d4:	b083      	sub	sp, #12
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037e8:	d11b      	bne.n	8003822 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2220      	movs	r2, #32
 80037fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f043 0204 	orr.w	r2, r3, #4
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e25e      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	2b00      	cmp	r3, #0
 800384c:	d075      	beq.n	800393a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800384e:	4b88      	ldr	r3, [pc, #544]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	f003 030c 	and.w	r3, r3, #12
 8003856:	2b04      	cmp	r3, #4
 8003858:	d00c      	beq.n	8003874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800385a:	4b85      	ldr	r3, [pc, #532]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003862:	2b08      	cmp	r3, #8
 8003864:	d112      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003866:	4b82      	ldr	r3, [pc, #520]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800386e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003872:	d10b      	bne.n	800388c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003874:	4b7e      	ldr	r3, [pc, #504]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800387c:	2b00      	cmp	r3, #0
 800387e:	d05b      	beq.n	8003938 <HAL_RCC_OscConfig+0x108>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d157      	bne.n	8003938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e239      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003894:	d106      	bne.n	80038a4 <HAL_RCC_OscConfig+0x74>
 8003896:	4b76      	ldr	r3, [pc, #472]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a75      	ldr	r2, [pc, #468]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 800389c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038a0:	6013      	str	r3, [r2, #0]
 80038a2:	e01d      	b.n	80038e0 <HAL_RCC_OscConfig+0xb0>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x98>
 80038ae:	4b70      	ldr	r3, [pc, #448]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a6f      	ldr	r2, [pc, #444]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038b8:	6013      	str	r3, [r2, #0]
 80038ba:	4b6d      	ldr	r3, [pc, #436]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a6c      	ldr	r2, [pc, #432]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	6013      	str	r3, [r2, #0]
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0xb0>
 80038c8:	4b69      	ldr	r3, [pc, #420]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a68      	ldr	r2, [pc, #416]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d2:	6013      	str	r3, [r2, #0]
 80038d4:	4b66      	ldr	r3, [pc, #408]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a65      	ldr	r2, [pc, #404]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80038da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d013      	beq.n	8003910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e8:	f7fe fc6e 	bl	80021c8 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ee:	e008      	b.n	8003902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038f0:	f7fe fc6a 	bl	80021c8 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	2b64      	cmp	r3, #100	; 0x64
 80038fc:	d901      	bls.n	8003902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	e1fe      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003902:	4b5b      	ldr	r3, [pc, #364]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d0f0      	beq.n	80038f0 <HAL_RCC_OscConfig+0xc0>
 800390e:	e014      	b.n	800393a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003910:	f7fe fc5a 	bl	80021c8 <HAL_GetTick>
 8003914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003916:	e008      	b.n	800392a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003918:	f7fe fc56 	bl	80021c8 <HAL_GetTick>
 800391c:	4602      	mov	r2, r0
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	1ad3      	subs	r3, r2, r3
 8003922:	2b64      	cmp	r3, #100	; 0x64
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e1ea      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800392a:	4b51      	ldr	r3, [pc, #324]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d1f0      	bne.n	8003918 <HAL_RCC_OscConfig+0xe8>
 8003936:	e000      	b.n	800393a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d063      	beq.n	8003a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003946:	4b4a      	ldr	r3, [pc, #296]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00b      	beq.n	800396a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800395a:	2b08      	cmp	r3, #8
 800395c:	d11c      	bne.n	8003998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800395e:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d116      	bne.n	8003998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800396a:	4b41      	ldr	r3, [pc, #260]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f003 0302 	and.w	r3, r3, #2
 8003972:	2b00      	cmp	r3, #0
 8003974:	d005      	beq.n	8003982 <HAL_RCC_OscConfig+0x152>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	2b01      	cmp	r3, #1
 800397c:	d001      	beq.n	8003982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e1be      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003982:	4b3b      	ldr	r3, [pc, #236]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	691b      	ldr	r3, [r3, #16]
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	4937      	ldr	r1, [pc, #220]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003992:	4313      	orrs	r3, r2
 8003994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003996:	e03a      	b.n	8003a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d020      	beq.n	80039e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039a0:	4b34      	ldr	r3, [pc, #208]	; (8003a74 <HAL_RCC_OscConfig+0x244>)
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039a6:	f7fe fc0f 	bl	80021c8 <HAL_GetTick>
 80039aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ac:	e008      	b.n	80039c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039ae:	f7fe fc0b 	bl	80021c8 <HAL_GetTick>
 80039b2:	4602      	mov	r2, r0
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	1ad3      	subs	r3, r2, r3
 80039b8:	2b02      	cmp	r3, #2
 80039ba:	d901      	bls.n	80039c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80039bc:	2303      	movs	r3, #3
 80039be:	e19f      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039c0:	4b2b      	ldr	r3, [pc, #172]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0302 	and.w	r3, r3, #2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d0f0      	beq.n	80039ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	00db      	lsls	r3, r3, #3
 80039da:	4925      	ldr	r1, [pc, #148]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	600b      	str	r3, [r1, #0]
 80039e0:	e015      	b.n	8003a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80039e2:	4b24      	ldr	r3, [pc, #144]	; (8003a74 <HAL_RCC_OscConfig+0x244>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e8:	f7fe fbee 	bl	80021c8 <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80039f0:	f7fe fbea 	bl	80021c8 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e17e      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a02:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1f0      	bne.n	80039f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0308 	and.w	r3, r3, #8
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d036      	beq.n	8003a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	695b      	ldr	r3, [r3, #20]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d016      	beq.n	8003a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a22:	4b15      	ldr	r3, [pc, #84]	; (8003a78 <HAL_RCC_OscConfig+0x248>)
 8003a24:	2201      	movs	r2, #1
 8003a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a28:	f7fe fbce 	bl	80021c8 <HAL_GetTick>
 8003a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a2e:	e008      	b.n	8003a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a30:	f7fe fbca 	bl	80021c8 <HAL_GetTick>
 8003a34:	4602      	mov	r2, r0
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	1ad3      	subs	r3, r2, r3
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d901      	bls.n	8003a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e15e      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a42:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <HAL_RCC_OscConfig+0x240>)
 8003a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a46:	f003 0302 	and.w	r3, r3, #2
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0f0      	beq.n	8003a30 <HAL_RCC_OscConfig+0x200>
 8003a4e:	e01b      	b.n	8003a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003a50:	4b09      	ldr	r3, [pc, #36]	; (8003a78 <HAL_RCC_OscConfig+0x248>)
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a56:	f7fe fbb7 	bl	80021c8 <HAL_GetTick>
 8003a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a5c:	e00e      	b.n	8003a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003a5e:	f7fe fbb3 	bl	80021c8 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d907      	bls.n	8003a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a6c:	2303      	movs	r3, #3
 8003a6e:	e147      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
 8003a70:	40023800 	.word	0x40023800
 8003a74:	42470000 	.word	0x42470000
 8003a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a7c:	4b88      	ldr	r3, [pc, #544]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d1ea      	bne.n	8003a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	f000 8097 	beq.w	8003bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a96:	2300      	movs	r3, #0
 8003a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a9a:	4b81      	ldr	r3, [pc, #516]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10f      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	60bb      	str	r3, [r7, #8]
 8003aaa:	4b7d      	ldr	r3, [pc, #500]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aae:	4a7c      	ldr	r2, [pc, #496]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ab6:	4b7a      	ldr	r3, [pc, #488]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ac6:	4b77      	ldr	r3, [pc, #476]	; (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d118      	bne.n	8003b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ad2:	4b74      	ldr	r3, [pc, #464]	; (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a73      	ldr	r2, [pc, #460]	; (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ade:	f7fe fb73 	bl	80021c8 <HAL_GetTick>
 8003ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ae4:	e008      	b.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ae6:	f7fe fb6f 	bl	80021c8 <HAL_GetTick>
 8003aea:	4602      	mov	r2, r0
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d901      	bls.n	8003af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003af4:	2303      	movs	r3, #3
 8003af6:	e103      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003af8:	4b6a      	ldr	r3, [pc, #424]	; (8003ca4 <HAL_RCC_OscConfig+0x474>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d0f0      	beq.n	8003ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	2b01      	cmp	r3, #1
 8003b0a:	d106      	bne.n	8003b1a <HAL_RCC_OscConfig+0x2ea>
 8003b0c:	4b64      	ldr	r3, [pc, #400]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b10:	4a63      	ldr	r2, [pc, #396]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6713      	str	r3, [r2, #112]	; 0x70
 8003b18:	e01c      	b.n	8003b54 <HAL_RCC_OscConfig+0x324>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b05      	cmp	r3, #5
 8003b20:	d10c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x30c>
 8003b22:	4b5f      	ldr	r3, [pc, #380]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b26:	4a5e      	ldr	r2, [pc, #376]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b28:	f043 0304 	orr.w	r3, r3, #4
 8003b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8003b2e:	4b5c      	ldr	r3, [pc, #368]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b32:	4a5b      	ldr	r2, [pc, #364]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b34:	f043 0301 	orr.w	r3, r3, #1
 8003b38:	6713      	str	r3, [r2, #112]	; 0x70
 8003b3a:	e00b      	b.n	8003b54 <HAL_RCC_OscConfig+0x324>
 8003b3c:	4b58      	ldr	r3, [pc, #352]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b40:	4a57      	ldr	r2, [pc, #348]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	6713      	str	r3, [r2, #112]	; 0x70
 8003b48:	4b55      	ldr	r3, [pc, #340]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b4c:	4a54      	ldr	r2, [pc, #336]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b4e:	f023 0304 	bic.w	r3, r3, #4
 8003b52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d015      	beq.n	8003b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b5c:	f7fe fb34 	bl	80021c8 <HAL_GetTick>
 8003b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b62:	e00a      	b.n	8003b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b64:	f7fe fb30 	bl	80021c8 <HAL_GetTick>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	1ad3      	subs	r3, r2, r3
 8003b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d901      	bls.n	8003b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b76:	2303      	movs	r3, #3
 8003b78:	e0c2      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b7a:	4b49      	ldr	r3, [pc, #292]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0ee      	beq.n	8003b64 <HAL_RCC_OscConfig+0x334>
 8003b86:	e014      	b.n	8003bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b88:	f7fe fb1e 	bl	80021c8 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b8e:	e00a      	b.n	8003ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b90:	f7fe fb1a 	bl	80021c8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e0ac      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ba6:	4b3e      	ldr	r3, [pc, #248]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1ee      	bne.n	8003b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003bb2:	7dfb      	ldrb	r3, [r7, #23]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d105      	bne.n	8003bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003bb8:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	4a38      	ldr	r2, [pc, #224]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003bc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8098 	beq.w	8003cfe <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003bce:	4b34      	ldr	r3, [pc, #208]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 030c 	and.w	r3, r3, #12
 8003bd6:	2b08      	cmp	r3, #8
 8003bd8:	d05c      	beq.n	8003c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	699b      	ldr	r3, [r3, #24]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d141      	bne.n	8003c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003be2:	4b31      	ldr	r3, [pc, #196]	; (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003be8:	f7fe faee 	bl	80021c8 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bf0:	f7fe faea 	bl	80021c8 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e07e      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c02:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d1f0      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	69da      	ldr	r2, [r3, #28]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	019b      	lsls	r3, r3, #6
 8003c1e:	431a      	orrs	r2, r3
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c24:	085b      	lsrs	r3, r3, #1
 8003c26:	3b01      	subs	r3, #1
 8003c28:	041b      	lsls	r3, r3, #16
 8003c2a:	431a      	orrs	r2, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	491b      	ldr	r1, [pc, #108]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c34:	4313      	orrs	r3, r2
 8003c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003c38:	4b1b      	ldr	r3, [pc, #108]	; (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c3e:	f7fe fac3 	bl	80021c8 <HAL_GetTick>
 8003c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c44:	e008      	b.n	8003c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c46:	f7fe fabf 	bl	80021c8 <HAL_GetTick>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	2b02      	cmp	r3, #2
 8003c52:	d901      	bls.n	8003c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c54:	2303      	movs	r3, #3
 8003c56:	e053      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d0f0      	beq.n	8003c46 <HAL_RCC_OscConfig+0x416>
 8003c64:	e04b      	b.n	8003cfe <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c66:	4b10      	ldr	r3, [pc, #64]	; (8003ca8 <HAL_RCC_OscConfig+0x478>)
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fe faac 	bl	80021c8 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c74:	f7fe faa8 	bl	80021c8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e03c      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <HAL_RCC_OscConfig+0x470>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1f0      	bne.n	8003c74 <HAL_RCC_OscConfig+0x444>
 8003c92:	e034      	b.n	8003cfe <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d107      	bne.n	8003cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e02f      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
 8003ca0:	40023800 	.word	0x40023800
 8003ca4:	40007000 	.word	0x40007000
 8003ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <HAL_RCC_OscConfig+0x4d8>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	69db      	ldr	r3, [r3, #28]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d11c      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d115      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10d      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d106      	bne.n	8003cfa <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d001      	beq.n	8003cfe <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003cfe:	2300      	movs	r3, #0
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3718      	adds	r7, #24
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	40023800 	.word	0x40023800

08003d0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e0cc      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d20:	4b68      	ldr	r3, [pc, #416]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 030f 	and.w	r3, r3, #15
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d90c      	bls.n	8003d48 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d2e:	4b65      	ldr	r3, [pc, #404]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d30:	683a      	ldr	r2, [r7, #0]
 8003d32:	b2d2      	uxtb	r2, r2
 8003d34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d36:	4b63      	ldr	r3, [pc, #396]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	683a      	ldr	r2, [r7, #0]
 8003d40:	429a      	cmp	r2, r3
 8003d42:	d001      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	e0b8      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f003 0302 	and.w	r3, r3, #2
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d020      	beq.n	8003d96 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f003 0304 	and.w	r3, r3, #4
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d005      	beq.n	8003d6c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d60:	4b59      	ldr	r3, [pc, #356]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	4a58      	ldr	r2, [pc, #352]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d6a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0308 	and.w	r3, r3, #8
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d005      	beq.n	8003d84 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d78:	4b53      	ldr	r3, [pc, #332]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	4a52      	ldr	r2, [pc, #328]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d7e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d82:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d84:	4b50      	ldr	r3, [pc, #320]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	494d      	ldr	r1, [pc, #308]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d044      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	685b      	ldr	r3, [r3, #4]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d107      	bne.n	8003dba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003daa:	4b47      	ldr	r3, [pc, #284]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d119      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e07f      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d107      	bne.n	8003dda <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dca:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d109      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e06f      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dda:	4b3b      	ldr	r3, [pc, #236]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e067      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dea:	4b37      	ldr	r3, [pc, #220]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f023 0203 	bic.w	r2, r3, #3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	4934      	ldr	r1, [pc, #208]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003df8:	4313      	orrs	r3, r2
 8003dfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dfc:	f7fe f9e4 	bl	80021c8 <HAL_GetTick>
 8003e00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e04:	f7fe f9e0 	bl	80021c8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e04f      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e1a:	4b2b      	ldr	r3, [pc, #172]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f003 020c 	and.w	r2, r3, #12
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d1eb      	bne.n	8003e04 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e2c:	4b25      	ldr	r3, [pc, #148]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 030f 	and.w	r3, r3, #15
 8003e34:	683a      	ldr	r2, [r7, #0]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d20c      	bcs.n	8003e54 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e3a:	4b22      	ldr	r3, [pc, #136]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e3c:	683a      	ldr	r2, [r7, #0]
 8003e3e:	b2d2      	uxtb	r2, r2
 8003e40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	4b20      	ldr	r3, [pc, #128]	; (8003ec4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f003 030f 	and.w	r3, r3, #15
 8003e4a:	683a      	ldr	r2, [r7, #0]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d001      	beq.n	8003e54 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e032      	b.n	8003eba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0304 	and.w	r3, r3, #4
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d008      	beq.n	8003e72 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e60:	4b19      	ldr	r3, [pc, #100]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4916      	ldr	r1, [pc, #88]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0308 	and.w	r3, r3, #8
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d009      	beq.n	8003e92 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e7e:	4b12      	ldr	r3, [pc, #72]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	691b      	ldr	r3, [r3, #16]
 8003e8a:	00db      	lsls	r3, r3, #3
 8003e8c:	490e      	ldr	r1, [pc, #56]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e92:	f000 f821 	bl	8003ed8 <HAL_RCC_GetSysClockFreq>
 8003e96:	4602      	mov	r2, r0
 8003e98:	4b0b      	ldr	r3, [pc, #44]	; (8003ec8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	091b      	lsrs	r3, r3, #4
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	490a      	ldr	r1, [pc, #40]	; (8003ecc <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	5ccb      	ldrb	r3, [r1, r3]
 8003ea6:	fa22 f303 	lsr.w	r3, r2, r3
 8003eaa:	4a09      	ldr	r2, [pc, #36]	; (8003ed0 <HAL_RCC_ClockConfig+0x1c4>)
 8003eac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003eae:	4b09      	ldr	r3, [pc, #36]	; (8003ed4 <HAL_RCC_ClockConfig+0x1c8>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe f944 	bl	8002140 <HAL_InitTick>

  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40023c00 	.word	0x40023c00
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	08008800 	.word	0x08008800
 8003ed0:	20000000 	.word	0x20000000
 8003ed4:	20000004 	.word	0x20000004

08003ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ed8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003edc:	b094      	sub	sp, #80	; 0x50
 8003ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee8:	2300      	movs	r3, #0
 8003eea:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003eec:	2300      	movs	r3, #0
 8003eee:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ef0:	4b79      	ldr	r3, [pc, #484]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 030c 	and.w	r3, r3, #12
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d00d      	beq.n	8003f18 <HAL_RCC_GetSysClockFreq+0x40>
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	f200 80e1 	bhi.w	80040c4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d002      	beq.n	8003f0c <HAL_RCC_GetSysClockFreq+0x34>
 8003f06:	2b04      	cmp	r3, #4
 8003f08:	d003      	beq.n	8003f12 <HAL_RCC_GetSysClockFreq+0x3a>
 8003f0a:	e0db      	b.n	80040c4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f0c:	4b73      	ldr	r3, [pc, #460]	; (80040dc <HAL_RCC_GetSysClockFreq+0x204>)
 8003f0e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003f10:	e0db      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f12:	4b73      	ldr	r3, [pc, #460]	; (80040e0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003f14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f16:	e0d8      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f18:	4b6f      	ldr	r3, [pc, #444]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f20:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003f22:	4b6d      	ldr	r3, [pc, #436]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f24:	685b      	ldr	r3, [r3, #4]
 8003f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d063      	beq.n	8003ff6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003f2e:	4b6a      	ldr	r3, [pc, #424]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	099b      	lsrs	r3, r3, #6
 8003f34:	2200      	movs	r2, #0
 8003f36:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f38:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f40:	633b      	str	r3, [r7, #48]	; 0x30
 8003f42:	2300      	movs	r3, #0
 8003f44:	637b      	str	r3, [r7, #52]	; 0x34
 8003f46:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003f4a:	4622      	mov	r2, r4
 8003f4c:	462b      	mov	r3, r5
 8003f4e:	f04f 0000 	mov.w	r0, #0
 8003f52:	f04f 0100 	mov.w	r1, #0
 8003f56:	0159      	lsls	r1, r3, #5
 8003f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f5c:	0150      	lsls	r0, r2, #5
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4621      	mov	r1, r4
 8003f64:	1a51      	subs	r1, r2, r1
 8003f66:	6139      	str	r1, [r7, #16]
 8003f68:	4629      	mov	r1, r5
 8003f6a:	eb63 0301 	sbc.w	r3, r3, r1
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	f04f 0200 	mov.w	r2, #0
 8003f74:	f04f 0300 	mov.w	r3, #0
 8003f78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f7c:	4659      	mov	r1, fp
 8003f7e:	018b      	lsls	r3, r1, #6
 8003f80:	4651      	mov	r1, sl
 8003f82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f86:	4651      	mov	r1, sl
 8003f88:	018a      	lsls	r2, r1, #6
 8003f8a:	4651      	mov	r1, sl
 8003f8c:	ebb2 0801 	subs.w	r8, r2, r1
 8003f90:	4659      	mov	r1, fp
 8003f92:	eb63 0901 	sbc.w	r9, r3, r1
 8003f96:	f04f 0200 	mov.w	r2, #0
 8003f9a:	f04f 0300 	mov.w	r3, #0
 8003f9e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fa2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003fa6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003faa:	4690      	mov	r8, r2
 8003fac:	4699      	mov	r9, r3
 8003fae:	4623      	mov	r3, r4
 8003fb0:	eb18 0303 	adds.w	r3, r8, r3
 8003fb4:	60bb      	str	r3, [r7, #8]
 8003fb6:	462b      	mov	r3, r5
 8003fb8:	eb49 0303 	adc.w	r3, r9, r3
 8003fbc:	60fb      	str	r3, [r7, #12]
 8003fbe:	f04f 0200 	mov.w	r2, #0
 8003fc2:	f04f 0300 	mov.w	r3, #0
 8003fc6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003fca:	4629      	mov	r1, r5
 8003fcc:	024b      	lsls	r3, r1, #9
 8003fce:	4621      	mov	r1, r4
 8003fd0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	024a      	lsls	r2, r1, #9
 8003fd8:	4610      	mov	r0, r2
 8003fda:	4619      	mov	r1, r3
 8003fdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fde:	2200      	movs	r2, #0
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fe2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fe4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003fe8:	f7fc ff44 	bl	8000e74 <__aeabi_uldivmod>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ff4:	e058      	b.n	80040a8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ff6:	4b38      	ldr	r3, [pc, #224]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	099b      	lsrs	r3, r3, #6
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	4618      	mov	r0, r3
 8004000:	4611      	mov	r1, r2
 8004002:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004006:	623b      	str	r3, [r7, #32]
 8004008:	2300      	movs	r3, #0
 800400a:	627b      	str	r3, [r7, #36]	; 0x24
 800400c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004010:	4642      	mov	r2, r8
 8004012:	464b      	mov	r3, r9
 8004014:	f04f 0000 	mov.w	r0, #0
 8004018:	f04f 0100 	mov.w	r1, #0
 800401c:	0159      	lsls	r1, r3, #5
 800401e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004022:	0150      	lsls	r0, r2, #5
 8004024:	4602      	mov	r2, r0
 8004026:	460b      	mov	r3, r1
 8004028:	4641      	mov	r1, r8
 800402a:	ebb2 0a01 	subs.w	sl, r2, r1
 800402e:	4649      	mov	r1, r9
 8004030:	eb63 0b01 	sbc.w	fp, r3, r1
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004040:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004044:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004048:	ebb2 040a 	subs.w	r4, r2, sl
 800404c:	eb63 050b 	sbc.w	r5, r3, fp
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	00eb      	lsls	r3, r5, #3
 800405a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800405e:	00e2      	lsls	r2, r4, #3
 8004060:	4614      	mov	r4, r2
 8004062:	461d      	mov	r5, r3
 8004064:	4643      	mov	r3, r8
 8004066:	18e3      	adds	r3, r4, r3
 8004068:	603b      	str	r3, [r7, #0]
 800406a:	464b      	mov	r3, r9
 800406c:	eb45 0303 	adc.w	r3, r5, r3
 8004070:	607b      	str	r3, [r7, #4]
 8004072:	f04f 0200 	mov.w	r2, #0
 8004076:	f04f 0300 	mov.w	r3, #0
 800407a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800407e:	4629      	mov	r1, r5
 8004080:	028b      	lsls	r3, r1, #10
 8004082:	4621      	mov	r1, r4
 8004084:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004088:	4621      	mov	r1, r4
 800408a:	028a      	lsls	r2, r1, #10
 800408c:	4610      	mov	r0, r2
 800408e:	4619      	mov	r1, r3
 8004090:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004092:	2200      	movs	r2, #0
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	61fa      	str	r2, [r7, #28]
 8004098:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800409c:	f7fc feea 	bl	8000e74 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4613      	mov	r3, r2
 80040a6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80040a8:	4b0b      	ldr	r3, [pc, #44]	; (80040d8 <HAL_RCC_GetSysClockFreq+0x200>)
 80040aa:	685b      	ldr	r3, [r3, #4]
 80040ac:	0c1b      	lsrs	r3, r3, #16
 80040ae:	f003 0303 	and.w	r3, r3, #3
 80040b2:	3301      	adds	r3, #1
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80040b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c2:	e002      	b.n	80040ca <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4b05      	ldr	r3, [pc, #20]	; (80040dc <HAL_RCC_GetSysClockFreq+0x204>)
 80040c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80040c8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80040ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3750      	adds	r7, #80	; 0x50
 80040d0:	46bd      	mov	sp, r7
 80040d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040d6:	bf00      	nop
 80040d8:	40023800 	.word	0x40023800
 80040dc:	00f42400 	.word	0x00f42400
 80040e0:	007a1200 	.word	0x007a1200

080040e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040e4:	b480      	push	{r7}
 80040e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040e8:	4b03      	ldr	r3, [pc, #12]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80040ea:	681b      	ldr	r3, [r3, #0]
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	20000000 	.word	0x20000000

080040fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004100:	f7ff fff0 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 8004104:	4602      	mov	r2, r0
 8004106:	4b05      	ldr	r3, [pc, #20]	; (800411c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	0a9b      	lsrs	r3, r3, #10
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	4903      	ldr	r1, [pc, #12]	; (8004120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004112:	5ccb      	ldrb	r3, [r1, r3]
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004118:	4618      	mov	r0, r3
 800411a:	bd80      	pop	{r7, pc}
 800411c:	40023800 	.word	0x40023800
 8004120:	08008810 	.word	0x08008810

08004124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004128:	f7ff ffdc 	bl	80040e4 <HAL_RCC_GetHCLKFreq>
 800412c:	4602      	mov	r2, r0
 800412e:	4b05      	ldr	r3, [pc, #20]	; (8004144 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	0b5b      	lsrs	r3, r3, #13
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	4903      	ldr	r1, [pc, #12]	; (8004148 <HAL_RCC_GetPCLK2Freq+0x24>)
 800413a:	5ccb      	ldrb	r3, [r1, r3]
 800413c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004140:	4618      	mov	r0, r3
 8004142:	bd80      	pop	{r7, pc}
 8004144:	40023800 	.word	0x40023800
 8004148:	08008810 	.word	0x08008810

0800414c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e01d      	b.n	800419a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fd fddc 	bl	8001d30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f000 fa1e 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3708      	adds	r7, #8
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b085      	sub	sp, #20
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2202      	movs	r2, #2
 80041ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2b06      	cmp	r3, #6
 80041c2:	d007      	beq.n	80041d4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	681a      	ldr	r2, [r3, #0]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f042 0201 	orr.w	r2, r2, #1
 80041d2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80041dc:	2300      	movs	r3, #0
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3714      	adds	r7, #20
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b082      	sub	sp, #8
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d101      	bne.n	80041fc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e01d      	b.n	8004238 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004202:	b2db      	uxtb	r3, r3
 8004204:	2b00      	cmp	r3, #0
 8004206:	d106      	bne.n	8004216 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2200      	movs	r2, #0
 800420c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f000 f815 	bl	8004240 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2202      	movs	r2, #2
 800421a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3304      	adds	r3, #4
 8004226:	4619      	mov	r1, r3
 8004228:	4610      	mov	r0, r2
 800422a:	f000 f9cf 	bl	80045cc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004240:	b480      	push	{r7}
 8004242:	b083      	sub	sp, #12
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004248:	bf00      	nop
 800424a:	370c      	adds	r7, #12
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr

08004254 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b084      	sub	sp, #16
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
 800425c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2201      	movs	r2, #1
 8004264:	6839      	ldr	r1, [r7, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f000 fc56 	bl	8004b18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a10      	ldr	r2, [pc, #64]	; (80042b4 <HAL_TIM_PWM_Start+0x60>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d107      	bne.n	8004286 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004284:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2b06      	cmp	r3, #6
 8004296:	d007      	beq.n	80042a8 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	681a      	ldr	r2, [r3, #0]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f042 0201 	orr.w	r2, r2, #1
 80042a6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	40010000 	.word	0x40010000

080042b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60f8      	str	r0, [r7, #12]
 80042c0:	60b9      	str	r1, [r7, #8]
 80042c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d101      	bne.n	80042d2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80042ce:	2302      	movs	r3, #2
 80042d0:	e0b4      	b.n	800443c <HAL_TIM_PWM_ConfigChannel+0x184>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2202      	movs	r2, #2
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b0c      	cmp	r3, #12
 80042e6:	f200 809f 	bhi.w	8004428 <HAL_TIM_PWM_ConfigChannel+0x170>
 80042ea:	a201      	add	r2, pc, #4	; (adr r2, 80042f0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80042ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f0:	08004325 	.word	0x08004325
 80042f4:	08004429 	.word	0x08004429
 80042f8:	08004429 	.word	0x08004429
 80042fc:	08004429 	.word	0x08004429
 8004300:	08004365 	.word	0x08004365
 8004304:	08004429 	.word	0x08004429
 8004308:	08004429 	.word	0x08004429
 800430c:	08004429 	.word	0x08004429
 8004310:	080043a7 	.word	0x080043a7
 8004314:	08004429 	.word	0x08004429
 8004318:	08004429 	.word	0x08004429
 800431c:	08004429 	.word	0x08004429
 8004320:	080043e7 	.word	0x080043e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68b9      	ldr	r1, [r7, #8]
 800432a:	4618      	mov	r0, r3
 800432c:	f000 f9ce 	bl	80046cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699a      	ldr	r2, [r3, #24]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0208 	orr.w	r2, r2, #8
 800433e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0204 	bic.w	r2, r2, #4
 800434e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6999      	ldr	r1, [r3, #24]
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	691a      	ldr	r2, [r3, #16]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	430a      	orrs	r2, r1
 8004360:	619a      	str	r2, [r3, #24]
      break;
 8004362:	e062      	b.n	800442a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68b9      	ldr	r1, [r7, #8]
 800436a:	4618      	mov	r0, r3
 800436c:	f000 fa14 	bl	8004798 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	699a      	ldr	r2, [r3, #24]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800437e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699a      	ldr	r2, [r3, #24]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800438e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	6999      	ldr	r1, [r3, #24]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	021a      	lsls	r2, r3, #8
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	430a      	orrs	r2, r1
 80043a2:	619a      	str	r2, [r3, #24]
      break;
 80043a4:	e041      	b.n	800442a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fa5f 	bl	8004870 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	69da      	ldr	r2, [r3, #28]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f042 0208 	orr.w	r2, r2, #8
 80043c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	69da      	ldr	r2, [r3, #28]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0204 	bic.w	r2, r2, #4
 80043d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69d9      	ldr	r1, [r3, #28]
 80043d8:	68bb      	ldr	r3, [r7, #8]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	430a      	orrs	r2, r1
 80043e2:	61da      	str	r2, [r3, #28]
      break;
 80043e4:	e021      	b.n	800442a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	68b9      	ldr	r1, [r7, #8]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 faa9 	bl	8004944 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	69da      	ldr	r2, [r3, #28]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	69d9      	ldr	r1, [r3, #28]
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	021a      	lsls	r2, r3, #8
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	430a      	orrs	r2, r1
 8004424:	61da      	str	r2, [r3, #28]
      break;
 8004426:	e000      	b.n	800442a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004428:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2201      	movs	r2, #1
 800442e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2200      	movs	r2, #0
 8004436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800443a:	2300      	movs	r3, #0
}
 800443c:	4618      	mov	r0, r3
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIM_ConfigClockSource+0x18>
 8004458:	2302      	movs	r3, #2
 800445a:	e0b3      	b.n	80045c4 <HAL_TIM_ConfigClockSource+0x180>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800447a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004482:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004494:	d03e      	beq.n	8004514 <HAL_TIM_ConfigClockSource+0xd0>
 8004496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800449a:	f200 8087 	bhi.w	80045ac <HAL_TIM_ConfigClockSource+0x168>
 800449e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044a2:	f000 8085 	beq.w	80045b0 <HAL_TIM_ConfigClockSource+0x16c>
 80044a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044aa:	d87f      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x168>
 80044ac:	2b70      	cmp	r3, #112	; 0x70
 80044ae:	d01a      	beq.n	80044e6 <HAL_TIM_ConfigClockSource+0xa2>
 80044b0:	2b70      	cmp	r3, #112	; 0x70
 80044b2:	d87b      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x168>
 80044b4:	2b60      	cmp	r3, #96	; 0x60
 80044b6:	d050      	beq.n	800455a <HAL_TIM_ConfigClockSource+0x116>
 80044b8:	2b60      	cmp	r3, #96	; 0x60
 80044ba:	d877      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x168>
 80044bc:	2b50      	cmp	r3, #80	; 0x50
 80044be:	d03c      	beq.n	800453a <HAL_TIM_ConfigClockSource+0xf6>
 80044c0:	2b50      	cmp	r3, #80	; 0x50
 80044c2:	d873      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x168>
 80044c4:	2b40      	cmp	r3, #64	; 0x40
 80044c6:	d058      	beq.n	800457a <HAL_TIM_ConfigClockSource+0x136>
 80044c8:	2b40      	cmp	r3, #64	; 0x40
 80044ca:	d86f      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x168>
 80044cc:	2b30      	cmp	r3, #48	; 0x30
 80044ce:	d064      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x156>
 80044d0:	2b30      	cmp	r3, #48	; 0x30
 80044d2:	d86b      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x168>
 80044d4:	2b20      	cmp	r3, #32
 80044d6:	d060      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x156>
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d867      	bhi.n	80045ac <HAL_TIM_ConfigClockSource+0x168>
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d05c      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x156>
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d05a      	beq.n	800459a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80044e4:	e062      	b.n	80045ac <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6818      	ldr	r0, [r3, #0]
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	6899      	ldr	r1, [r3, #8]
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685a      	ldr	r2, [r3, #4]
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f000 faef 	bl	8004ad8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004508:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	609a      	str	r2, [r3, #8]
      break;
 8004512:	e04e      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6818      	ldr	r0, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	6899      	ldr	r1, [r3, #8]
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	f000 fad8 	bl	8004ad8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	689a      	ldr	r2, [r3, #8]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004536:	609a      	str	r2, [r3, #8]
      break;
 8004538:	e03b      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6818      	ldr	r0, [r3, #0]
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	6859      	ldr	r1, [r3, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	461a      	mov	r2, r3
 8004548:	f000 fa4c 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2150      	movs	r1, #80	; 0x50
 8004552:	4618      	mov	r0, r3
 8004554:	f000 faa5 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004558:	e02b      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6818      	ldr	r0, [r3, #0]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	6859      	ldr	r1, [r3, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	461a      	mov	r2, r3
 8004568:	f000 fa6b 	bl	8004a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2160      	movs	r1, #96	; 0x60
 8004572:	4618      	mov	r0, r3
 8004574:	f000 fa95 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004578:	e01b      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6818      	ldr	r0, [r3, #0]
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	6859      	ldr	r1, [r3, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	461a      	mov	r2, r3
 8004588:	f000 fa2c 	bl	80049e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2140      	movs	r1, #64	; 0x40
 8004592:	4618      	mov	r0, r3
 8004594:	f000 fa85 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 8004598:	e00b      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4619      	mov	r1, r3
 80045a4:	4610      	mov	r0, r2
 80045a6:	f000 fa7c 	bl	8004aa2 <TIM_ITRx_SetConfig>
      break;
 80045aa:	e002      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045ac:	bf00      	nop
 80045ae:	e000      	b.n	80045b2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80045b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045c2:	2300      	movs	r3, #0
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b085      	sub	sp, #20
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a34      	ldr	r2, [pc, #208]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00f      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ea:	d00b      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	4a31      	ldr	r2, [pc, #196]	; (80046b4 <TIM_Base_SetConfig+0xe8>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d007      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a30      	ldr	r2, [pc, #192]	; (80046b8 <TIM_Base_SetConfig+0xec>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d003      	beq.n	8004604 <TIM_Base_SetConfig+0x38>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a2f      	ldr	r2, [pc, #188]	; (80046bc <TIM_Base_SetConfig+0xf0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d108      	bne.n	8004616 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800460a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	68fa      	ldr	r2, [r7, #12]
 8004612:	4313      	orrs	r3, r2
 8004614:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a25      	ldr	r2, [pc, #148]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01b      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004624:	d017      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a22      	ldr	r2, [pc, #136]	; (80046b4 <TIM_Base_SetConfig+0xe8>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a21      	ldr	r2, [pc, #132]	; (80046b8 <TIM_Base_SetConfig+0xec>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00f      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a20      	ldr	r2, [pc, #128]	; (80046bc <TIM_Base_SetConfig+0xf0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d00b      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a1f      	ldr	r2, [pc, #124]	; (80046c0 <TIM_Base_SetConfig+0xf4>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d007      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	4a1e      	ldr	r2, [pc, #120]	; (80046c4 <TIM_Base_SetConfig+0xf8>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d003      	beq.n	8004656 <TIM_Base_SetConfig+0x8a>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <TIM_Base_SetConfig+0xfc>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d108      	bne.n	8004668 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800465c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	68db      	ldr	r3, [r3, #12]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	4a08      	ldr	r2, [pc, #32]	; (80046b0 <TIM_Base_SetConfig+0xe4>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d103      	bne.n	800469c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	691a      	ldr	r2, [r3, #16]
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	615a      	str	r2, [r3, #20]
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	40010000 	.word	0x40010000
 80046b4:	40000400 	.word	0x40000400
 80046b8:	40000800 	.word	0x40000800
 80046bc:	40000c00 	.word	0x40000c00
 80046c0:	40014000 	.word	0x40014000
 80046c4:	40014400 	.word	0x40014400
 80046c8:	40014800 	.word	0x40014800

080046cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0201 	bic.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f023 0302 	bic.w	r3, r3, #2
 8004714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	4313      	orrs	r3, r2
 800471e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	4a1c      	ldr	r2, [pc, #112]	; (8004794 <TIM_OC1_SetConfig+0xc8>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d10c      	bne.n	8004742 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	f023 0308 	bic.w	r3, r3, #8
 800472e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	4313      	orrs	r3, r2
 8004738:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	f023 0304 	bic.w	r3, r3, #4
 8004740:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <TIM_OC1_SetConfig+0xc8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d111      	bne.n	800476e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	697a      	ldr	r2, [r7, #20]
 8004786:	621a      	str	r2, [r3, #32]
}
 8004788:	bf00      	nop
 800478a:	371c      	adds	r7, #28
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40010000 	.word	0x40010000

08004798 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004798:	b480      	push	{r7}
 800479a:	b087      	sub	sp, #28
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f023 0210 	bic.w	r2, r3, #16
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	699b      	ldr	r3, [r3, #24]
 80047be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	021b      	lsls	r3, r3, #8
 80047d6:	68fa      	ldr	r2, [r7, #12]
 80047d8:	4313      	orrs	r3, r2
 80047da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f023 0320 	bic.w	r3, r3, #32
 80047e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	011b      	lsls	r3, r3, #4
 80047ea:	697a      	ldr	r2, [r7, #20]
 80047ec:	4313      	orrs	r3, r2
 80047ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	4a1e      	ldr	r2, [pc, #120]	; (800486c <TIM_OC2_SetConfig+0xd4>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d10d      	bne.n	8004814 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80047fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	011b      	lsls	r3, r3, #4
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	4313      	orrs	r3, r2
 800480a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004812:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	4a15      	ldr	r2, [pc, #84]	; (800486c <TIM_OC2_SetConfig+0xd4>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d113      	bne.n	8004844 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004822:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800482a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	695b      	ldr	r3, [r3, #20]
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	699b      	ldr	r3, [r3, #24]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	4313      	orrs	r3, r2
 8004842:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	621a      	str	r2, [r3, #32]
}
 800485e:	bf00      	nop
 8004860:	371c      	adds	r7, #28
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40010000 	.word	0x40010000

08004870 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004870:	b480      	push	{r7}
 8004872:	b087      	sub	sp, #28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a1b      	ldr	r3, [r3, #32]
 800487e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a1b      	ldr	r3, [r3, #32]
 800488a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69db      	ldr	r3, [r3, #28]
 8004896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800489e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f023 0303 	bic.w	r3, r3, #3
 80048a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68fa      	ldr	r2, [r7, #12]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	4313      	orrs	r3, r2
 80048c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1d      	ldr	r2, [pc, #116]	; (8004940 <TIM_OC3_SetConfig+0xd0>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10d      	bne.n	80048ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80048d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	021b      	lsls	r3, r3, #8
 80048dc:	697a      	ldr	r2, [r7, #20]
 80048de:	4313      	orrs	r3, r2
 80048e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80048e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a14      	ldr	r2, [pc, #80]	; (8004940 <TIM_OC3_SetConfig+0xd0>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d113      	bne.n	800491a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	699b      	ldr	r3, [r3, #24]
 8004912:	011b      	lsls	r3, r3, #4
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	4313      	orrs	r3, r2
 8004918:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	693a      	ldr	r2, [r7, #16]
 800491e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	68fa      	ldr	r2, [r7, #12]
 8004924:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	685a      	ldr	r2, [r3, #4]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	697a      	ldr	r2, [r7, #20]
 8004932:	621a      	str	r2, [r3, #32]
}
 8004934:	bf00      	nop
 8004936:	371c      	adds	r7, #28
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr
 8004940:	40010000 	.word	0x40010000

08004944 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004944:	b480      	push	{r7}
 8004946:	b087      	sub	sp, #28
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a1b      	ldr	r3, [r3, #32]
 8004952:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800497a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	021b      	lsls	r3, r3, #8
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4313      	orrs	r3, r2
 8004986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800498e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	031b      	lsls	r3, r3, #12
 8004996:	693a      	ldr	r2, [r7, #16]
 8004998:	4313      	orrs	r3, r2
 800499a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a10      	ldr	r2, [pc, #64]	; (80049e0 <TIM_OC4_SetConfig+0x9c>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d109      	bne.n	80049b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	019b      	lsls	r3, r3, #6
 80049b2:	697a      	ldr	r2, [r7, #20]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	685a      	ldr	r2, [r3, #4]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	40010000 	.word	0x40010000

080049e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b087      	sub	sp, #28
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	60f8      	str	r0, [r7, #12]
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	6a1b      	ldr	r3, [r3, #32]
 80049f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	f023 0201 	bic.w	r2, r3, #1
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	699b      	ldr	r3, [r3, #24]
 8004a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	011b      	lsls	r3, r3, #4
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	4313      	orrs	r3, r2
 8004a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f023 030a 	bic.w	r3, r3, #10
 8004a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a22:	697a      	ldr	r2, [r7, #20]
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	621a      	str	r2, [r3, #32]
}
 8004a36:	bf00      	nop
 8004a38:	371c      	adds	r7, #28
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr

08004a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a42:	b480      	push	{r7}
 8004a44:	b087      	sub	sp, #28
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	60f8      	str	r0, [r7, #12]
 8004a4a:	60b9      	str	r1, [r7, #8]
 8004a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6a1b      	ldr	r3, [r3, #32]
 8004a52:	f023 0210 	bic.w	r2, r3, #16
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a66:	697b      	ldr	r3, [r7, #20]
 8004a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	031b      	lsls	r3, r3, #12
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	011b      	lsls	r3, r3, #4
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4313      	orrs	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	697a      	ldr	r2, [r7, #20]
 8004a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	621a      	str	r2, [r3, #32]
}
 8004a96:	bf00      	nop
 8004a98:	371c      	adds	r7, #28
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr

08004aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aa2:	b480      	push	{r7}
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
 8004aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004aba:	683a      	ldr	r2, [r7, #0]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	f043 0307 	orr.w	r3, r3, #7
 8004ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68fa      	ldr	r2, [r7, #12]
 8004aca:	609a      	str	r2, [r3, #8]
}
 8004acc:	bf00      	nop
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	60f8      	str	r0, [r7, #12]
 8004ae0:	60b9      	str	r1, [r7, #8]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004aec:	697b      	ldr	r3, [r7, #20]
 8004aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	021a      	lsls	r2, r3, #8
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	431a      	orrs	r2, r3
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	697a      	ldr	r2, [r7, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	609a      	str	r2, [r3, #8]
}
 8004b0c:	bf00      	nop
 8004b0e:	371c      	adds	r7, #28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b087      	sub	sp, #28
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f003 031f 	and.w	r3, r3, #31
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	6a1a      	ldr	r2, [r3, #32]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	43db      	mvns	r3, r3
 8004b3a:	401a      	ands	r2, r3
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6a1a      	ldr	r2, [r3, #32]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	f003 031f 	and.w	r3, r3, #31
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b50:	431a      	orrs	r2, r3
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	621a      	str	r2, [r3, #32]
}
 8004b56:	bf00      	nop
 8004b58:	371c      	adds	r7, #28
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b60:	4770      	bx	lr
	...

08004b64 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e050      	b.n	8004c1e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ba2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d018      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bc8:	d013      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a18      	ldr	r2, [pc, #96]	; (8004c30 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d00e      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d009      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d004      	beq.n	8004bf2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a13      	ldr	r2, [pc, #76]	; (8004c3c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d10c      	bne.n	8004c0c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bf8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	68ba      	ldr	r2, [r7, #8]
 8004c0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2201      	movs	r2, #1
 8004c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c1c:	2300      	movs	r3, #0
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3714      	adds	r7, #20
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
 8004c2a:	bf00      	nop
 8004c2c:	40010000 	.word	0x40010000
 8004c30:	40000400 	.word	0x40000400
 8004c34:	40000800 	.word	0x40000800
 8004c38:	40000c00 	.word	0x40000c00
 8004c3c:	40014000 	.word	0x40014000

08004c40 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b082      	sub	sp, #8
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d101      	bne.n	8004c52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e03f      	b.n	8004cd2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004c58:	b2db      	uxtb	r3, r3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d106      	bne.n	8004c6c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f7fd f8d0 	bl	8001e0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2224      	movs	r2, #36	; 0x24
 8004c70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68da      	ldr	r2, [r3, #12]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c82:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f000 f90b 	bl	8004ea0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c98:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	695a      	ldr	r2, [r3, #20]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ca8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	68da      	ldr	r2, [r3, #12]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cb8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2220      	movs	r2, #32
 8004cc4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b088      	sub	sp, #32
 8004cde:	af02      	add	r7, sp, #8
 8004ce0:	60f8      	str	r0, [r7, #12]
 8004ce2:	60b9      	str	r1, [r7, #8]
 8004ce4:	603b      	str	r3, [r7, #0]
 8004ce6:	4613      	mov	r3, r2
 8004ce8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	2b20      	cmp	r3, #32
 8004cf8:	f040 8083 	bne.w	8004e02 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d002      	beq.n	8004d08 <HAL_UART_Transmit+0x2e>
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d101      	bne.n	8004d0c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e07b      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d12:	2b01      	cmp	r3, #1
 8004d14:	d101      	bne.n	8004d1a <HAL_UART_Transmit+0x40>
 8004d16:	2302      	movs	r3, #2
 8004d18:	e074      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2200      	movs	r2, #0
 8004d26:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2221      	movs	r2, #33	; 0x21
 8004d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004d30:	f7fd fa4a 	bl	80021c8 <HAL_GetTick>
 8004d34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	88fa      	ldrh	r2, [r7, #6]
 8004d3a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8004d4a:	e042      	b.n	8004dd2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	3b01      	subs	r3, #1
 8004d54:	b29a      	uxth	r2, r3
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d62:	d122      	bne.n	8004daa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	9300      	str	r3, [sp, #0]
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2180      	movs	r1, #128	; 0x80
 8004d6e:	68f8      	ldr	r0, [r7, #12]
 8004d70:	f000 f84c 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004d74:	4603      	mov	r3, r0
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d001      	beq.n	8004d7e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e042      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	881b      	ldrh	r3, [r3, #0]
 8004d86:	461a      	mov	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d90:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d103      	bne.n	8004da2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	3302      	adds	r3, #2
 8004d9e:	60bb      	str	r3, [r7, #8]
 8004da0:	e017      	b.n	8004dd2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	3301      	adds	r3, #1
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	e013      	b.n	8004dd2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	9300      	str	r3, [sp, #0]
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	2200      	movs	r2, #0
 8004db2:	2180      	movs	r1, #128	; 0x80
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f829 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d001      	beq.n	8004dc4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e01f      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	1c5a      	adds	r2, r3, #1
 8004dc8:	60ba      	str	r2, [r7, #8]
 8004dca:	781a      	ldrb	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1b7      	bne.n	8004d4c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	9300      	str	r3, [sp, #0]
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	2200      	movs	r2, #0
 8004de4:	2140      	movs	r1, #64	; 0x40
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f810 	bl	8004e0c <UART_WaitOnFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e006      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	e000      	b.n	8004e04 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004e02:	2302      	movs	r3, #2
  }
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	603b      	str	r3, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e1c:	e02c      	b.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e1e:	69bb      	ldr	r3, [r7, #24]
 8004e20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e24:	d028      	beq.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <UART_WaitOnFlagUntilTimeout+0x30>
 8004e2c:	f7fd f9cc 	bl	80021c8 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	69ba      	ldr	r2, [r7, #24]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d21d      	bcs.n	8004e78 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004e4a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	695a      	ldr	r2, [r3, #20]
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 0201 	bic.w	r2, r2, #1
 8004e5a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2220      	movs	r2, #32
 8004e68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2200      	movs	r2, #0
 8004e70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e00f      	b.n	8004e98 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	681a      	ldr	r2, [r3, #0]
 8004e7e:	68bb      	ldr	r3, [r7, #8]
 8004e80:	4013      	ands	r3, r2
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	bf0c      	ite	eq
 8004e88:	2301      	moveq	r3, #1
 8004e8a:	2300      	movne	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	461a      	mov	r2, r3
 8004e90:	79fb      	ldrb	r3, [r7, #7]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d0c3      	beq.n	8004e1e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e96:	2300      	movs	r3, #0
}
 8004e98:	4618      	mov	r0, r3
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ea0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ea4:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eae:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004eba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ebe:	68d9      	ldr	r1, [r3, #12]
 8004ec0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	ea40 0301 	orr.w	r3, r0, r1
 8004eca:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004ecc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ee6:	69db      	ldr	r3, [r3, #28]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 8004eee:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004efa:	f021 010c 	bic.w	r1, r1, #12
 8004efe:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004f08:	430b      	orrs	r3, r1
 8004f0a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004f0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	695b      	ldr	r3, [r3, #20]
 8004f14:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004f18:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f1c:	6999      	ldr	r1, [r3, #24]
 8004f1e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	ea40 0301 	orr.w	r3, r0, r1
 8004f28:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f2a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f2e:	69db      	ldr	r3, [r3, #28]
 8004f30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f34:	f040 824a 	bne.w	80053cc <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004f38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	4b96      	ldr	r3, [pc, #600]	; (8005198 <UART_SetConfig+0x2f8>)
 8004f40:	429a      	cmp	r2, r3
 8004f42:	d006      	beq.n	8004f52 <UART_SetConfig+0xb2>
 8004f44:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	4b94      	ldr	r3, [pc, #592]	; (800519c <UART_SetConfig+0x2fc>)
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	f040 8129 	bne.w	80051a4 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004f52:	f7ff f8e7 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
 8004f56:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004f5a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004f5e:	2200      	movs	r2, #0
 8004f60:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 8004f64:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 8004f68:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 8004f6c:	4622      	mov	r2, r4
 8004f6e:	462b      	mov	r3, r5
 8004f70:	1891      	adds	r1, r2, r2
 8004f72:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004f76:	415b      	adcs	r3, r3
 8004f78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004f7c:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8004f80:	4621      	mov	r1, r4
 8004f82:	1851      	adds	r1, r2, r1
 8004f84:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 8004f88:	4629      	mov	r1, r5
 8004f8a:	414b      	adcs	r3, r1
 8004f8c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004f90:	f04f 0200 	mov.w	r2, #0
 8004f94:	f04f 0300 	mov.w	r3, #0
 8004f98:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004f9c:	4649      	mov	r1, r9
 8004f9e:	00cb      	lsls	r3, r1, #3
 8004fa0:	4641      	mov	r1, r8
 8004fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fa6:	4641      	mov	r1, r8
 8004fa8:	00ca      	lsls	r2, r1, #3
 8004faa:	4610      	mov	r0, r2
 8004fac:	4619      	mov	r1, r3
 8004fae:	4603      	mov	r3, r0
 8004fb0:	4622      	mov	r2, r4
 8004fb2:	189b      	adds	r3, r3, r2
 8004fb4:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004fb8:	462b      	mov	r3, r5
 8004fba:	460a      	mov	r2, r1
 8004fbc:	eb42 0303 	adc.w	r3, r2, r3
 8004fc0:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004fc4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8004fd0:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004fd4:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004fd8:	460b      	mov	r3, r1
 8004fda:	18db      	adds	r3, r3, r3
 8004fdc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	eb42 0303 	adc.w	r3, r2, r3
 8004fe6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004fea:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8004fee:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 8004ff2:	f7fb ff3f 	bl	8000e74 <__aeabi_uldivmod>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	4b69      	ldr	r3, [pc, #420]	; (80051a0 <UART_SetConfig+0x300>)
 8004ffc:	fba3 2302 	umull	r2, r3, r3, r2
 8005000:	095b      	lsrs	r3, r3, #5
 8005002:	011c      	lsls	r4, r3, #4
 8005004:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005008:	2200      	movs	r2, #0
 800500a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800500e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8005012:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8005016:	4642      	mov	r2, r8
 8005018:	464b      	mov	r3, r9
 800501a:	1891      	adds	r1, r2, r2
 800501c:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8005020:	415b      	adcs	r3, r3
 8005022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005026:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 800502a:	4641      	mov	r1, r8
 800502c:	1851      	adds	r1, r2, r1
 800502e:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 8005032:	4649      	mov	r1, r9
 8005034:	414b      	adcs	r3, r1
 8005036:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 8005046:	4659      	mov	r1, fp
 8005048:	00cb      	lsls	r3, r1, #3
 800504a:	4651      	mov	r1, sl
 800504c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005050:	4651      	mov	r1, sl
 8005052:	00ca      	lsls	r2, r1, #3
 8005054:	4610      	mov	r0, r2
 8005056:	4619      	mov	r1, r3
 8005058:	4603      	mov	r3, r0
 800505a:	4642      	mov	r2, r8
 800505c:	189b      	adds	r3, r3, r2
 800505e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 8005062:	464b      	mov	r3, r9
 8005064:	460a      	mov	r2, r1
 8005066:	eb42 0303 	adc.w	r3, r2, r3
 800506a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 800506e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 800507a:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 800507e:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 8005082:	460b      	mov	r3, r1
 8005084:	18db      	adds	r3, r3, r3
 8005086:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800508a:	4613      	mov	r3, r2
 800508c:	eb42 0303 	adc.w	r3, r2, r3
 8005090:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005094:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8005098:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 800509c:	f7fb feea 	bl	8000e74 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4611      	mov	r1, r2
 80050a6:	4b3e      	ldr	r3, [pc, #248]	; (80051a0 <UART_SetConfig+0x300>)
 80050a8:	fba3 2301 	umull	r2, r3, r3, r1
 80050ac:	095b      	lsrs	r3, r3, #5
 80050ae:	2264      	movs	r2, #100	; 0x64
 80050b0:	fb02 f303 	mul.w	r3, r2, r3
 80050b4:	1acb      	subs	r3, r1, r3
 80050b6:	00db      	lsls	r3, r3, #3
 80050b8:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80050bc:	4b38      	ldr	r3, [pc, #224]	; (80051a0 <UART_SetConfig+0x300>)
 80050be:	fba3 2302 	umull	r2, r3, r3, r2
 80050c2:	095b      	lsrs	r3, r3, #5
 80050c4:	005b      	lsls	r3, r3, #1
 80050c6:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80050ca:	441c      	add	r4, r3
 80050cc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80050d6:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 80050da:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 80050de:	4642      	mov	r2, r8
 80050e0:	464b      	mov	r3, r9
 80050e2:	1891      	adds	r1, r2, r2
 80050e4:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 80050e8:	415b      	adcs	r3, r3
 80050ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050ee:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80050f2:	4641      	mov	r1, r8
 80050f4:	1851      	adds	r1, r2, r1
 80050f6:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 80050fa:	4649      	mov	r1, r9
 80050fc:	414b      	adcs	r3, r1
 80050fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005102:	f04f 0200 	mov.w	r2, #0
 8005106:	f04f 0300 	mov.w	r3, #0
 800510a:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800510e:	4659      	mov	r1, fp
 8005110:	00cb      	lsls	r3, r1, #3
 8005112:	4651      	mov	r1, sl
 8005114:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005118:	4651      	mov	r1, sl
 800511a:	00ca      	lsls	r2, r1, #3
 800511c:	4610      	mov	r0, r2
 800511e:	4619      	mov	r1, r3
 8005120:	4603      	mov	r3, r0
 8005122:	4642      	mov	r2, r8
 8005124:	189b      	adds	r3, r3, r2
 8005126:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 800512a:	464b      	mov	r3, r9
 800512c:	460a      	mov	r2, r1
 800512e:	eb42 0303 	adc.w	r3, r2, r3
 8005132:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8005136:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8005142:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 8005146:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 800514a:	460b      	mov	r3, r1
 800514c:	18db      	adds	r3, r3, r3
 800514e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005152:	4613      	mov	r3, r2
 8005154:	eb42 0303 	adc.w	r3, r2, r3
 8005158:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800515c:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 8005160:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 8005164:	f7fb fe86 	bl	8000e74 <__aeabi_uldivmod>
 8005168:	4602      	mov	r2, r0
 800516a:	460b      	mov	r3, r1
 800516c:	4b0c      	ldr	r3, [pc, #48]	; (80051a0 <UART_SetConfig+0x300>)
 800516e:	fba3 1302 	umull	r1, r3, r3, r2
 8005172:	095b      	lsrs	r3, r3, #5
 8005174:	2164      	movs	r1, #100	; 0x64
 8005176:	fb01 f303 	mul.w	r3, r1, r3
 800517a:	1ad3      	subs	r3, r2, r3
 800517c:	00db      	lsls	r3, r3, #3
 800517e:	3332      	adds	r3, #50	; 0x32
 8005180:	4a07      	ldr	r2, [pc, #28]	; (80051a0 <UART_SetConfig+0x300>)
 8005182:	fba2 2303 	umull	r2, r3, r2, r3
 8005186:	095b      	lsrs	r3, r3, #5
 8005188:	f003 0207 	and.w	r2, r3, #7
 800518c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4422      	add	r2, r4
 8005194:	609a      	str	r2, [r3, #8]
 8005196:	e349      	b.n	800582c <UART_SetConfig+0x98c>
 8005198:	40011000 	.word	0x40011000
 800519c:	40011400 	.word	0x40011400
 80051a0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051a4:	f7fe ffaa 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 80051a8:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051ac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80051b0:	2200      	movs	r2, #0
 80051b2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80051b6:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 80051ba:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 80051be:	4622      	mov	r2, r4
 80051c0:	462b      	mov	r3, r5
 80051c2:	1891      	adds	r1, r2, r2
 80051c4:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80051c8:	415b      	adcs	r3, r3
 80051ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051ce:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80051d2:	4621      	mov	r1, r4
 80051d4:	eb12 0a01 	adds.w	sl, r2, r1
 80051d8:	4629      	mov	r1, r5
 80051da:	eb43 0b01 	adc.w	fp, r3, r1
 80051de:	f04f 0200 	mov.w	r2, #0
 80051e2:	f04f 0300 	mov.w	r3, #0
 80051e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051f2:	4692      	mov	sl, r2
 80051f4:	469b      	mov	fp, r3
 80051f6:	4623      	mov	r3, r4
 80051f8:	eb1a 0303 	adds.w	r3, sl, r3
 80051fc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8005200:	462b      	mov	r3, r5
 8005202:	eb4b 0303 	adc.w	r3, fp, r3
 8005206:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800520a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8005216:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800521a:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800521e:	460b      	mov	r3, r1
 8005220:	18db      	adds	r3, r3, r3
 8005222:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005226:	4613      	mov	r3, r2
 8005228:	eb42 0303 	adc.w	r3, r2, r3
 800522c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005230:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8005234:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 8005238:	f7fb fe1c 	bl	8000e74 <__aeabi_uldivmod>
 800523c:	4602      	mov	r2, r0
 800523e:	460b      	mov	r3, r1
 8005240:	4b61      	ldr	r3, [pc, #388]	; (80053c8 <UART_SetConfig+0x528>)
 8005242:	fba3 2302 	umull	r2, r3, r3, r2
 8005246:	095b      	lsrs	r3, r3, #5
 8005248:	011c      	lsls	r4, r3, #4
 800524a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800524e:	2200      	movs	r2, #0
 8005250:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8005254:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 8005258:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 800525c:	4642      	mov	r2, r8
 800525e:	464b      	mov	r3, r9
 8005260:	1891      	adds	r1, r2, r2
 8005262:	67b9      	str	r1, [r7, #120]	; 0x78
 8005264:	415b      	adcs	r3, r3
 8005266:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005268:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 800526c:	4641      	mov	r1, r8
 800526e:	1851      	adds	r1, r2, r1
 8005270:	6739      	str	r1, [r7, #112]	; 0x70
 8005272:	4649      	mov	r1, r9
 8005274:	414b      	adcs	r3, r1
 8005276:	677b      	str	r3, [r7, #116]	; 0x74
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	f04f 0300 	mov.w	r3, #0
 8005280:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 8005284:	4659      	mov	r1, fp
 8005286:	00cb      	lsls	r3, r1, #3
 8005288:	4651      	mov	r1, sl
 800528a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800528e:	4651      	mov	r1, sl
 8005290:	00ca      	lsls	r2, r1, #3
 8005292:	4610      	mov	r0, r2
 8005294:	4619      	mov	r1, r3
 8005296:	4603      	mov	r3, r0
 8005298:	4642      	mov	r2, r8
 800529a:	189b      	adds	r3, r3, r2
 800529c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80052a0:	464b      	mov	r3, r9
 80052a2:	460a      	mov	r2, r1
 80052a4:	eb42 0303 	adc.w	r3, r2, r3
 80052a8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 80052ac:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80052b8:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 80052bc:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 80052c0:	460b      	mov	r3, r1
 80052c2:	18db      	adds	r3, r3, r3
 80052c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80052c6:	4613      	mov	r3, r2
 80052c8:	eb42 0303 	adc.w	r3, r2, r3
 80052cc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80052ce:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80052d2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 80052d6:	f7fb fdcd 	bl	8000e74 <__aeabi_uldivmod>
 80052da:	4602      	mov	r2, r0
 80052dc:	460b      	mov	r3, r1
 80052de:	4611      	mov	r1, r2
 80052e0:	4b39      	ldr	r3, [pc, #228]	; (80053c8 <UART_SetConfig+0x528>)
 80052e2:	fba3 2301 	umull	r2, r3, r3, r1
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	2264      	movs	r2, #100	; 0x64
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	1acb      	subs	r3, r1, r3
 80052f0:	00db      	lsls	r3, r3, #3
 80052f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80052f6:	4b34      	ldr	r3, [pc, #208]	; (80053c8 <UART_SetConfig+0x528>)
 80052f8:	fba3 2302 	umull	r2, r3, r3, r2
 80052fc:	095b      	lsrs	r3, r3, #5
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005304:	441c      	add	r4, r3
 8005306:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800530a:	2200      	movs	r2, #0
 800530c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8005310:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8005314:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8005318:	4642      	mov	r2, r8
 800531a:	464b      	mov	r3, r9
 800531c:	1891      	adds	r1, r2, r2
 800531e:	6639      	str	r1, [r7, #96]	; 0x60
 8005320:	415b      	adcs	r3, r3
 8005322:	667b      	str	r3, [r7, #100]	; 0x64
 8005324:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8005328:	4641      	mov	r1, r8
 800532a:	1851      	adds	r1, r2, r1
 800532c:	65b9      	str	r1, [r7, #88]	; 0x58
 800532e:	4649      	mov	r1, r9
 8005330:	414b      	adcs	r3, r1
 8005332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005334:	f04f 0200 	mov.w	r2, #0
 8005338:	f04f 0300 	mov.w	r3, #0
 800533c:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 8005340:	4659      	mov	r1, fp
 8005342:	00cb      	lsls	r3, r1, #3
 8005344:	4651      	mov	r1, sl
 8005346:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800534a:	4651      	mov	r1, sl
 800534c:	00ca      	lsls	r2, r1, #3
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	4603      	mov	r3, r0
 8005354:	4642      	mov	r2, r8
 8005356:	189b      	adds	r3, r3, r2
 8005358:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 800535c:	464b      	mov	r3, r9
 800535e:	460a      	mov	r2, r1
 8005360:	eb42 0303 	adc.w	r3, r2, r3
 8005364:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8005368:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 8005374:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 8005378:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 800537c:	460b      	mov	r3, r1
 800537e:	18db      	adds	r3, r3, r3
 8005380:	653b      	str	r3, [r7, #80]	; 0x50
 8005382:	4613      	mov	r3, r2
 8005384:	eb42 0303 	adc.w	r3, r2, r3
 8005388:	657b      	str	r3, [r7, #84]	; 0x54
 800538a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800538e:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 8005392:	f7fb fd6f 	bl	8000e74 <__aeabi_uldivmod>
 8005396:	4602      	mov	r2, r0
 8005398:	460b      	mov	r3, r1
 800539a:	4b0b      	ldr	r3, [pc, #44]	; (80053c8 <UART_SetConfig+0x528>)
 800539c:	fba3 1302 	umull	r1, r3, r3, r2
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	2164      	movs	r1, #100	; 0x64
 80053a4:	fb01 f303 	mul.w	r3, r1, r3
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	3332      	adds	r3, #50	; 0x32
 80053ae:	4a06      	ldr	r2, [pc, #24]	; (80053c8 <UART_SetConfig+0x528>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	f003 0207 	and.w	r2, r3, #7
 80053ba:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4422      	add	r2, r4
 80053c2:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80053c4:	e232      	b.n	800582c <UART_SetConfig+0x98c>
 80053c6:	bf00      	nop
 80053c8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053cc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	4b8d      	ldr	r3, [pc, #564]	; (8005608 <UART_SetConfig+0x768>)
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d006      	beq.n	80053e6 <UART_SetConfig+0x546>
 80053d8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b8b      	ldr	r3, [pc, #556]	; (800560c <UART_SetConfig+0x76c>)
 80053e0:	429a      	cmp	r2, r3
 80053e2:	f040 8117 	bne.w	8005614 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 80053e6:	f7fe fe9d 	bl	8004124 <HAL_RCC_GetPCLK2Freq>
 80053ea:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053ee:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80053f2:	2200      	movs	r2, #0
 80053f4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80053f8:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80053fc:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 8005400:	4622      	mov	r2, r4
 8005402:	462b      	mov	r3, r5
 8005404:	1891      	adds	r1, r2, r2
 8005406:	64b9      	str	r1, [r7, #72]	; 0x48
 8005408:	415b      	adcs	r3, r3
 800540a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800540c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005410:	4621      	mov	r1, r4
 8005412:	eb12 0801 	adds.w	r8, r2, r1
 8005416:	4629      	mov	r1, r5
 8005418:	eb43 0901 	adc.w	r9, r3, r1
 800541c:	f04f 0200 	mov.w	r2, #0
 8005420:	f04f 0300 	mov.w	r3, #0
 8005424:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005428:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800542c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005430:	4690      	mov	r8, r2
 8005432:	4699      	mov	r9, r3
 8005434:	4623      	mov	r3, r4
 8005436:	eb18 0303 	adds.w	r3, r8, r3
 800543a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800543e:	462b      	mov	r3, r5
 8005440:	eb49 0303 	adc.w	r3, r9, r3
 8005444:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8005448:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2200      	movs	r2, #0
 8005450:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8005454:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 8005464:	4629      	mov	r1, r5
 8005466:	008b      	lsls	r3, r1, #2
 8005468:	4621      	mov	r1, r4
 800546a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800546e:	4621      	mov	r1, r4
 8005470:	008a      	lsls	r2, r1, #2
 8005472:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 8005476:	f7fb fcfd 	bl	8000e74 <__aeabi_uldivmod>
 800547a:	4602      	mov	r2, r0
 800547c:	460b      	mov	r3, r1
 800547e:	4b64      	ldr	r3, [pc, #400]	; (8005610 <UART_SetConfig+0x770>)
 8005480:	fba3 2302 	umull	r2, r3, r3, r2
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	011c      	lsls	r4, r3, #4
 8005488:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800548c:	2200      	movs	r2, #0
 800548e:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8005492:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8005496:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 800549a:	4642      	mov	r2, r8
 800549c:	464b      	mov	r3, r9
 800549e:	1891      	adds	r1, r2, r2
 80054a0:	6439      	str	r1, [r7, #64]	; 0x40
 80054a2:	415b      	adcs	r3, r3
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44
 80054a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054aa:	4641      	mov	r1, r8
 80054ac:	1851      	adds	r1, r2, r1
 80054ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80054b0:	4649      	mov	r1, r9
 80054b2:	414b      	adcs	r3, r1
 80054b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b6:	f04f 0200 	mov.w	r2, #0
 80054ba:	f04f 0300 	mov.w	r3, #0
 80054be:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 80054c2:	4659      	mov	r1, fp
 80054c4:	00cb      	lsls	r3, r1, #3
 80054c6:	4651      	mov	r1, sl
 80054c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054cc:	4651      	mov	r1, sl
 80054ce:	00ca      	lsls	r2, r1, #3
 80054d0:	4610      	mov	r0, r2
 80054d2:	4619      	mov	r1, r3
 80054d4:	4603      	mov	r3, r0
 80054d6:	4642      	mov	r2, r8
 80054d8:	189b      	adds	r3, r3, r2
 80054da:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 80054de:	464b      	mov	r3, r9
 80054e0:	460a      	mov	r2, r1
 80054e2:	eb42 0303 	adc.w	r3, r2, r3
 80054e6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 80054ea:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 80054f6:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 80054fa:	f04f 0200 	mov.w	r2, #0
 80054fe:	f04f 0300 	mov.w	r3, #0
 8005502:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8005506:	4649      	mov	r1, r9
 8005508:	008b      	lsls	r3, r1, #2
 800550a:	4641      	mov	r1, r8
 800550c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005510:	4641      	mov	r1, r8
 8005512:	008a      	lsls	r2, r1, #2
 8005514:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8005518:	f7fb fcac 	bl	8000e74 <__aeabi_uldivmod>
 800551c:	4602      	mov	r2, r0
 800551e:	460b      	mov	r3, r1
 8005520:	4b3b      	ldr	r3, [pc, #236]	; (8005610 <UART_SetConfig+0x770>)
 8005522:	fba3 1302 	umull	r1, r3, r3, r2
 8005526:	095b      	lsrs	r3, r3, #5
 8005528:	2164      	movs	r1, #100	; 0x64
 800552a:	fb01 f303 	mul.w	r3, r1, r3
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	3332      	adds	r3, #50	; 0x32
 8005534:	4a36      	ldr	r2, [pc, #216]	; (8005610 <UART_SetConfig+0x770>)
 8005536:	fba2 2303 	umull	r2, r3, r2, r3
 800553a:	095b      	lsrs	r3, r3, #5
 800553c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005540:	441c      	add	r4, r3
 8005542:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005546:	2200      	movs	r2, #0
 8005548:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800554c:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 8005550:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 8005554:	4642      	mov	r2, r8
 8005556:	464b      	mov	r3, r9
 8005558:	1891      	adds	r1, r2, r2
 800555a:	6339      	str	r1, [r7, #48]	; 0x30
 800555c:	415b      	adcs	r3, r3
 800555e:	637b      	str	r3, [r7, #52]	; 0x34
 8005560:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005564:	4641      	mov	r1, r8
 8005566:	1851      	adds	r1, r2, r1
 8005568:	62b9      	str	r1, [r7, #40]	; 0x28
 800556a:	4649      	mov	r1, r9
 800556c:	414b      	adcs	r3, r1
 800556e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005570:	f04f 0200 	mov.w	r2, #0
 8005574:	f04f 0300 	mov.w	r3, #0
 8005578:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 800557c:	4659      	mov	r1, fp
 800557e:	00cb      	lsls	r3, r1, #3
 8005580:	4651      	mov	r1, sl
 8005582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005586:	4651      	mov	r1, sl
 8005588:	00ca      	lsls	r2, r1, #3
 800558a:	4610      	mov	r0, r2
 800558c:	4619      	mov	r1, r3
 800558e:	4603      	mov	r3, r0
 8005590:	4642      	mov	r2, r8
 8005592:	189b      	adds	r3, r3, r2
 8005594:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005598:	464b      	mov	r3, r9
 800559a:	460a      	mov	r2, r1
 800559c:	eb42 0303 	adc.w	r3, r2, r3
 80055a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 80055a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80055b0:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 80055c0:	4649      	mov	r1, r9
 80055c2:	008b      	lsls	r3, r1, #2
 80055c4:	4641      	mov	r1, r8
 80055c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ca:	4641      	mov	r1, r8
 80055cc:	008a      	lsls	r2, r1, #2
 80055ce:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80055d2:	f7fb fc4f 	bl	8000e74 <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4b0d      	ldr	r3, [pc, #52]	; (8005610 <UART_SetConfig+0x770>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	; 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	3332      	adds	r3, #50	; 0x32
 80055ee:	4a08      	ldr	r2, [pc, #32]	; (8005610 <UART_SetConfig+0x770>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 020f 	and.w	r2, r3, #15
 80055fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4422      	add	r2, r4
 8005602:	609a      	str	r2, [r3, #8]
 8005604:	e112      	b.n	800582c <UART_SetConfig+0x98c>
 8005606:	bf00      	nop
 8005608:	40011000 	.word	0x40011000
 800560c:	40011400 	.word	0x40011400
 8005610:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8005614:	f7fe fd72 	bl	80040fc <HAL_RCC_GetPCLK1Freq>
 8005618:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800561c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8005620:	2200      	movs	r2, #0
 8005622:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005626:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800562a:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 800562e:	4642      	mov	r2, r8
 8005630:	464b      	mov	r3, r9
 8005632:	1891      	adds	r1, r2, r2
 8005634:	6239      	str	r1, [r7, #32]
 8005636:	415b      	adcs	r3, r3
 8005638:	627b      	str	r3, [r7, #36]	; 0x24
 800563a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800563e:	4641      	mov	r1, r8
 8005640:	1854      	adds	r4, r2, r1
 8005642:	4649      	mov	r1, r9
 8005644:	eb43 0501 	adc.w	r5, r3, r1
 8005648:	f04f 0200 	mov.w	r2, #0
 800564c:	f04f 0300 	mov.w	r3, #0
 8005650:	00eb      	lsls	r3, r5, #3
 8005652:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005656:	00e2      	lsls	r2, r4, #3
 8005658:	4614      	mov	r4, r2
 800565a:	461d      	mov	r5, r3
 800565c:	4643      	mov	r3, r8
 800565e:	18e3      	adds	r3, r4, r3
 8005660:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005664:	464b      	mov	r3, r9
 8005666:	eb45 0303 	adc.w	r3, r5, r3
 800566a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800566e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800567a:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 800568a:	4629      	mov	r1, r5
 800568c:	008b      	lsls	r3, r1, #2
 800568e:	4621      	mov	r1, r4
 8005690:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005694:	4621      	mov	r1, r4
 8005696:	008a      	lsls	r2, r1, #2
 8005698:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 800569c:	f7fb fbea 	bl	8000e74 <__aeabi_uldivmod>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4b64      	ldr	r3, [pc, #400]	; (8005838 <UART_SetConfig+0x998>)
 80056a6:	fba3 2302 	umull	r2, r3, r3, r2
 80056aa:	095b      	lsrs	r3, r3, #5
 80056ac:	011c      	lsls	r4, r3, #4
 80056ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80056b2:	2200      	movs	r2, #0
 80056b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056b8:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 80056bc:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	1891      	adds	r1, r2, r2
 80056c6:	61b9      	str	r1, [r7, #24]
 80056c8:	415b      	adcs	r3, r3
 80056ca:	61fb      	str	r3, [r7, #28]
 80056cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056d0:	4641      	mov	r1, r8
 80056d2:	1851      	adds	r1, r2, r1
 80056d4:	6139      	str	r1, [r7, #16]
 80056d6:	4649      	mov	r1, r9
 80056d8:	414b      	adcs	r3, r1
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	f04f 0200 	mov.w	r2, #0
 80056e0:	f04f 0300 	mov.w	r3, #0
 80056e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80056e8:	4659      	mov	r1, fp
 80056ea:	00cb      	lsls	r3, r1, #3
 80056ec:	4651      	mov	r1, sl
 80056ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056f2:	4651      	mov	r1, sl
 80056f4:	00ca      	lsls	r2, r1, #3
 80056f6:	4610      	mov	r0, r2
 80056f8:	4619      	mov	r1, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	4642      	mov	r2, r8
 80056fe:	189b      	adds	r3, r3, r2
 8005700:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005704:	464b      	mov	r3, r9
 8005706:	460a      	mov	r2, r1
 8005708:	eb42 0303 	adc.w	r3, r2, r3
 800570c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005710:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800571c:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 800572c:	4649      	mov	r1, r9
 800572e:	008b      	lsls	r3, r1, #2
 8005730:	4641      	mov	r1, r8
 8005732:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005736:	4641      	mov	r1, r8
 8005738:	008a      	lsls	r2, r1, #2
 800573a:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800573e:	f7fb fb99 	bl	8000e74 <__aeabi_uldivmod>
 8005742:	4602      	mov	r2, r0
 8005744:	460b      	mov	r3, r1
 8005746:	4b3c      	ldr	r3, [pc, #240]	; (8005838 <UART_SetConfig+0x998>)
 8005748:	fba3 1302 	umull	r1, r3, r3, r2
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	2164      	movs	r1, #100	; 0x64
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	011b      	lsls	r3, r3, #4
 8005758:	3332      	adds	r3, #50	; 0x32
 800575a:	4a37      	ldr	r2, [pc, #220]	; (8005838 <UART_SetConfig+0x998>)
 800575c:	fba2 2303 	umull	r2, r3, r2, r3
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005766:	441c      	add	r4, r3
 8005768:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800576c:	2200      	movs	r2, #0
 800576e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005772:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005776:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 800577a:	4642      	mov	r2, r8
 800577c:	464b      	mov	r3, r9
 800577e:	1891      	adds	r1, r2, r2
 8005780:	60b9      	str	r1, [r7, #8]
 8005782:	415b      	adcs	r3, r3
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800578a:	4641      	mov	r1, r8
 800578c:	1851      	adds	r1, r2, r1
 800578e:	6039      	str	r1, [r7, #0]
 8005790:	4649      	mov	r1, r9
 8005792:	414b      	adcs	r3, r1
 8005794:	607b      	str	r3, [r7, #4]
 8005796:	f04f 0200 	mov.w	r2, #0
 800579a:	f04f 0300 	mov.w	r3, #0
 800579e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057a2:	4659      	mov	r1, fp
 80057a4:	00cb      	lsls	r3, r1, #3
 80057a6:	4651      	mov	r1, sl
 80057a8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ac:	4651      	mov	r1, sl
 80057ae:	00ca      	lsls	r2, r1, #3
 80057b0:	4610      	mov	r0, r2
 80057b2:	4619      	mov	r1, r3
 80057b4:	4603      	mov	r3, r0
 80057b6:	4642      	mov	r2, r8
 80057b8:	189b      	adds	r3, r3, r2
 80057ba:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057be:	464b      	mov	r3, r9
 80057c0:	460a      	mov	r2, r1
 80057c2:	eb42 0303 	adc.w	r3, r2, r3
 80057c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057ca:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057d6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80057da:	f04f 0200 	mov.w	r2, #0
 80057de:	f04f 0300 	mov.w	r3, #0
 80057e2:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80057e6:	4649      	mov	r1, r9
 80057e8:	008b      	lsls	r3, r1, #2
 80057ea:	4641      	mov	r1, r8
 80057ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f0:	4641      	mov	r1, r8
 80057f2:	008a      	lsls	r2, r1, #2
 80057f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80057f8:	f7fb fb3c 	bl	8000e74 <__aeabi_uldivmod>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4b0d      	ldr	r3, [pc, #52]	; (8005838 <UART_SetConfig+0x998>)
 8005802:	fba3 1302 	umull	r1, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	2164      	movs	r1, #100	; 0x64
 800580a:	fb01 f303 	mul.w	r3, r1, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	3332      	adds	r3, #50	; 0x32
 8005814:	4a08      	ldr	r2, [pc, #32]	; (8005838 <UART_SetConfig+0x998>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	f003 020f 	and.w	r2, r3, #15
 8005820:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4422      	add	r2, r4
 8005828:	609a      	str	r2, [r3, #8]
}
 800582a:	e7ff      	b.n	800582c <UART_SetConfig+0x98c>
 800582c:	bf00      	nop
 800582e:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8005832:	46bd      	mov	sp, r7
 8005834:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005838:	51eb851f 	.word	0x51eb851f

0800583c <atoi>:
 800583c:	220a      	movs	r2, #10
 800583e:	2100      	movs	r1, #0
 8005840:	f000 bd3e 	b.w	80062c0 <strtol>

08005844 <__errno>:
 8005844:	4b01      	ldr	r3, [pc, #4]	; (800584c <__errno+0x8>)
 8005846:	6818      	ldr	r0, [r3, #0]
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	2000000c 	.word	0x2000000c

08005850 <__libc_init_array>:
 8005850:	b570      	push	{r4, r5, r6, lr}
 8005852:	4d0d      	ldr	r5, [pc, #52]	; (8005888 <__libc_init_array+0x38>)
 8005854:	4c0d      	ldr	r4, [pc, #52]	; (800588c <__libc_init_array+0x3c>)
 8005856:	1b64      	subs	r4, r4, r5
 8005858:	10a4      	asrs	r4, r4, #2
 800585a:	2600      	movs	r6, #0
 800585c:	42a6      	cmp	r6, r4
 800585e:	d109      	bne.n	8005874 <__libc_init_array+0x24>
 8005860:	4d0b      	ldr	r5, [pc, #44]	; (8005890 <__libc_init_array+0x40>)
 8005862:	4c0c      	ldr	r4, [pc, #48]	; (8005894 <__libc_init_array+0x44>)
 8005864:	f002 ff90 	bl	8008788 <_init>
 8005868:	1b64      	subs	r4, r4, r5
 800586a:	10a4      	asrs	r4, r4, #2
 800586c:	2600      	movs	r6, #0
 800586e:	42a6      	cmp	r6, r4
 8005870:	d105      	bne.n	800587e <__libc_init_array+0x2e>
 8005872:	bd70      	pop	{r4, r5, r6, pc}
 8005874:	f855 3b04 	ldr.w	r3, [r5], #4
 8005878:	4798      	blx	r3
 800587a:	3601      	adds	r6, #1
 800587c:	e7ee      	b.n	800585c <__libc_init_array+0xc>
 800587e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005882:	4798      	blx	r3
 8005884:	3601      	adds	r6, #1
 8005886:	e7f2      	b.n	800586e <__libc_init_array+0x1e>
 8005888:	08008bfc 	.word	0x08008bfc
 800588c:	08008bfc 	.word	0x08008bfc
 8005890:	08008bfc 	.word	0x08008bfc
 8005894:	08008c00 	.word	0x08008c00

08005898 <memset>:
 8005898:	4402      	add	r2, r0
 800589a:	4603      	mov	r3, r0
 800589c:	4293      	cmp	r3, r2
 800589e:	d100      	bne.n	80058a2 <memset+0xa>
 80058a0:	4770      	bx	lr
 80058a2:	f803 1b01 	strb.w	r1, [r3], #1
 80058a6:	e7f9      	b.n	800589c <memset+0x4>

080058a8 <__cvt>:
 80058a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058ac:	ec55 4b10 	vmov	r4, r5, d0
 80058b0:	2d00      	cmp	r5, #0
 80058b2:	460e      	mov	r6, r1
 80058b4:	4619      	mov	r1, r3
 80058b6:	462b      	mov	r3, r5
 80058b8:	bfbb      	ittet	lt
 80058ba:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80058be:	461d      	movlt	r5, r3
 80058c0:	2300      	movge	r3, #0
 80058c2:	232d      	movlt	r3, #45	; 0x2d
 80058c4:	700b      	strb	r3, [r1, #0]
 80058c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80058c8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80058cc:	4691      	mov	r9, r2
 80058ce:	f023 0820 	bic.w	r8, r3, #32
 80058d2:	bfbc      	itt	lt
 80058d4:	4622      	movlt	r2, r4
 80058d6:	4614      	movlt	r4, r2
 80058d8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80058dc:	d005      	beq.n	80058ea <__cvt+0x42>
 80058de:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80058e2:	d100      	bne.n	80058e6 <__cvt+0x3e>
 80058e4:	3601      	adds	r6, #1
 80058e6:	2102      	movs	r1, #2
 80058e8:	e000      	b.n	80058ec <__cvt+0x44>
 80058ea:	2103      	movs	r1, #3
 80058ec:	ab03      	add	r3, sp, #12
 80058ee:	9301      	str	r3, [sp, #4]
 80058f0:	ab02      	add	r3, sp, #8
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	ec45 4b10 	vmov	d0, r4, r5
 80058f8:	4653      	mov	r3, sl
 80058fa:	4632      	mov	r2, r6
 80058fc:	f000 fd78 	bl	80063f0 <_dtoa_r>
 8005900:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005904:	4607      	mov	r7, r0
 8005906:	d102      	bne.n	800590e <__cvt+0x66>
 8005908:	f019 0f01 	tst.w	r9, #1
 800590c:	d022      	beq.n	8005954 <__cvt+0xac>
 800590e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005912:	eb07 0906 	add.w	r9, r7, r6
 8005916:	d110      	bne.n	800593a <__cvt+0x92>
 8005918:	783b      	ldrb	r3, [r7, #0]
 800591a:	2b30      	cmp	r3, #48	; 0x30
 800591c:	d10a      	bne.n	8005934 <__cvt+0x8c>
 800591e:	2200      	movs	r2, #0
 8005920:	2300      	movs	r3, #0
 8005922:	4620      	mov	r0, r4
 8005924:	4629      	mov	r1, r5
 8005926:	f7fb f8d7 	bl	8000ad8 <__aeabi_dcmpeq>
 800592a:	b918      	cbnz	r0, 8005934 <__cvt+0x8c>
 800592c:	f1c6 0601 	rsb	r6, r6, #1
 8005930:	f8ca 6000 	str.w	r6, [sl]
 8005934:	f8da 3000 	ldr.w	r3, [sl]
 8005938:	4499      	add	r9, r3
 800593a:	2200      	movs	r2, #0
 800593c:	2300      	movs	r3, #0
 800593e:	4620      	mov	r0, r4
 8005940:	4629      	mov	r1, r5
 8005942:	f7fb f8c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005946:	b108      	cbz	r0, 800594c <__cvt+0xa4>
 8005948:	f8cd 900c 	str.w	r9, [sp, #12]
 800594c:	2230      	movs	r2, #48	; 0x30
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	454b      	cmp	r3, r9
 8005952:	d307      	bcc.n	8005964 <__cvt+0xbc>
 8005954:	9b03      	ldr	r3, [sp, #12]
 8005956:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005958:	1bdb      	subs	r3, r3, r7
 800595a:	4638      	mov	r0, r7
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	b004      	add	sp, #16
 8005960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005964:	1c59      	adds	r1, r3, #1
 8005966:	9103      	str	r1, [sp, #12]
 8005968:	701a      	strb	r2, [r3, #0]
 800596a:	e7f0      	b.n	800594e <__cvt+0xa6>

0800596c <__exponent>:
 800596c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800596e:	4603      	mov	r3, r0
 8005970:	2900      	cmp	r1, #0
 8005972:	bfb8      	it	lt
 8005974:	4249      	neglt	r1, r1
 8005976:	f803 2b02 	strb.w	r2, [r3], #2
 800597a:	bfb4      	ite	lt
 800597c:	222d      	movlt	r2, #45	; 0x2d
 800597e:	222b      	movge	r2, #43	; 0x2b
 8005980:	2909      	cmp	r1, #9
 8005982:	7042      	strb	r2, [r0, #1]
 8005984:	dd2a      	ble.n	80059dc <__exponent+0x70>
 8005986:	f10d 0407 	add.w	r4, sp, #7
 800598a:	46a4      	mov	ip, r4
 800598c:	270a      	movs	r7, #10
 800598e:	46a6      	mov	lr, r4
 8005990:	460a      	mov	r2, r1
 8005992:	fb91 f6f7 	sdiv	r6, r1, r7
 8005996:	fb07 1516 	mls	r5, r7, r6, r1
 800599a:	3530      	adds	r5, #48	; 0x30
 800599c:	2a63      	cmp	r2, #99	; 0x63
 800599e:	f104 34ff 	add.w	r4, r4, #4294967295
 80059a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80059a6:	4631      	mov	r1, r6
 80059a8:	dcf1      	bgt.n	800598e <__exponent+0x22>
 80059aa:	3130      	adds	r1, #48	; 0x30
 80059ac:	f1ae 0502 	sub.w	r5, lr, #2
 80059b0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80059b4:	1c44      	adds	r4, r0, #1
 80059b6:	4629      	mov	r1, r5
 80059b8:	4561      	cmp	r1, ip
 80059ba:	d30a      	bcc.n	80059d2 <__exponent+0x66>
 80059bc:	f10d 0209 	add.w	r2, sp, #9
 80059c0:	eba2 020e 	sub.w	r2, r2, lr
 80059c4:	4565      	cmp	r5, ip
 80059c6:	bf88      	it	hi
 80059c8:	2200      	movhi	r2, #0
 80059ca:	4413      	add	r3, r2
 80059cc:	1a18      	subs	r0, r3, r0
 80059ce:	b003      	add	sp, #12
 80059d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80059d6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80059da:	e7ed      	b.n	80059b8 <__exponent+0x4c>
 80059dc:	2330      	movs	r3, #48	; 0x30
 80059de:	3130      	adds	r1, #48	; 0x30
 80059e0:	7083      	strb	r3, [r0, #2]
 80059e2:	70c1      	strb	r1, [r0, #3]
 80059e4:	1d03      	adds	r3, r0, #4
 80059e6:	e7f1      	b.n	80059cc <__exponent+0x60>

080059e8 <_printf_float>:
 80059e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059ec:	ed2d 8b02 	vpush	{d8}
 80059f0:	b08d      	sub	sp, #52	; 0x34
 80059f2:	460c      	mov	r4, r1
 80059f4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80059f8:	4616      	mov	r6, r2
 80059fa:	461f      	mov	r7, r3
 80059fc:	4605      	mov	r5, r0
 80059fe:	f001 fae5 	bl	8006fcc <_localeconv_r>
 8005a02:	f8d0 a000 	ldr.w	sl, [r0]
 8005a06:	4650      	mov	r0, sl
 8005a08:	f7fa fbea 	bl	80001e0 <strlen>
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	930a      	str	r3, [sp, #40]	; 0x28
 8005a10:	6823      	ldr	r3, [r4, #0]
 8005a12:	9305      	str	r3, [sp, #20]
 8005a14:	f8d8 3000 	ldr.w	r3, [r8]
 8005a18:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005a1c:	3307      	adds	r3, #7
 8005a1e:	f023 0307 	bic.w	r3, r3, #7
 8005a22:	f103 0208 	add.w	r2, r3, #8
 8005a26:	f8c8 2000 	str.w	r2, [r8]
 8005a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a2e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005a32:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005a36:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005a3a:	9307      	str	r3, [sp, #28]
 8005a3c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a40:	ee08 0a10 	vmov	s16, r0
 8005a44:	4b9f      	ldr	r3, [pc, #636]	; (8005cc4 <_printf_float+0x2dc>)
 8005a46:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a4e:	f7fb f875 	bl	8000b3c <__aeabi_dcmpun>
 8005a52:	bb88      	cbnz	r0, 8005ab8 <_printf_float+0xd0>
 8005a54:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005a58:	4b9a      	ldr	r3, [pc, #616]	; (8005cc4 <_printf_float+0x2dc>)
 8005a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8005a5e:	f7fb f84f 	bl	8000b00 <__aeabi_dcmple>
 8005a62:	bb48      	cbnz	r0, 8005ab8 <_printf_float+0xd0>
 8005a64:	2200      	movs	r2, #0
 8005a66:	2300      	movs	r3, #0
 8005a68:	4640      	mov	r0, r8
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	f7fb f83e 	bl	8000aec <__aeabi_dcmplt>
 8005a70:	b110      	cbz	r0, 8005a78 <_printf_float+0x90>
 8005a72:	232d      	movs	r3, #45	; 0x2d
 8005a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a78:	4b93      	ldr	r3, [pc, #588]	; (8005cc8 <_printf_float+0x2e0>)
 8005a7a:	4894      	ldr	r0, [pc, #592]	; (8005ccc <_printf_float+0x2e4>)
 8005a7c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005a80:	bf94      	ite	ls
 8005a82:	4698      	movls	r8, r3
 8005a84:	4680      	movhi	r8, r0
 8005a86:	2303      	movs	r3, #3
 8005a88:	6123      	str	r3, [r4, #16]
 8005a8a:	9b05      	ldr	r3, [sp, #20]
 8005a8c:	f023 0204 	bic.w	r2, r3, #4
 8005a90:	6022      	str	r2, [r4, #0]
 8005a92:	f04f 0900 	mov.w	r9, #0
 8005a96:	9700      	str	r7, [sp, #0]
 8005a98:	4633      	mov	r3, r6
 8005a9a:	aa0b      	add	r2, sp, #44	; 0x2c
 8005a9c:	4621      	mov	r1, r4
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	f000 f9d8 	bl	8005e54 <_printf_common>
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	f040 8090 	bne.w	8005bca <_printf_float+0x1e2>
 8005aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8005aae:	b00d      	add	sp, #52	; 0x34
 8005ab0:	ecbd 8b02 	vpop	{d8}
 8005ab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ab8:	4642      	mov	r2, r8
 8005aba:	464b      	mov	r3, r9
 8005abc:	4640      	mov	r0, r8
 8005abe:	4649      	mov	r1, r9
 8005ac0:	f7fb f83c 	bl	8000b3c <__aeabi_dcmpun>
 8005ac4:	b140      	cbz	r0, 8005ad8 <_printf_float+0xf0>
 8005ac6:	464b      	mov	r3, r9
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfbc      	itt	lt
 8005acc:	232d      	movlt	r3, #45	; 0x2d
 8005ace:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005ad2:	487f      	ldr	r0, [pc, #508]	; (8005cd0 <_printf_float+0x2e8>)
 8005ad4:	4b7f      	ldr	r3, [pc, #508]	; (8005cd4 <_printf_float+0x2ec>)
 8005ad6:	e7d1      	b.n	8005a7c <_printf_float+0x94>
 8005ad8:	6863      	ldr	r3, [r4, #4]
 8005ada:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005ade:	9206      	str	r2, [sp, #24]
 8005ae0:	1c5a      	adds	r2, r3, #1
 8005ae2:	d13f      	bne.n	8005b64 <_printf_float+0x17c>
 8005ae4:	2306      	movs	r3, #6
 8005ae6:	6063      	str	r3, [r4, #4]
 8005ae8:	9b05      	ldr	r3, [sp, #20]
 8005aea:	6861      	ldr	r1, [r4, #4]
 8005aec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005af0:	2300      	movs	r3, #0
 8005af2:	9303      	str	r3, [sp, #12]
 8005af4:	ab0a      	add	r3, sp, #40	; 0x28
 8005af6:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005afa:	ab09      	add	r3, sp, #36	; 0x24
 8005afc:	ec49 8b10 	vmov	d0, r8, r9
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	6022      	str	r2, [r4, #0]
 8005b04:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005b08:	4628      	mov	r0, r5
 8005b0a:	f7ff fecd 	bl	80058a8 <__cvt>
 8005b0e:	9b06      	ldr	r3, [sp, #24]
 8005b10:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b12:	2b47      	cmp	r3, #71	; 0x47
 8005b14:	4680      	mov	r8, r0
 8005b16:	d108      	bne.n	8005b2a <_printf_float+0x142>
 8005b18:	1cc8      	adds	r0, r1, #3
 8005b1a:	db02      	blt.n	8005b22 <_printf_float+0x13a>
 8005b1c:	6863      	ldr	r3, [r4, #4]
 8005b1e:	4299      	cmp	r1, r3
 8005b20:	dd41      	ble.n	8005ba6 <_printf_float+0x1be>
 8005b22:	f1ab 0b02 	sub.w	fp, fp, #2
 8005b26:	fa5f fb8b 	uxtb.w	fp, fp
 8005b2a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005b2e:	d820      	bhi.n	8005b72 <_printf_float+0x18a>
 8005b30:	3901      	subs	r1, #1
 8005b32:	465a      	mov	r2, fp
 8005b34:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005b38:	9109      	str	r1, [sp, #36]	; 0x24
 8005b3a:	f7ff ff17 	bl	800596c <__exponent>
 8005b3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b40:	1813      	adds	r3, r2, r0
 8005b42:	2a01      	cmp	r2, #1
 8005b44:	4681      	mov	r9, r0
 8005b46:	6123      	str	r3, [r4, #16]
 8005b48:	dc02      	bgt.n	8005b50 <_printf_float+0x168>
 8005b4a:	6822      	ldr	r2, [r4, #0]
 8005b4c:	07d2      	lsls	r2, r2, #31
 8005b4e:	d501      	bpl.n	8005b54 <_printf_float+0x16c>
 8005b50:	3301      	adds	r3, #1
 8005b52:	6123      	str	r3, [r4, #16]
 8005b54:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d09c      	beq.n	8005a96 <_printf_float+0xae>
 8005b5c:	232d      	movs	r3, #45	; 0x2d
 8005b5e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005b62:	e798      	b.n	8005a96 <_printf_float+0xae>
 8005b64:	9a06      	ldr	r2, [sp, #24]
 8005b66:	2a47      	cmp	r2, #71	; 0x47
 8005b68:	d1be      	bne.n	8005ae8 <_printf_float+0x100>
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d1bc      	bne.n	8005ae8 <_printf_float+0x100>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e7b9      	b.n	8005ae6 <_printf_float+0xfe>
 8005b72:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005b76:	d118      	bne.n	8005baa <_printf_float+0x1c2>
 8005b78:	2900      	cmp	r1, #0
 8005b7a:	6863      	ldr	r3, [r4, #4]
 8005b7c:	dd0b      	ble.n	8005b96 <_printf_float+0x1ae>
 8005b7e:	6121      	str	r1, [r4, #16]
 8005b80:	b913      	cbnz	r3, 8005b88 <_printf_float+0x1a0>
 8005b82:	6822      	ldr	r2, [r4, #0]
 8005b84:	07d0      	lsls	r0, r2, #31
 8005b86:	d502      	bpl.n	8005b8e <_printf_float+0x1a6>
 8005b88:	3301      	adds	r3, #1
 8005b8a:	440b      	add	r3, r1
 8005b8c:	6123      	str	r3, [r4, #16]
 8005b8e:	65a1      	str	r1, [r4, #88]	; 0x58
 8005b90:	f04f 0900 	mov.w	r9, #0
 8005b94:	e7de      	b.n	8005b54 <_printf_float+0x16c>
 8005b96:	b913      	cbnz	r3, 8005b9e <_printf_float+0x1b6>
 8005b98:	6822      	ldr	r2, [r4, #0]
 8005b9a:	07d2      	lsls	r2, r2, #31
 8005b9c:	d501      	bpl.n	8005ba2 <_printf_float+0x1ba>
 8005b9e:	3302      	adds	r3, #2
 8005ba0:	e7f4      	b.n	8005b8c <_printf_float+0x1a4>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e7f2      	b.n	8005b8c <_printf_float+0x1a4>
 8005ba6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005baa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005bac:	4299      	cmp	r1, r3
 8005bae:	db05      	blt.n	8005bbc <_printf_float+0x1d4>
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	6121      	str	r1, [r4, #16]
 8005bb4:	07d8      	lsls	r0, r3, #31
 8005bb6:	d5ea      	bpl.n	8005b8e <_printf_float+0x1a6>
 8005bb8:	1c4b      	adds	r3, r1, #1
 8005bba:	e7e7      	b.n	8005b8c <_printf_float+0x1a4>
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	bfd4      	ite	le
 8005bc0:	f1c1 0202 	rsble	r2, r1, #2
 8005bc4:	2201      	movgt	r2, #1
 8005bc6:	4413      	add	r3, r2
 8005bc8:	e7e0      	b.n	8005b8c <_printf_float+0x1a4>
 8005bca:	6823      	ldr	r3, [r4, #0]
 8005bcc:	055a      	lsls	r2, r3, #21
 8005bce:	d407      	bmi.n	8005be0 <_printf_float+0x1f8>
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	4642      	mov	r2, r8
 8005bd4:	4631      	mov	r1, r6
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	47b8      	blx	r7
 8005bda:	3001      	adds	r0, #1
 8005bdc:	d12c      	bne.n	8005c38 <_printf_float+0x250>
 8005bde:	e764      	b.n	8005aaa <_printf_float+0xc2>
 8005be0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005be4:	f240 80e0 	bls.w	8005da8 <_printf_float+0x3c0>
 8005be8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005bec:	2200      	movs	r2, #0
 8005bee:	2300      	movs	r3, #0
 8005bf0:	f7fa ff72 	bl	8000ad8 <__aeabi_dcmpeq>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d034      	beq.n	8005c62 <_printf_float+0x27a>
 8005bf8:	4a37      	ldr	r2, [pc, #220]	; (8005cd8 <_printf_float+0x2f0>)
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	4631      	mov	r1, r6
 8005bfe:	4628      	mov	r0, r5
 8005c00:	47b8      	blx	r7
 8005c02:	3001      	adds	r0, #1
 8005c04:	f43f af51 	beq.w	8005aaa <_printf_float+0xc2>
 8005c08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	db02      	blt.n	8005c16 <_printf_float+0x22e>
 8005c10:	6823      	ldr	r3, [r4, #0]
 8005c12:	07d8      	lsls	r0, r3, #31
 8005c14:	d510      	bpl.n	8005c38 <_printf_float+0x250>
 8005c16:	ee18 3a10 	vmov	r3, s16
 8005c1a:	4652      	mov	r2, sl
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b8      	blx	r7
 8005c22:	3001      	adds	r0, #1
 8005c24:	f43f af41 	beq.w	8005aaa <_printf_float+0xc2>
 8005c28:	f04f 0800 	mov.w	r8, #0
 8005c2c:	f104 091a 	add.w	r9, r4, #26
 8005c30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c32:	3b01      	subs	r3, #1
 8005c34:	4543      	cmp	r3, r8
 8005c36:	dc09      	bgt.n	8005c4c <_printf_float+0x264>
 8005c38:	6823      	ldr	r3, [r4, #0]
 8005c3a:	079b      	lsls	r3, r3, #30
 8005c3c:	f100 8105 	bmi.w	8005e4a <_printf_float+0x462>
 8005c40:	68e0      	ldr	r0, [r4, #12]
 8005c42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005c44:	4298      	cmp	r0, r3
 8005c46:	bfb8      	it	lt
 8005c48:	4618      	movlt	r0, r3
 8005c4a:	e730      	b.n	8005aae <_printf_float+0xc6>
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	464a      	mov	r2, r9
 8005c50:	4631      	mov	r1, r6
 8005c52:	4628      	mov	r0, r5
 8005c54:	47b8      	blx	r7
 8005c56:	3001      	adds	r0, #1
 8005c58:	f43f af27 	beq.w	8005aaa <_printf_float+0xc2>
 8005c5c:	f108 0801 	add.w	r8, r8, #1
 8005c60:	e7e6      	b.n	8005c30 <_printf_float+0x248>
 8005c62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	dc39      	bgt.n	8005cdc <_printf_float+0x2f4>
 8005c68:	4a1b      	ldr	r2, [pc, #108]	; (8005cd8 <_printf_float+0x2f0>)
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4631      	mov	r1, r6
 8005c6e:	4628      	mov	r0, r5
 8005c70:	47b8      	blx	r7
 8005c72:	3001      	adds	r0, #1
 8005c74:	f43f af19 	beq.w	8005aaa <_printf_float+0xc2>
 8005c78:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d102      	bne.n	8005c86 <_printf_float+0x29e>
 8005c80:	6823      	ldr	r3, [r4, #0]
 8005c82:	07d9      	lsls	r1, r3, #31
 8005c84:	d5d8      	bpl.n	8005c38 <_printf_float+0x250>
 8005c86:	ee18 3a10 	vmov	r3, s16
 8005c8a:	4652      	mov	r2, sl
 8005c8c:	4631      	mov	r1, r6
 8005c8e:	4628      	mov	r0, r5
 8005c90:	47b8      	blx	r7
 8005c92:	3001      	adds	r0, #1
 8005c94:	f43f af09 	beq.w	8005aaa <_printf_float+0xc2>
 8005c98:	f04f 0900 	mov.w	r9, #0
 8005c9c:	f104 0a1a 	add.w	sl, r4, #26
 8005ca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca2:	425b      	negs	r3, r3
 8005ca4:	454b      	cmp	r3, r9
 8005ca6:	dc01      	bgt.n	8005cac <_printf_float+0x2c4>
 8005ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005caa:	e792      	b.n	8005bd2 <_printf_float+0x1ea>
 8005cac:	2301      	movs	r3, #1
 8005cae:	4652      	mov	r2, sl
 8005cb0:	4631      	mov	r1, r6
 8005cb2:	4628      	mov	r0, r5
 8005cb4:	47b8      	blx	r7
 8005cb6:	3001      	adds	r0, #1
 8005cb8:	f43f aef7 	beq.w	8005aaa <_printf_float+0xc2>
 8005cbc:	f109 0901 	add.w	r9, r9, #1
 8005cc0:	e7ee      	b.n	8005ca0 <_printf_float+0x2b8>
 8005cc2:	bf00      	nop
 8005cc4:	7fefffff 	.word	0x7fefffff
 8005cc8:	0800881c 	.word	0x0800881c
 8005ccc:	08008820 	.word	0x08008820
 8005cd0:	08008828 	.word	0x08008828
 8005cd4:	08008824 	.word	0x08008824
 8005cd8:	0800882c 	.word	0x0800882c
 8005cdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005cde:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005ce0:	429a      	cmp	r2, r3
 8005ce2:	bfa8      	it	ge
 8005ce4:	461a      	movge	r2, r3
 8005ce6:	2a00      	cmp	r2, #0
 8005ce8:	4691      	mov	r9, r2
 8005cea:	dc37      	bgt.n	8005d5c <_printf_float+0x374>
 8005cec:	f04f 0b00 	mov.w	fp, #0
 8005cf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005cf4:	f104 021a 	add.w	r2, r4, #26
 8005cf8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cfa:	9305      	str	r3, [sp, #20]
 8005cfc:	eba3 0309 	sub.w	r3, r3, r9
 8005d00:	455b      	cmp	r3, fp
 8005d02:	dc33      	bgt.n	8005d6c <_printf_float+0x384>
 8005d04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	db3b      	blt.n	8005d84 <_printf_float+0x39c>
 8005d0c:	6823      	ldr	r3, [r4, #0]
 8005d0e:	07da      	lsls	r2, r3, #31
 8005d10:	d438      	bmi.n	8005d84 <_printf_float+0x39c>
 8005d12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d14:	9a05      	ldr	r2, [sp, #20]
 8005d16:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005d18:	1a9a      	subs	r2, r3, r2
 8005d1a:	eba3 0901 	sub.w	r9, r3, r1
 8005d1e:	4591      	cmp	r9, r2
 8005d20:	bfa8      	it	ge
 8005d22:	4691      	movge	r9, r2
 8005d24:	f1b9 0f00 	cmp.w	r9, #0
 8005d28:	dc35      	bgt.n	8005d96 <_printf_float+0x3ae>
 8005d2a:	f04f 0800 	mov.w	r8, #0
 8005d2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d32:	f104 0a1a 	add.w	sl, r4, #26
 8005d36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005d3a:	1a9b      	subs	r3, r3, r2
 8005d3c:	eba3 0309 	sub.w	r3, r3, r9
 8005d40:	4543      	cmp	r3, r8
 8005d42:	f77f af79 	ble.w	8005c38 <_printf_float+0x250>
 8005d46:	2301      	movs	r3, #1
 8005d48:	4652      	mov	r2, sl
 8005d4a:	4631      	mov	r1, r6
 8005d4c:	4628      	mov	r0, r5
 8005d4e:	47b8      	blx	r7
 8005d50:	3001      	adds	r0, #1
 8005d52:	f43f aeaa 	beq.w	8005aaa <_printf_float+0xc2>
 8005d56:	f108 0801 	add.w	r8, r8, #1
 8005d5a:	e7ec      	b.n	8005d36 <_printf_float+0x34e>
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	4631      	mov	r1, r6
 8005d60:	4642      	mov	r2, r8
 8005d62:	4628      	mov	r0, r5
 8005d64:	47b8      	blx	r7
 8005d66:	3001      	adds	r0, #1
 8005d68:	d1c0      	bne.n	8005cec <_printf_float+0x304>
 8005d6a:	e69e      	b.n	8005aaa <_printf_float+0xc2>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4631      	mov	r1, r6
 8005d70:	4628      	mov	r0, r5
 8005d72:	9205      	str	r2, [sp, #20]
 8005d74:	47b8      	blx	r7
 8005d76:	3001      	adds	r0, #1
 8005d78:	f43f ae97 	beq.w	8005aaa <_printf_float+0xc2>
 8005d7c:	9a05      	ldr	r2, [sp, #20]
 8005d7e:	f10b 0b01 	add.w	fp, fp, #1
 8005d82:	e7b9      	b.n	8005cf8 <_printf_float+0x310>
 8005d84:	ee18 3a10 	vmov	r3, s16
 8005d88:	4652      	mov	r2, sl
 8005d8a:	4631      	mov	r1, r6
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	47b8      	blx	r7
 8005d90:	3001      	adds	r0, #1
 8005d92:	d1be      	bne.n	8005d12 <_printf_float+0x32a>
 8005d94:	e689      	b.n	8005aaa <_printf_float+0xc2>
 8005d96:	9a05      	ldr	r2, [sp, #20]
 8005d98:	464b      	mov	r3, r9
 8005d9a:	4442      	add	r2, r8
 8005d9c:	4631      	mov	r1, r6
 8005d9e:	4628      	mov	r0, r5
 8005da0:	47b8      	blx	r7
 8005da2:	3001      	adds	r0, #1
 8005da4:	d1c1      	bne.n	8005d2a <_printf_float+0x342>
 8005da6:	e680      	b.n	8005aaa <_printf_float+0xc2>
 8005da8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005daa:	2a01      	cmp	r2, #1
 8005dac:	dc01      	bgt.n	8005db2 <_printf_float+0x3ca>
 8005dae:	07db      	lsls	r3, r3, #31
 8005db0:	d538      	bpl.n	8005e24 <_printf_float+0x43c>
 8005db2:	2301      	movs	r3, #1
 8005db4:	4642      	mov	r2, r8
 8005db6:	4631      	mov	r1, r6
 8005db8:	4628      	mov	r0, r5
 8005dba:	47b8      	blx	r7
 8005dbc:	3001      	adds	r0, #1
 8005dbe:	f43f ae74 	beq.w	8005aaa <_printf_float+0xc2>
 8005dc2:	ee18 3a10 	vmov	r3, s16
 8005dc6:	4652      	mov	r2, sl
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	47b8      	blx	r7
 8005dce:	3001      	adds	r0, #1
 8005dd0:	f43f ae6b 	beq.w	8005aaa <_printf_float+0xc2>
 8005dd4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005dd8:	2200      	movs	r2, #0
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f7fa fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 8005de0:	b9d8      	cbnz	r0, 8005e1a <_printf_float+0x432>
 8005de2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005de4:	f108 0201 	add.w	r2, r8, #1
 8005de8:	3b01      	subs	r3, #1
 8005dea:	4631      	mov	r1, r6
 8005dec:	4628      	mov	r0, r5
 8005dee:	47b8      	blx	r7
 8005df0:	3001      	adds	r0, #1
 8005df2:	d10e      	bne.n	8005e12 <_printf_float+0x42a>
 8005df4:	e659      	b.n	8005aaa <_printf_float+0xc2>
 8005df6:	2301      	movs	r3, #1
 8005df8:	4652      	mov	r2, sl
 8005dfa:	4631      	mov	r1, r6
 8005dfc:	4628      	mov	r0, r5
 8005dfe:	47b8      	blx	r7
 8005e00:	3001      	adds	r0, #1
 8005e02:	f43f ae52 	beq.w	8005aaa <_printf_float+0xc2>
 8005e06:	f108 0801 	add.w	r8, r8, #1
 8005e0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	4543      	cmp	r3, r8
 8005e10:	dcf1      	bgt.n	8005df6 <_printf_float+0x40e>
 8005e12:	464b      	mov	r3, r9
 8005e14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005e18:	e6dc      	b.n	8005bd4 <_printf_float+0x1ec>
 8005e1a:	f04f 0800 	mov.w	r8, #0
 8005e1e:	f104 0a1a 	add.w	sl, r4, #26
 8005e22:	e7f2      	b.n	8005e0a <_printf_float+0x422>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4642      	mov	r2, r8
 8005e28:	e7df      	b.n	8005dea <_printf_float+0x402>
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	464a      	mov	r2, r9
 8005e2e:	4631      	mov	r1, r6
 8005e30:	4628      	mov	r0, r5
 8005e32:	47b8      	blx	r7
 8005e34:	3001      	adds	r0, #1
 8005e36:	f43f ae38 	beq.w	8005aaa <_printf_float+0xc2>
 8005e3a:	f108 0801 	add.w	r8, r8, #1
 8005e3e:	68e3      	ldr	r3, [r4, #12]
 8005e40:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005e42:	1a5b      	subs	r3, r3, r1
 8005e44:	4543      	cmp	r3, r8
 8005e46:	dcf0      	bgt.n	8005e2a <_printf_float+0x442>
 8005e48:	e6fa      	b.n	8005c40 <_printf_float+0x258>
 8005e4a:	f04f 0800 	mov.w	r8, #0
 8005e4e:	f104 0919 	add.w	r9, r4, #25
 8005e52:	e7f4      	b.n	8005e3e <_printf_float+0x456>

08005e54 <_printf_common>:
 8005e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e58:	4616      	mov	r6, r2
 8005e5a:	4699      	mov	r9, r3
 8005e5c:	688a      	ldr	r2, [r1, #8]
 8005e5e:	690b      	ldr	r3, [r1, #16]
 8005e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005e64:	4293      	cmp	r3, r2
 8005e66:	bfb8      	it	lt
 8005e68:	4613      	movlt	r3, r2
 8005e6a:	6033      	str	r3, [r6, #0]
 8005e6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005e70:	4607      	mov	r7, r0
 8005e72:	460c      	mov	r4, r1
 8005e74:	b10a      	cbz	r2, 8005e7a <_printf_common+0x26>
 8005e76:	3301      	adds	r3, #1
 8005e78:	6033      	str	r3, [r6, #0]
 8005e7a:	6823      	ldr	r3, [r4, #0]
 8005e7c:	0699      	lsls	r1, r3, #26
 8005e7e:	bf42      	ittt	mi
 8005e80:	6833      	ldrmi	r3, [r6, #0]
 8005e82:	3302      	addmi	r3, #2
 8005e84:	6033      	strmi	r3, [r6, #0]
 8005e86:	6825      	ldr	r5, [r4, #0]
 8005e88:	f015 0506 	ands.w	r5, r5, #6
 8005e8c:	d106      	bne.n	8005e9c <_printf_common+0x48>
 8005e8e:	f104 0a19 	add.w	sl, r4, #25
 8005e92:	68e3      	ldr	r3, [r4, #12]
 8005e94:	6832      	ldr	r2, [r6, #0]
 8005e96:	1a9b      	subs	r3, r3, r2
 8005e98:	42ab      	cmp	r3, r5
 8005e9a:	dc26      	bgt.n	8005eea <_printf_common+0x96>
 8005e9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ea0:	1e13      	subs	r3, r2, #0
 8005ea2:	6822      	ldr	r2, [r4, #0]
 8005ea4:	bf18      	it	ne
 8005ea6:	2301      	movne	r3, #1
 8005ea8:	0692      	lsls	r2, r2, #26
 8005eaa:	d42b      	bmi.n	8005f04 <_printf_common+0xb0>
 8005eac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005eb0:	4649      	mov	r1, r9
 8005eb2:	4638      	mov	r0, r7
 8005eb4:	47c0      	blx	r8
 8005eb6:	3001      	adds	r0, #1
 8005eb8:	d01e      	beq.n	8005ef8 <_printf_common+0xa4>
 8005eba:	6823      	ldr	r3, [r4, #0]
 8005ebc:	68e5      	ldr	r5, [r4, #12]
 8005ebe:	6832      	ldr	r2, [r6, #0]
 8005ec0:	f003 0306 	and.w	r3, r3, #6
 8005ec4:	2b04      	cmp	r3, #4
 8005ec6:	bf08      	it	eq
 8005ec8:	1aad      	subeq	r5, r5, r2
 8005eca:	68a3      	ldr	r3, [r4, #8]
 8005ecc:	6922      	ldr	r2, [r4, #16]
 8005ece:	bf0c      	ite	eq
 8005ed0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ed4:	2500      	movne	r5, #0
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	bfc4      	itt	gt
 8005eda:	1a9b      	subgt	r3, r3, r2
 8005edc:	18ed      	addgt	r5, r5, r3
 8005ede:	2600      	movs	r6, #0
 8005ee0:	341a      	adds	r4, #26
 8005ee2:	42b5      	cmp	r5, r6
 8005ee4:	d11a      	bne.n	8005f1c <_printf_common+0xc8>
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	e008      	b.n	8005efc <_printf_common+0xa8>
 8005eea:	2301      	movs	r3, #1
 8005eec:	4652      	mov	r2, sl
 8005eee:	4649      	mov	r1, r9
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	47c0      	blx	r8
 8005ef4:	3001      	adds	r0, #1
 8005ef6:	d103      	bne.n	8005f00 <_printf_common+0xac>
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f00:	3501      	adds	r5, #1
 8005f02:	e7c6      	b.n	8005e92 <_printf_common+0x3e>
 8005f04:	18e1      	adds	r1, r4, r3
 8005f06:	1c5a      	adds	r2, r3, #1
 8005f08:	2030      	movs	r0, #48	; 0x30
 8005f0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005f0e:	4422      	add	r2, r4
 8005f10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005f14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005f18:	3302      	adds	r3, #2
 8005f1a:	e7c7      	b.n	8005eac <_printf_common+0x58>
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	4622      	mov	r2, r4
 8005f20:	4649      	mov	r1, r9
 8005f22:	4638      	mov	r0, r7
 8005f24:	47c0      	blx	r8
 8005f26:	3001      	adds	r0, #1
 8005f28:	d0e6      	beq.n	8005ef8 <_printf_common+0xa4>
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7d9      	b.n	8005ee2 <_printf_common+0x8e>
	...

08005f30 <_printf_i>:
 8005f30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f34:	7e0f      	ldrb	r7, [r1, #24]
 8005f36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005f38:	2f78      	cmp	r7, #120	; 0x78
 8005f3a:	4691      	mov	r9, r2
 8005f3c:	4680      	mov	r8, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	469a      	mov	sl, r3
 8005f42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005f46:	d807      	bhi.n	8005f58 <_printf_i+0x28>
 8005f48:	2f62      	cmp	r7, #98	; 0x62
 8005f4a:	d80a      	bhi.n	8005f62 <_printf_i+0x32>
 8005f4c:	2f00      	cmp	r7, #0
 8005f4e:	f000 80d8 	beq.w	8006102 <_printf_i+0x1d2>
 8005f52:	2f58      	cmp	r7, #88	; 0x58
 8005f54:	f000 80a3 	beq.w	800609e <_printf_i+0x16e>
 8005f58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005f60:	e03a      	b.n	8005fd8 <_printf_i+0xa8>
 8005f62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005f66:	2b15      	cmp	r3, #21
 8005f68:	d8f6      	bhi.n	8005f58 <_printf_i+0x28>
 8005f6a:	a101      	add	r1, pc, #4	; (adr r1, 8005f70 <_printf_i+0x40>)
 8005f6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005f70:	08005fc9 	.word	0x08005fc9
 8005f74:	08005fdd 	.word	0x08005fdd
 8005f78:	08005f59 	.word	0x08005f59
 8005f7c:	08005f59 	.word	0x08005f59
 8005f80:	08005f59 	.word	0x08005f59
 8005f84:	08005f59 	.word	0x08005f59
 8005f88:	08005fdd 	.word	0x08005fdd
 8005f8c:	08005f59 	.word	0x08005f59
 8005f90:	08005f59 	.word	0x08005f59
 8005f94:	08005f59 	.word	0x08005f59
 8005f98:	08005f59 	.word	0x08005f59
 8005f9c:	080060e9 	.word	0x080060e9
 8005fa0:	0800600d 	.word	0x0800600d
 8005fa4:	080060cb 	.word	0x080060cb
 8005fa8:	08005f59 	.word	0x08005f59
 8005fac:	08005f59 	.word	0x08005f59
 8005fb0:	0800610b 	.word	0x0800610b
 8005fb4:	08005f59 	.word	0x08005f59
 8005fb8:	0800600d 	.word	0x0800600d
 8005fbc:	08005f59 	.word	0x08005f59
 8005fc0:	08005f59 	.word	0x08005f59
 8005fc4:	080060d3 	.word	0x080060d3
 8005fc8:	682b      	ldr	r3, [r5, #0]
 8005fca:	1d1a      	adds	r2, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	602a      	str	r2, [r5, #0]
 8005fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005fd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005fd8:	2301      	movs	r3, #1
 8005fda:	e0a3      	b.n	8006124 <_printf_i+0x1f4>
 8005fdc:	6820      	ldr	r0, [r4, #0]
 8005fde:	6829      	ldr	r1, [r5, #0]
 8005fe0:	0606      	lsls	r6, r0, #24
 8005fe2:	f101 0304 	add.w	r3, r1, #4
 8005fe6:	d50a      	bpl.n	8005ffe <_printf_i+0xce>
 8005fe8:	680e      	ldr	r6, [r1, #0]
 8005fea:	602b      	str	r3, [r5, #0]
 8005fec:	2e00      	cmp	r6, #0
 8005fee:	da03      	bge.n	8005ff8 <_printf_i+0xc8>
 8005ff0:	232d      	movs	r3, #45	; 0x2d
 8005ff2:	4276      	negs	r6, r6
 8005ff4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ff8:	485e      	ldr	r0, [pc, #376]	; (8006174 <_printf_i+0x244>)
 8005ffa:	230a      	movs	r3, #10
 8005ffc:	e019      	b.n	8006032 <_printf_i+0x102>
 8005ffe:	680e      	ldr	r6, [r1, #0]
 8006000:	602b      	str	r3, [r5, #0]
 8006002:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006006:	bf18      	it	ne
 8006008:	b236      	sxthne	r6, r6
 800600a:	e7ef      	b.n	8005fec <_printf_i+0xbc>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	6820      	ldr	r0, [r4, #0]
 8006010:	1d19      	adds	r1, r3, #4
 8006012:	6029      	str	r1, [r5, #0]
 8006014:	0601      	lsls	r1, r0, #24
 8006016:	d501      	bpl.n	800601c <_printf_i+0xec>
 8006018:	681e      	ldr	r6, [r3, #0]
 800601a:	e002      	b.n	8006022 <_printf_i+0xf2>
 800601c:	0646      	lsls	r6, r0, #25
 800601e:	d5fb      	bpl.n	8006018 <_printf_i+0xe8>
 8006020:	881e      	ldrh	r6, [r3, #0]
 8006022:	4854      	ldr	r0, [pc, #336]	; (8006174 <_printf_i+0x244>)
 8006024:	2f6f      	cmp	r7, #111	; 0x6f
 8006026:	bf0c      	ite	eq
 8006028:	2308      	moveq	r3, #8
 800602a:	230a      	movne	r3, #10
 800602c:	2100      	movs	r1, #0
 800602e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006032:	6865      	ldr	r5, [r4, #4]
 8006034:	60a5      	str	r5, [r4, #8]
 8006036:	2d00      	cmp	r5, #0
 8006038:	bfa2      	ittt	ge
 800603a:	6821      	ldrge	r1, [r4, #0]
 800603c:	f021 0104 	bicge.w	r1, r1, #4
 8006040:	6021      	strge	r1, [r4, #0]
 8006042:	b90e      	cbnz	r6, 8006048 <_printf_i+0x118>
 8006044:	2d00      	cmp	r5, #0
 8006046:	d04d      	beq.n	80060e4 <_printf_i+0x1b4>
 8006048:	4615      	mov	r5, r2
 800604a:	fbb6 f1f3 	udiv	r1, r6, r3
 800604e:	fb03 6711 	mls	r7, r3, r1, r6
 8006052:	5dc7      	ldrb	r7, [r0, r7]
 8006054:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006058:	4637      	mov	r7, r6
 800605a:	42bb      	cmp	r3, r7
 800605c:	460e      	mov	r6, r1
 800605e:	d9f4      	bls.n	800604a <_printf_i+0x11a>
 8006060:	2b08      	cmp	r3, #8
 8006062:	d10b      	bne.n	800607c <_printf_i+0x14c>
 8006064:	6823      	ldr	r3, [r4, #0]
 8006066:	07de      	lsls	r6, r3, #31
 8006068:	d508      	bpl.n	800607c <_printf_i+0x14c>
 800606a:	6923      	ldr	r3, [r4, #16]
 800606c:	6861      	ldr	r1, [r4, #4]
 800606e:	4299      	cmp	r1, r3
 8006070:	bfde      	ittt	le
 8006072:	2330      	movle	r3, #48	; 0x30
 8006074:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006078:	f105 35ff 	addle.w	r5, r5, #4294967295
 800607c:	1b52      	subs	r2, r2, r5
 800607e:	6122      	str	r2, [r4, #16]
 8006080:	f8cd a000 	str.w	sl, [sp]
 8006084:	464b      	mov	r3, r9
 8006086:	aa03      	add	r2, sp, #12
 8006088:	4621      	mov	r1, r4
 800608a:	4640      	mov	r0, r8
 800608c:	f7ff fee2 	bl	8005e54 <_printf_common>
 8006090:	3001      	adds	r0, #1
 8006092:	d14c      	bne.n	800612e <_printf_i+0x1fe>
 8006094:	f04f 30ff 	mov.w	r0, #4294967295
 8006098:	b004      	add	sp, #16
 800609a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609e:	4835      	ldr	r0, [pc, #212]	; (8006174 <_printf_i+0x244>)
 80060a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80060a4:	6829      	ldr	r1, [r5, #0]
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80060ac:	6029      	str	r1, [r5, #0]
 80060ae:	061d      	lsls	r5, r3, #24
 80060b0:	d514      	bpl.n	80060dc <_printf_i+0x1ac>
 80060b2:	07df      	lsls	r7, r3, #31
 80060b4:	bf44      	itt	mi
 80060b6:	f043 0320 	orrmi.w	r3, r3, #32
 80060ba:	6023      	strmi	r3, [r4, #0]
 80060bc:	b91e      	cbnz	r6, 80060c6 <_printf_i+0x196>
 80060be:	6823      	ldr	r3, [r4, #0]
 80060c0:	f023 0320 	bic.w	r3, r3, #32
 80060c4:	6023      	str	r3, [r4, #0]
 80060c6:	2310      	movs	r3, #16
 80060c8:	e7b0      	b.n	800602c <_printf_i+0xfc>
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	f043 0320 	orr.w	r3, r3, #32
 80060d0:	6023      	str	r3, [r4, #0]
 80060d2:	2378      	movs	r3, #120	; 0x78
 80060d4:	4828      	ldr	r0, [pc, #160]	; (8006178 <_printf_i+0x248>)
 80060d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80060da:	e7e3      	b.n	80060a4 <_printf_i+0x174>
 80060dc:	0659      	lsls	r1, r3, #25
 80060de:	bf48      	it	mi
 80060e0:	b2b6      	uxthmi	r6, r6
 80060e2:	e7e6      	b.n	80060b2 <_printf_i+0x182>
 80060e4:	4615      	mov	r5, r2
 80060e6:	e7bb      	b.n	8006060 <_printf_i+0x130>
 80060e8:	682b      	ldr	r3, [r5, #0]
 80060ea:	6826      	ldr	r6, [r4, #0]
 80060ec:	6961      	ldr	r1, [r4, #20]
 80060ee:	1d18      	adds	r0, r3, #4
 80060f0:	6028      	str	r0, [r5, #0]
 80060f2:	0635      	lsls	r5, r6, #24
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	d501      	bpl.n	80060fc <_printf_i+0x1cc>
 80060f8:	6019      	str	r1, [r3, #0]
 80060fa:	e002      	b.n	8006102 <_printf_i+0x1d2>
 80060fc:	0670      	lsls	r0, r6, #25
 80060fe:	d5fb      	bpl.n	80060f8 <_printf_i+0x1c8>
 8006100:	8019      	strh	r1, [r3, #0]
 8006102:	2300      	movs	r3, #0
 8006104:	6123      	str	r3, [r4, #16]
 8006106:	4615      	mov	r5, r2
 8006108:	e7ba      	b.n	8006080 <_printf_i+0x150>
 800610a:	682b      	ldr	r3, [r5, #0]
 800610c:	1d1a      	adds	r2, r3, #4
 800610e:	602a      	str	r2, [r5, #0]
 8006110:	681d      	ldr	r5, [r3, #0]
 8006112:	6862      	ldr	r2, [r4, #4]
 8006114:	2100      	movs	r1, #0
 8006116:	4628      	mov	r0, r5
 8006118:	f7fa f86a 	bl	80001f0 <memchr>
 800611c:	b108      	cbz	r0, 8006122 <_printf_i+0x1f2>
 800611e:	1b40      	subs	r0, r0, r5
 8006120:	6060      	str	r0, [r4, #4]
 8006122:	6863      	ldr	r3, [r4, #4]
 8006124:	6123      	str	r3, [r4, #16]
 8006126:	2300      	movs	r3, #0
 8006128:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800612c:	e7a8      	b.n	8006080 <_printf_i+0x150>
 800612e:	6923      	ldr	r3, [r4, #16]
 8006130:	462a      	mov	r2, r5
 8006132:	4649      	mov	r1, r9
 8006134:	4640      	mov	r0, r8
 8006136:	47d0      	blx	sl
 8006138:	3001      	adds	r0, #1
 800613a:	d0ab      	beq.n	8006094 <_printf_i+0x164>
 800613c:	6823      	ldr	r3, [r4, #0]
 800613e:	079b      	lsls	r3, r3, #30
 8006140:	d413      	bmi.n	800616a <_printf_i+0x23a>
 8006142:	68e0      	ldr	r0, [r4, #12]
 8006144:	9b03      	ldr	r3, [sp, #12]
 8006146:	4298      	cmp	r0, r3
 8006148:	bfb8      	it	lt
 800614a:	4618      	movlt	r0, r3
 800614c:	e7a4      	b.n	8006098 <_printf_i+0x168>
 800614e:	2301      	movs	r3, #1
 8006150:	4632      	mov	r2, r6
 8006152:	4649      	mov	r1, r9
 8006154:	4640      	mov	r0, r8
 8006156:	47d0      	blx	sl
 8006158:	3001      	adds	r0, #1
 800615a:	d09b      	beq.n	8006094 <_printf_i+0x164>
 800615c:	3501      	adds	r5, #1
 800615e:	68e3      	ldr	r3, [r4, #12]
 8006160:	9903      	ldr	r1, [sp, #12]
 8006162:	1a5b      	subs	r3, r3, r1
 8006164:	42ab      	cmp	r3, r5
 8006166:	dcf2      	bgt.n	800614e <_printf_i+0x21e>
 8006168:	e7eb      	b.n	8006142 <_printf_i+0x212>
 800616a:	2500      	movs	r5, #0
 800616c:	f104 0619 	add.w	r6, r4, #25
 8006170:	e7f5      	b.n	800615e <_printf_i+0x22e>
 8006172:	bf00      	nop
 8006174:	0800882e 	.word	0x0800882e
 8006178:	0800883f 	.word	0x0800883f

0800617c <siprintf>:
 800617c:	b40e      	push	{r1, r2, r3}
 800617e:	b500      	push	{lr}
 8006180:	b09c      	sub	sp, #112	; 0x70
 8006182:	ab1d      	add	r3, sp, #116	; 0x74
 8006184:	9002      	str	r0, [sp, #8]
 8006186:	9006      	str	r0, [sp, #24]
 8006188:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800618c:	4809      	ldr	r0, [pc, #36]	; (80061b4 <siprintf+0x38>)
 800618e:	9107      	str	r1, [sp, #28]
 8006190:	9104      	str	r1, [sp, #16]
 8006192:	4909      	ldr	r1, [pc, #36]	; (80061b8 <siprintf+0x3c>)
 8006194:	f853 2b04 	ldr.w	r2, [r3], #4
 8006198:	9105      	str	r1, [sp, #20]
 800619a:	6800      	ldr	r0, [r0, #0]
 800619c:	9301      	str	r3, [sp, #4]
 800619e:	a902      	add	r1, sp, #8
 80061a0:	f001 fc04 	bl	80079ac <_svfiprintf_r>
 80061a4:	9b02      	ldr	r3, [sp, #8]
 80061a6:	2200      	movs	r2, #0
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	b01c      	add	sp, #112	; 0x70
 80061ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80061b0:	b003      	add	sp, #12
 80061b2:	4770      	bx	lr
 80061b4:	2000000c 	.word	0x2000000c
 80061b8:	ffff0208 	.word	0xffff0208

080061bc <_strtol_l.constprop.0>:
 80061bc:	2b01      	cmp	r3, #1
 80061be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061c2:	d001      	beq.n	80061c8 <_strtol_l.constprop.0+0xc>
 80061c4:	2b24      	cmp	r3, #36	; 0x24
 80061c6:	d906      	bls.n	80061d6 <_strtol_l.constprop.0+0x1a>
 80061c8:	f7ff fb3c 	bl	8005844 <__errno>
 80061cc:	2316      	movs	r3, #22
 80061ce:	6003      	str	r3, [r0, #0]
 80061d0:	2000      	movs	r0, #0
 80061d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80062bc <_strtol_l.constprop.0+0x100>
 80061da:	460d      	mov	r5, r1
 80061dc:	462e      	mov	r6, r5
 80061de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80061e6:	f017 0708 	ands.w	r7, r7, #8
 80061ea:	d1f7      	bne.n	80061dc <_strtol_l.constprop.0+0x20>
 80061ec:	2c2d      	cmp	r4, #45	; 0x2d
 80061ee:	d132      	bne.n	8006256 <_strtol_l.constprop.0+0x9a>
 80061f0:	782c      	ldrb	r4, [r5, #0]
 80061f2:	2701      	movs	r7, #1
 80061f4:	1cb5      	adds	r5, r6, #2
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d05b      	beq.n	80062b2 <_strtol_l.constprop.0+0xf6>
 80061fa:	2b10      	cmp	r3, #16
 80061fc:	d109      	bne.n	8006212 <_strtol_l.constprop.0+0x56>
 80061fe:	2c30      	cmp	r4, #48	; 0x30
 8006200:	d107      	bne.n	8006212 <_strtol_l.constprop.0+0x56>
 8006202:	782c      	ldrb	r4, [r5, #0]
 8006204:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006208:	2c58      	cmp	r4, #88	; 0x58
 800620a:	d14d      	bne.n	80062a8 <_strtol_l.constprop.0+0xec>
 800620c:	786c      	ldrb	r4, [r5, #1]
 800620e:	2310      	movs	r3, #16
 8006210:	3502      	adds	r5, #2
 8006212:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006216:	f108 38ff 	add.w	r8, r8, #4294967295
 800621a:	f04f 0c00 	mov.w	ip, #0
 800621e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006222:	4666      	mov	r6, ip
 8006224:	fb03 8a19 	mls	sl, r3, r9, r8
 8006228:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800622c:	f1be 0f09 	cmp.w	lr, #9
 8006230:	d816      	bhi.n	8006260 <_strtol_l.constprop.0+0xa4>
 8006232:	4674      	mov	r4, lr
 8006234:	42a3      	cmp	r3, r4
 8006236:	dd24      	ble.n	8006282 <_strtol_l.constprop.0+0xc6>
 8006238:	f1bc 0f00 	cmp.w	ip, #0
 800623c:	db1e      	blt.n	800627c <_strtol_l.constprop.0+0xc0>
 800623e:	45b1      	cmp	r9, r6
 8006240:	d31c      	bcc.n	800627c <_strtol_l.constprop.0+0xc0>
 8006242:	d101      	bne.n	8006248 <_strtol_l.constprop.0+0x8c>
 8006244:	45a2      	cmp	sl, r4
 8006246:	db19      	blt.n	800627c <_strtol_l.constprop.0+0xc0>
 8006248:	fb06 4603 	mla	r6, r6, r3, r4
 800624c:	f04f 0c01 	mov.w	ip, #1
 8006250:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006254:	e7e8      	b.n	8006228 <_strtol_l.constprop.0+0x6c>
 8006256:	2c2b      	cmp	r4, #43	; 0x2b
 8006258:	bf04      	itt	eq
 800625a:	782c      	ldrbeq	r4, [r5, #0]
 800625c:	1cb5      	addeq	r5, r6, #2
 800625e:	e7ca      	b.n	80061f6 <_strtol_l.constprop.0+0x3a>
 8006260:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006264:	f1be 0f19 	cmp.w	lr, #25
 8006268:	d801      	bhi.n	800626e <_strtol_l.constprop.0+0xb2>
 800626a:	3c37      	subs	r4, #55	; 0x37
 800626c:	e7e2      	b.n	8006234 <_strtol_l.constprop.0+0x78>
 800626e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006272:	f1be 0f19 	cmp.w	lr, #25
 8006276:	d804      	bhi.n	8006282 <_strtol_l.constprop.0+0xc6>
 8006278:	3c57      	subs	r4, #87	; 0x57
 800627a:	e7db      	b.n	8006234 <_strtol_l.constprop.0+0x78>
 800627c:	f04f 3cff 	mov.w	ip, #4294967295
 8006280:	e7e6      	b.n	8006250 <_strtol_l.constprop.0+0x94>
 8006282:	f1bc 0f00 	cmp.w	ip, #0
 8006286:	da05      	bge.n	8006294 <_strtol_l.constprop.0+0xd8>
 8006288:	2322      	movs	r3, #34	; 0x22
 800628a:	6003      	str	r3, [r0, #0]
 800628c:	4646      	mov	r6, r8
 800628e:	b942      	cbnz	r2, 80062a2 <_strtol_l.constprop.0+0xe6>
 8006290:	4630      	mov	r0, r6
 8006292:	e79e      	b.n	80061d2 <_strtol_l.constprop.0+0x16>
 8006294:	b107      	cbz	r7, 8006298 <_strtol_l.constprop.0+0xdc>
 8006296:	4276      	negs	r6, r6
 8006298:	2a00      	cmp	r2, #0
 800629a:	d0f9      	beq.n	8006290 <_strtol_l.constprop.0+0xd4>
 800629c:	f1bc 0f00 	cmp.w	ip, #0
 80062a0:	d000      	beq.n	80062a4 <_strtol_l.constprop.0+0xe8>
 80062a2:	1e69      	subs	r1, r5, #1
 80062a4:	6011      	str	r1, [r2, #0]
 80062a6:	e7f3      	b.n	8006290 <_strtol_l.constprop.0+0xd4>
 80062a8:	2430      	movs	r4, #48	; 0x30
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1b1      	bne.n	8006212 <_strtol_l.constprop.0+0x56>
 80062ae:	2308      	movs	r3, #8
 80062b0:	e7af      	b.n	8006212 <_strtol_l.constprop.0+0x56>
 80062b2:	2c30      	cmp	r4, #48	; 0x30
 80062b4:	d0a5      	beq.n	8006202 <_strtol_l.constprop.0+0x46>
 80062b6:	230a      	movs	r3, #10
 80062b8:	e7ab      	b.n	8006212 <_strtol_l.constprop.0+0x56>
 80062ba:	bf00      	nop
 80062bc:	08008851 	.word	0x08008851

080062c0 <strtol>:
 80062c0:	4613      	mov	r3, r2
 80062c2:	460a      	mov	r2, r1
 80062c4:	4601      	mov	r1, r0
 80062c6:	4802      	ldr	r0, [pc, #8]	; (80062d0 <strtol+0x10>)
 80062c8:	6800      	ldr	r0, [r0, #0]
 80062ca:	f7ff bf77 	b.w	80061bc <_strtol_l.constprop.0>
 80062ce:	bf00      	nop
 80062d0:	2000000c 	.word	0x2000000c

080062d4 <quorem>:
 80062d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d8:	6903      	ldr	r3, [r0, #16]
 80062da:	690c      	ldr	r4, [r1, #16]
 80062dc:	42a3      	cmp	r3, r4
 80062de:	4607      	mov	r7, r0
 80062e0:	f2c0 8081 	blt.w	80063e6 <quorem+0x112>
 80062e4:	3c01      	subs	r4, #1
 80062e6:	f101 0814 	add.w	r8, r1, #20
 80062ea:	f100 0514 	add.w	r5, r0, #20
 80062ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062f2:	9301      	str	r3, [sp, #4]
 80062f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80062f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062fc:	3301      	adds	r3, #1
 80062fe:	429a      	cmp	r2, r3
 8006300:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006304:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006308:	fbb2 f6f3 	udiv	r6, r2, r3
 800630c:	d331      	bcc.n	8006372 <quorem+0x9e>
 800630e:	f04f 0e00 	mov.w	lr, #0
 8006312:	4640      	mov	r0, r8
 8006314:	46ac      	mov	ip, r5
 8006316:	46f2      	mov	sl, lr
 8006318:	f850 2b04 	ldr.w	r2, [r0], #4
 800631c:	b293      	uxth	r3, r2
 800631e:	fb06 e303 	mla	r3, r6, r3, lr
 8006322:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006326:	b29b      	uxth	r3, r3
 8006328:	ebaa 0303 	sub.w	r3, sl, r3
 800632c:	f8dc a000 	ldr.w	sl, [ip]
 8006330:	0c12      	lsrs	r2, r2, #16
 8006332:	fa13 f38a 	uxtah	r3, r3, sl
 8006336:	fb06 e202 	mla	r2, r6, r2, lr
 800633a:	9300      	str	r3, [sp, #0]
 800633c:	9b00      	ldr	r3, [sp, #0]
 800633e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006342:	b292      	uxth	r2, r2
 8006344:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006348:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800634c:	f8bd 3000 	ldrh.w	r3, [sp]
 8006350:	4581      	cmp	r9, r0
 8006352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006356:	f84c 3b04 	str.w	r3, [ip], #4
 800635a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800635e:	d2db      	bcs.n	8006318 <quorem+0x44>
 8006360:	f855 300b 	ldr.w	r3, [r5, fp]
 8006364:	b92b      	cbnz	r3, 8006372 <quorem+0x9e>
 8006366:	9b01      	ldr	r3, [sp, #4]
 8006368:	3b04      	subs	r3, #4
 800636a:	429d      	cmp	r5, r3
 800636c:	461a      	mov	r2, r3
 800636e:	d32e      	bcc.n	80063ce <quorem+0xfa>
 8006370:	613c      	str	r4, [r7, #16]
 8006372:	4638      	mov	r0, r7
 8006374:	f001 f8c6 	bl	8007504 <__mcmp>
 8006378:	2800      	cmp	r0, #0
 800637a:	db24      	blt.n	80063c6 <quorem+0xf2>
 800637c:	3601      	adds	r6, #1
 800637e:	4628      	mov	r0, r5
 8006380:	f04f 0c00 	mov.w	ip, #0
 8006384:	f858 2b04 	ldr.w	r2, [r8], #4
 8006388:	f8d0 e000 	ldr.w	lr, [r0]
 800638c:	b293      	uxth	r3, r2
 800638e:	ebac 0303 	sub.w	r3, ip, r3
 8006392:	0c12      	lsrs	r2, r2, #16
 8006394:	fa13 f38e 	uxtah	r3, r3, lr
 8006398:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800639c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80063a6:	45c1      	cmp	r9, r8
 80063a8:	f840 3b04 	str.w	r3, [r0], #4
 80063ac:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80063b0:	d2e8      	bcs.n	8006384 <quorem+0xb0>
 80063b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80063b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80063ba:	b922      	cbnz	r2, 80063c6 <quorem+0xf2>
 80063bc:	3b04      	subs	r3, #4
 80063be:	429d      	cmp	r5, r3
 80063c0:	461a      	mov	r2, r3
 80063c2:	d30a      	bcc.n	80063da <quorem+0x106>
 80063c4:	613c      	str	r4, [r7, #16]
 80063c6:	4630      	mov	r0, r6
 80063c8:	b003      	add	sp, #12
 80063ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063ce:	6812      	ldr	r2, [r2, #0]
 80063d0:	3b04      	subs	r3, #4
 80063d2:	2a00      	cmp	r2, #0
 80063d4:	d1cc      	bne.n	8006370 <quorem+0x9c>
 80063d6:	3c01      	subs	r4, #1
 80063d8:	e7c7      	b.n	800636a <quorem+0x96>
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	3b04      	subs	r3, #4
 80063de:	2a00      	cmp	r2, #0
 80063e0:	d1f0      	bne.n	80063c4 <quorem+0xf0>
 80063e2:	3c01      	subs	r4, #1
 80063e4:	e7eb      	b.n	80063be <quorem+0xea>
 80063e6:	2000      	movs	r0, #0
 80063e8:	e7ee      	b.n	80063c8 <quorem+0xf4>
 80063ea:	0000      	movs	r0, r0
 80063ec:	0000      	movs	r0, r0
	...

080063f0 <_dtoa_r>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	ed2d 8b04 	vpush	{d8-d9}
 80063f8:	ec57 6b10 	vmov	r6, r7, d0
 80063fc:	b093      	sub	sp, #76	; 0x4c
 80063fe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006400:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006404:	9106      	str	r1, [sp, #24]
 8006406:	ee10 aa10 	vmov	sl, s0
 800640a:	4604      	mov	r4, r0
 800640c:	9209      	str	r2, [sp, #36]	; 0x24
 800640e:	930c      	str	r3, [sp, #48]	; 0x30
 8006410:	46bb      	mov	fp, r7
 8006412:	b975      	cbnz	r5, 8006432 <_dtoa_r+0x42>
 8006414:	2010      	movs	r0, #16
 8006416:	f000 fddd 	bl	8006fd4 <malloc>
 800641a:	4602      	mov	r2, r0
 800641c:	6260      	str	r0, [r4, #36]	; 0x24
 800641e:	b920      	cbnz	r0, 800642a <_dtoa_r+0x3a>
 8006420:	4ba7      	ldr	r3, [pc, #668]	; (80066c0 <_dtoa_r+0x2d0>)
 8006422:	21ea      	movs	r1, #234	; 0xea
 8006424:	48a7      	ldr	r0, [pc, #668]	; (80066c4 <_dtoa_r+0x2d4>)
 8006426:	f001 fbd1 	bl	8007bcc <__assert_func>
 800642a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800642e:	6005      	str	r5, [r0, #0]
 8006430:	60c5      	str	r5, [r0, #12]
 8006432:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006434:	6819      	ldr	r1, [r3, #0]
 8006436:	b151      	cbz	r1, 800644e <_dtoa_r+0x5e>
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	604a      	str	r2, [r1, #4]
 800643c:	2301      	movs	r3, #1
 800643e:	4093      	lsls	r3, r2
 8006440:	608b      	str	r3, [r1, #8]
 8006442:	4620      	mov	r0, r4
 8006444:	f000 fe1c 	bl	8007080 <_Bfree>
 8006448:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]
 800644e:	1e3b      	subs	r3, r7, #0
 8006450:	bfaa      	itet	ge
 8006452:	2300      	movge	r3, #0
 8006454:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8006458:	f8c8 3000 	strge.w	r3, [r8]
 800645c:	4b9a      	ldr	r3, [pc, #616]	; (80066c8 <_dtoa_r+0x2d8>)
 800645e:	bfbc      	itt	lt
 8006460:	2201      	movlt	r2, #1
 8006462:	f8c8 2000 	strlt.w	r2, [r8]
 8006466:	ea33 030b 	bics.w	r3, r3, fp
 800646a:	d11b      	bne.n	80064a4 <_dtoa_r+0xb4>
 800646c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800646e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006472:	6013      	str	r3, [r2, #0]
 8006474:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006478:	4333      	orrs	r3, r6
 800647a:	f000 8592 	beq.w	8006fa2 <_dtoa_r+0xbb2>
 800647e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006480:	b963      	cbnz	r3, 800649c <_dtoa_r+0xac>
 8006482:	4b92      	ldr	r3, [pc, #584]	; (80066cc <_dtoa_r+0x2dc>)
 8006484:	e022      	b.n	80064cc <_dtoa_r+0xdc>
 8006486:	4b92      	ldr	r3, [pc, #584]	; (80066d0 <_dtoa_r+0x2e0>)
 8006488:	9301      	str	r3, [sp, #4]
 800648a:	3308      	adds	r3, #8
 800648c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800648e:	6013      	str	r3, [r2, #0]
 8006490:	9801      	ldr	r0, [sp, #4]
 8006492:	b013      	add	sp, #76	; 0x4c
 8006494:	ecbd 8b04 	vpop	{d8-d9}
 8006498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800649c:	4b8b      	ldr	r3, [pc, #556]	; (80066cc <_dtoa_r+0x2dc>)
 800649e:	9301      	str	r3, [sp, #4]
 80064a0:	3303      	adds	r3, #3
 80064a2:	e7f3      	b.n	800648c <_dtoa_r+0x9c>
 80064a4:	2200      	movs	r2, #0
 80064a6:	2300      	movs	r3, #0
 80064a8:	4650      	mov	r0, sl
 80064aa:	4659      	mov	r1, fp
 80064ac:	f7fa fb14 	bl	8000ad8 <__aeabi_dcmpeq>
 80064b0:	ec4b ab19 	vmov	d9, sl, fp
 80064b4:	4680      	mov	r8, r0
 80064b6:	b158      	cbz	r0, 80064d0 <_dtoa_r+0xe0>
 80064b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80064ba:	2301      	movs	r3, #1
 80064bc:	6013      	str	r3, [r2, #0]
 80064be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	f000 856b 	beq.w	8006f9c <_dtoa_r+0xbac>
 80064c6:	4883      	ldr	r0, [pc, #524]	; (80066d4 <_dtoa_r+0x2e4>)
 80064c8:	6018      	str	r0, [r3, #0]
 80064ca:	1e43      	subs	r3, r0, #1
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	e7df      	b.n	8006490 <_dtoa_r+0xa0>
 80064d0:	ec4b ab10 	vmov	d0, sl, fp
 80064d4:	aa10      	add	r2, sp, #64	; 0x40
 80064d6:	a911      	add	r1, sp, #68	; 0x44
 80064d8:	4620      	mov	r0, r4
 80064da:	f001 f8b9 	bl	8007650 <__d2b>
 80064de:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80064e2:	ee08 0a10 	vmov	s16, r0
 80064e6:	2d00      	cmp	r5, #0
 80064e8:	f000 8084 	beq.w	80065f4 <_dtoa_r+0x204>
 80064ec:	ee19 3a90 	vmov	r3, s19
 80064f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064f4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80064f8:	4656      	mov	r6, sl
 80064fa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80064fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006502:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8006506:	4b74      	ldr	r3, [pc, #464]	; (80066d8 <_dtoa_r+0x2e8>)
 8006508:	2200      	movs	r2, #0
 800650a:	4630      	mov	r0, r6
 800650c:	4639      	mov	r1, r7
 800650e:	f7f9 fec3 	bl	8000298 <__aeabi_dsub>
 8006512:	a365      	add	r3, pc, #404	; (adr r3, 80066a8 <_dtoa_r+0x2b8>)
 8006514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006518:	f7fa f876 	bl	8000608 <__aeabi_dmul>
 800651c:	a364      	add	r3, pc, #400	; (adr r3, 80066b0 <_dtoa_r+0x2c0>)
 800651e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006522:	f7f9 febb 	bl	800029c <__adddf3>
 8006526:	4606      	mov	r6, r0
 8006528:	4628      	mov	r0, r5
 800652a:	460f      	mov	r7, r1
 800652c:	f7fa f802 	bl	8000534 <__aeabi_i2d>
 8006530:	a361      	add	r3, pc, #388	; (adr r3, 80066b8 <_dtoa_r+0x2c8>)
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f7fa f867 	bl	8000608 <__aeabi_dmul>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4630      	mov	r0, r6
 8006540:	4639      	mov	r1, r7
 8006542:	f7f9 feab 	bl	800029c <__adddf3>
 8006546:	4606      	mov	r6, r0
 8006548:	460f      	mov	r7, r1
 800654a:	f7fa fb0d 	bl	8000b68 <__aeabi_d2iz>
 800654e:	2200      	movs	r2, #0
 8006550:	9000      	str	r0, [sp, #0]
 8006552:	2300      	movs	r3, #0
 8006554:	4630      	mov	r0, r6
 8006556:	4639      	mov	r1, r7
 8006558:	f7fa fac8 	bl	8000aec <__aeabi_dcmplt>
 800655c:	b150      	cbz	r0, 8006574 <_dtoa_r+0x184>
 800655e:	9800      	ldr	r0, [sp, #0]
 8006560:	f7f9 ffe8 	bl	8000534 <__aeabi_i2d>
 8006564:	4632      	mov	r2, r6
 8006566:	463b      	mov	r3, r7
 8006568:	f7fa fab6 	bl	8000ad8 <__aeabi_dcmpeq>
 800656c:	b910      	cbnz	r0, 8006574 <_dtoa_r+0x184>
 800656e:	9b00      	ldr	r3, [sp, #0]
 8006570:	3b01      	subs	r3, #1
 8006572:	9300      	str	r3, [sp, #0]
 8006574:	9b00      	ldr	r3, [sp, #0]
 8006576:	2b16      	cmp	r3, #22
 8006578:	d85a      	bhi.n	8006630 <_dtoa_r+0x240>
 800657a:	9a00      	ldr	r2, [sp, #0]
 800657c:	4b57      	ldr	r3, [pc, #348]	; (80066dc <_dtoa_r+0x2ec>)
 800657e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006582:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006586:	ec51 0b19 	vmov	r0, r1, d9
 800658a:	f7fa faaf 	bl	8000aec <__aeabi_dcmplt>
 800658e:	2800      	cmp	r0, #0
 8006590:	d050      	beq.n	8006634 <_dtoa_r+0x244>
 8006592:	9b00      	ldr	r3, [sp, #0]
 8006594:	3b01      	subs	r3, #1
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	2300      	movs	r3, #0
 800659a:	930b      	str	r3, [sp, #44]	; 0x2c
 800659c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800659e:	1b5d      	subs	r5, r3, r5
 80065a0:	1e6b      	subs	r3, r5, #1
 80065a2:	9305      	str	r3, [sp, #20]
 80065a4:	bf45      	ittet	mi
 80065a6:	f1c5 0301 	rsbmi	r3, r5, #1
 80065aa:	9304      	strmi	r3, [sp, #16]
 80065ac:	2300      	movpl	r3, #0
 80065ae:	2300      	movmi	r3, #0
 80065b0:	bf4c      	ite	mi
 80065b2:	9305      	strmi	r3, [sp, #20]
 80065b4:	9304      	strpl	r3, [sp, #16]
 80065b6:	9b00      	ldr	r3, [sp, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	db3d      	blt.n	8006638 <_dtoa_r+0x248>
 80065bc:	9b05      	ldr	r3, [sp, #20]
 80065be:	9a00      	ldr	r2, [sp, #0]
 80065c0:	920a      	str	r2, [sp, #40]	; 0x28
 80065c2:	4413      	add	r3, r2
 80065c4:	9305      	str	r3, [sp, #20]
 80065c6:	2300      	movs	r3, #0
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	9b06      	ldr	r3, [sp, #24]
 80065cc:	2b09      	cmp	r3, #9
 80065ce:	f200 8089 	bhi.w	80066e4 <_dtoa_r+0x2f4>
 80065d2:	2b05      	cmp	r3, #5
 80065d4:	bfc4      	itt	gt
 80065d6:	3b04      	subgt	r3, #4
 80065d8:	9306      	strgt	r3, [sp, #24]
 80065da:	9b06      	ldr	r3, [sp, #24]
 80065dc:	f1a3 0302 	sub.w	r3, r3, #2
 80065e0:	bfcc      	ite	gt
 80065e2:	2500      	movgt	r5, #0
 80065e4:	2501      	movle	r5, #1
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	f200 8087 	bhi.w	80066fa <_dtoa_r+0x30a>
 80065ec:	e8df f003 	tbb	[pc, r3]
 80065f0:	59383a2d 	.word	0x59383a2d
 80065f4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80065f8:	441d      	add	r5, r3
 80065fa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80065fe:	2b20      	cmp	r3, #32
 8006600:	bfc1      	itttt	gt
 8006602:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006606:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800660a:	fa0b f303 	lslgt.w	r3, fp, r3
 800660e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8006612:	bfda      	itte	le
 8006614:	f1c3 0320 	rsble	r3, r3, #32
 8006618:	fa06 f003 	lslle.w	r0, r6, r3
 800661c:	4318      	orrgt	r0, r3
 800661e:	f7f9 ff79 	bl	8000514 <__aeabi_ui2d>
 8006622:	2301      	movs	r3, #1
 8006624:	4606      	mov	r6, r0
 8006626:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800662a:	3d01      	subs	r5, #1
 800662c:	930e      	str	r3, [sp, #56]	; 0x38
 800662e:	e76a      	b.n	8006506 <_dtoa_r+0x116>
 8006630:	2301      	movs	r3, #1
 8006632:	e7b2      	b.n	800659a <_dtoa_r+0x1aa>
 8006634:	900b      	str	r0, [sp, #44]	; 0x2c
 8006636:	e7b1      	b.n	800659c <_dtoa_r+0x1ac>
 8006638:	9b04      	ldr	r3, [sp, #16]
 800663a:	9a00      	ldr	r2, [sp, #0]
 800663c:	1a9b      	subs	r3, r3, r2
 800663e:	9304      	str	r3, [sp, #16]
 8006640:	4253      	negs	r3, r2
 8006642:	9307      	str	r3, [sp, #28]
 8006644:	2300      	movs	r3, #0
 8006646:	930a      	str	r3, [sp, #40]	; 0x28
 8006648:	e7bf      	b.n	80065ca <_dtoa_r+0x1da>
 800664a:	2300      	movs	r3, #0
 800664c:	9308      	str	r3, [sp, #32]
 800664e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006650:	2b00      	cmp	r3, #0
 8006652:	dc55      	bgt.n	8006700 <_dtoa_r+0x310>
 8006654:	2301      	movs	r3, #1
 8006656:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800665a:	461a      	mov	r2, r3
 800665c:	9209      	str	r2, [sp, #36]	; 0x24
 800665e:	e00c      	b.n	800667a <_dtoa_r+0x28a>
 8006660:	2301      	movs	r3, #1
 8006662:	e7f3      	b.n	800664c <_dtoa_r+0x25c>
 8006664:	2300      	movs	r3, #0
 8006666:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006668:	9308      	str	r3, [sp, #32]
 800666a:	9b00      	ldr	r3, [sp, #0]
 800666c:	4413      	add	r3, r2
 800666e:	9302      	str	r3, [sp, #8]
 8006670:	3301      	adds	r3, #1
 8006672:	2b01      	cmp	r3, #1
 8006674:	9303      	str	r3, [sp, #12]
 8006676:	bfb8      	it	lt
 8006678:	2301      	movlt	r3, #1
 800667a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800667c:	2200      	movs	r2, #0
 800667e:	6042      	str	r2, [r0, #4]
 8006680:	2204      	movs	r2, #4
 8006682:	f102 0614 	add.w	r6, r2, #20
 8006686:	429e      	cmp	r6, r3
 8006688:	6841      	ldr	r1, [r0, #4]
 800668a:	d93d      	bls.n	8006708 <_dtoa_r+0x318>
 800668c:	4620      	mov	r0, r4
 800668e:	f000 fcb7 	bl	8007000 <_Balloc>
 8006692:	9001      	str	r0, [sp, #4]
 8006694:	2800      	cmp	r0, #0
 8006696:	d13b      	bne.n	8006710 <_dtoa_r+0x320>
 8006698:	4b11      	ldr	r3, [pc, #68]	; (80066e0 <_dtoa_r+0x2f0>)
 800669a:	4602      	mov	r2, r0
 800669c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80066a0:	e6c0      	b.n	8006424 <_dtoa_r+0x34>
 80066a2:	2301      	movs	r3, #1
 80066a4:	e7df      	b.n	8006666 <_dtoa_r+0x276>
 80066a6:	bf00      	nop
 80066a8:	636f4361 	.word	0x636f4361
 80066ac:	3fd287a7 	.word	0x3fd287a7
 80066b0:	8b60c8b3 	.word	0x8b60c8b3
 80066b4:	3fc68a28 	.word	0x3fc68a28
 80066b8:	509f79fb 	.word	0x509f79fb
 80066bc:	3fd34413 	.word	0x3fd34413
 80066c0:	0800895e 	.word	0x0800895e
 80066c4:	08008975 	.word	0x08008975
 80066c8:	7ff00000 	.word	0x7ff00000
 80066cc:	0800895a 	.word	0x0800895a
 80066d0:	08008951 	.word	0x08008951
 80066d4:	0800882d 	.word	0x0800882d
 80066d8:	3ff80000 	.word	0x3ff80000
 80066dc:	08008a68 	.word	0x08008a68
 80066e0:	080089d0 	.word	0x080089d0
 80066e4:	2501      	movs	r5, #1
 80066e6:	2300      	movs	r3, #0
 80066e8:	9306      	str	r3, [sp, #24]
 80066ea:	9508      	str	r5, [sp, #32]
 80066ec:	f04f 33ff 	mov.w	r3, #4294967295
 80066f0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80066f4:	2200      	movs	r2, #0
 80066f6:	2312      	movs	r3, #18
 80066f8:	e7b0      	b.n	800665c <_dtoa_r+0x26c>
 80066fa:	2301      	movs	r3, #1
 80066fc:	9308      	str	r3, [sp, #32]
 80066fe:	e7f5      	b.n	80066ec <_dtoa_r+0x2fc>
 8006700:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006702:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006706:	e7b8      	b.n	800667a <_dtoa_r+0x28a>
 8006708:	3101      	adds	r1, #1
 800670a:	6041      	str	r1, [r0, #4]
 800670c:	0052      	lsls	r2, r2, #1
 800670e:	e7b8      	b.n	8006682 <_dtoa_r+0x292>
 8006710:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006712:	9a01      	ldr	r2, [sp, #4]
 8006714:	601a      	str	r2, [r3, #0]
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	2b0e      	cmp	r3, #14
 800671a:	f200 809d 	bhi.w	8006858 <_dtoa_r+0x468>
 800671e:	2d00      	cmp	r5, #0
 8006720:	f000 809a 	beq.w	8006858 <_dtoa_r+0x468>
 8006724:	9b00      	ldr	r3, [sp, #0]
 8006726:	2b00      	cmp	r3, #0
 8006728:	dd32      	ble.n	8006790 <_dtoa_r+0x3a0>
 800672a:	4ab7      	ldr	r2, [pc, #732]	; (8006a08 <_dtoa_r+0x618>)
 800672c:	f003 030f 	and.w	r3, r3, #15
 8006730:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006734:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006738:	9b00      	ldr	r3, [sp, #0]
 800673a:	05d8      	lsls	r0, r3, #23
 800673c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006740:	d516      	bpl.n	8006770 <_dtoa_r+0x380>
 8006742:	4bb2      	ldr	r3, [pc, #712]	; (8006a0c <_dtoa_r+0x61c>)
 8006744:	ec51 0b19 	vmov	r0, r1, d9
 8006748:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800674c:	f7fa f886 	bl	800085c <__aeabi_ddiv>
 8006750:	f007 070f 	and.w	r7, r7, #15
 8006754:	4682      	mov	sl, r0
 8006756:	468b      	mov	fp, r1
 8006758:	2503      	movs	r5, #3
 800675a:	4eac      	ldr	r6, [pc, #688]	; (8006a0c <_dtoa_r+0x61c>)
 800675c:	b957      	cbnz	r7, 8006774 <_dtoa_r+0x384>
 800675e:	4642      	mov	r2, r8
 8006760:	464b      	mov	r3, r9
 8006762:	4650      	mov	r0, sl
 8006764:	4659      	mov	r1, fp
 8006766:	f7fa f879 	bl	800085c <__aeabi_ddiv>
 800676a:	4682      	mov	sl, r0
 800676c:	468b      	mov	fp, r1
 800676e:	e028      	b.n	80067c2 <_dtoa_r+0x3d2>
 8006770:	2502      	movs	r5, #2
 8006772:	e7f2      	b.n	800675a <_dtoa_r+0x36a>
 8006774:	07f9      	lsls	r1, r7, #31
 8006776:	d508      	bpl.n	800678a <_dtoa_r+0x39a>
 8006778:	4640      	mov	r0, r8
 800677a:	4649      	mov	r1, r9
 800677c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006780:	f7f9 ff42 	bl	8000608 <__aeabi_dmul>
 8006784:	3501      	adds	r5, #1
 8006786:	4680      	mov	r8, r0
 8006788:	4689      	mov	r9, r1
 800678a:	107f      	asrs	r7, r7, #1
 800678c:	3608      	adds	r6, #8
 800678e:	e7e5      	b.n	800675c <_dtoa_r+0x36c>
 8006790:	f000 809b 	beq.w	80068ca <_dtoa_r+0x4da>
 8006794:	9b00      	ldr	r3, [sp, #0]
 8006796:	4f9d      	ldr	r7, [pc, #628]	; (8006a0c <_dtoa_r+0x61c>)
 8006798:	425e      	negs	r6, r3
 800679a:	4b9b      	ldr	r3, [pc, #620]	; (8006a08 <_dtoa_r+0x618>)
 800679c:	f006 020f 	and.w	r2, r6, #15
 80067a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a8:	ec51 0b19 	vmov	r0, r1, d9
 80067ac:	f7f9 ff2c 	bl	8000608 <__aeabi_dmul>
 80067b0:	1136      	asrs	r6, r6, #4
 80067b2:	4682      	mov	sl, r0
 80067b4:	468b      	mov	fp, r1
 80067b6:	2300      	movs	r3, #0
 80067b8:	2502      	movs	r5, #2
 80067ba:	2e00      	cmp	r6, #0
 80067bc:	d17a      	bne.n	80068b4 <_dtoa_r+0x4c4>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1d3      	bne.n	800676a <_dtoa_r+0x37a>
 80067c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 8082 	beq.w	80068ce <_dtoa_r+0x4de>
 80067ca:	4b91      	ldr	r3, [pc, #580]	; (8006a10 <_dtoa_r+0x620>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	4650      	mov	r0, sl
 80067d0:	4659      	mov	r1, fp
 80067d2:	f7fa f98b 	bl	8000aec <__aeabi_dcmplt>
 80067d6:	2800      	cmp	r0, #0
 80067d8:	d079      	beq.n	80068ce <_dtoa_r+0x4de>
 80067da:	9b03      	ldr	r3, [sp, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d076      	beq.n	80068ce <_dtoa_r+0x4de>
 80067e0:	9b02      	ldr	r3, [sp, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	dd36      	ble.n	8006854 <_dtoa_r+0x464>
 80067e6:	9b00      	ldr	r3, [sp, #0]
 80067e8:	4650      	mov	r0, sl
 80067ea:	4659      	mov	r1, fp
 80067ec:	1e5f      	subs	r7, r3, #1
 80067ee:	2200      	movs	r2, #0
 80067f0:	4b88      	ldr	r3, [pc, #544]	; (8006a14 <_dtoa_r+0x624>)
 80067f2:	f7f9 ff09 	bl	8000608 <__aeabi_dmul>
 80067f6:	9e02      	ldr	r6, [sp, #8]
 80067f8:	4682      	mov	sl, r0
 80067fa:	468b      	mov	fp, r1
 80067fc:	3501      	adds	r5, #1
 80067fe:	4628      	mov	r0, r5
 8006800:	f7f9 fe98 	bl	8000534 <__aeabi_i2d>
 8006804:	4652      	mov	r2, sl
 8006806:	465b      	mov	r3, fp
 8006808:	f7f9 fefe 	bl	8000608 <__aeabi_dmul>
 800680c:	4b82      	ldr	r3, [pc, #520]	; (8006a18 <_dtoa_r+0x628>)
 800680e:	2200      	movs	r2, #0
 8006810:	f7f9 fd44 	bl	800029c <__adddf3>
 8006814:	46d0      	mov	r8, sl
 8006816:	46d9      	mov	r9, fp
 8006818:	4682      	mov	sl, r0
 800681a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800681e:	2e00      	cmp	r6, #0
 8006820:	d158      	bne.n	80068d4 <_dtoa_r+0x4e4>
 8006822:	4b7e      	ldr	r3, [pc, #504]	; (8006a1c <_dtoa_r+0x62c>)
 8006824:	2200      	movs	r2, #0
 8006826:	4640      	mov	r0, r8
 8006828:	4649      	mov	r1, r9
 800682a:	f7f9 fd35 	bl	8000298 <__aeabi_dsub>
 800682e:	4652      	mov	r2, sl
 8006830:	465b      	mov	r3, fp
 8006832:	4680      	mov	r8, r0
 8006834:	4689      	mov	r9, r1
 8006836:	f7fa f977 	bl	8000b28 <__aeabi_dcmpgt>
 800683a:	2800      	cmp	r0, #0
 800683c:	f040 8295 	bne.w	8006d6a <_dtoa_r+0x97a>
 8006840:	4652      	mov	r2, sl
 8006842:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006846:	4640      	mov	r0, r8
 8006848:	4649      	mov	r1, r9
 800684a:	f7fa f94f 	bl	8000aec <__aeabi_dcmplt>
 800684e:	2800      	cmp	r0, #0
 8006850:	f040 8289 	bne.w	8006d66 <_dtoa_r+0x976>
 8006854:	ec5b ab19 	vmov	sl, fp, d9
 8006858:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800685a:	2b00      	cmp	r3, #0
 800685c:	f2c0 8148 	blt.w	8006af0 <_dtoa_r+0x700>
 8006860:	9a00      	ldr	r2, [sp, #0]
 8006862:	2a0e      	cmp	r2, #14
 8006864:	f300 8144 	bgt.w	8006af0 <_dtoa_r+0x700>
 8006868:	4b67      	ldr	r3, [pc, #412]	; (8006a08 <_dtoa_r+0x618>)
 800686a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800686e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	f280 80d5 	bge.w	8006a24 <_dtoa_r+0x634>
 800687a:	9b03      	ldr	r3, [sp, #12]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f300 80d1 	bgt.w	8006a24 <_dtoa_r+0x634>
 8006882:	f040 826f 	bne.w	8006d64 <_dtoa_r+0x974>
 8006886:	4b65      	ldr	r3, [pc, #404]	; (8006a1c <_dtoa_r+0x62c>)
 8006888:	2200      	movs	r2, #0
 800688a:	4640      	mov	r0, r8
 800688c:	4649      	mov	r1, r9
 800688e:	f7f9 febb 	bl	8000608 <__aeabi_dmul>
 8006892:	4652      	mov	r2, sl
 8006894:	465b      	mov	r3, fp
 8006896:	f7fa f93d 	bl	8000b14 <__aeabi_dcmpge>
 800689a:	9e03      	ldr	r6, [sp, #12]
 800689c:	4637      	mov	r7, r6
 800689e:	2800      	cmp	r0, #0
 80068a0:	f040 8245 	bne.w	8006d2e <_dtoa_r+0x93e>
 80068a4:	9d01      	ldr	r5, [sp, #4]
 80068a6:	2331      	movs	r3, #49	; 0x31
 80068a8:	f805 3b01 	strb.w	r3, [r5], #1
 80068ac:	9b00      	ldr	r3, [sp, #0]
 80068ae:	3301      	adds	r3, #1
 80068b0:	9300      	str	r3, [sp, #0]
 80068b2:	e240      	b.n	8006d36 <_dtoa_r+0x946>
 80068b4:	07f2      	lsls	r2, r6, #31
 80068b6:	d505      	bpl.n	80068c4 <_dtoa_r+0x4d4>
 80068b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068bc:	f7f9 fea4 	bl	8000608 <__aeabi_dmul>
 80068c0:	3501      	adds	r5, #1
 80068c2:	2301      	movs	r3, #1
 80068c4:	1076      	asrs	r6, r6, #1
 80068c6:	3708      	adds	r7, #8
 80068c8:	e777      	b.n	80067ba <_dtoa_r+0x3ca>
 80068ca:	2502      	movs	r5, #2
 80068cc:	e779      	b.n	80067c2 <_dtoa_r+0x3d2>
 80068ce:	9f00      	ldr	r7, [sp, #0]
 80068d0:	9e03      	ldr	r6, [sp, #12]
 80068d2:	e794      	b.n	80067fe <_dtoa_r+0x40e>
 80068d4:	9901      	ldr	r1, [sp, #4]
 80068d6:	4b4c      	ldr	r3, [pc, #304]	; (8006a08 <_dtoa_r+0x618>)
 80068d8:	4431      	add	r1, r6
 80068da:	910d      	str	r1, [sp, #52]	; 0x34
 80068dc:	9908      	ldr	r1, [sp, #32]
 80068de:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80068e2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80068e6:	2900      	cmp	r1, #0
 80068e8:	d043      	beq.n	8006972 <_dtoa_r+0x582>
 80068ea:	494d      	ldr	r1, [pc, #308]	; (8006a20 <_dtoa_r+0x630>)
 80068ec:	2000      	movs	r0, #0
 80068ee:	f7f9 ffb5 	bl	800085c <__aeabi_ddiv>
 80068f2:	4652      	mov	r2, sl
 80068f4:	465b      	mov	r3, fp
 80068f6:	f7f9 fccf 	bl	8000298 <__aeabi_dsub>
 80068fa:	9d01      	ldr	r5, [sp, #4]
 80068fc:	4682      	mov	sl, r0
 80068fe:	468b      	mov	fp, r1
 8006900:	4649      	mov	r1, r9
 8006902:	4640      	mov	r0, r8
 8006904:	f7fa f930 	bl	8000b68 <__aeabi_d2iz>
 8006908:	4606      	mov	r6, r0
 800690a:	f7f9 fe13 	bl	8000534 <__aeabi_i2d>
 800690e:	4602      	mov	r2, r0
 8006910:	460b      	mov	r3, r1
 8006912:	4640      	mov	r0, r8
 8006914:	4649      	mov	r1, r9
 8006916:	f7f9 fcbf 	bl	8000298 <__aeabi_dsub>
 800691a:	3630      	adds	r6, #48	; 0x30
 800691c:	f805 6b01 	strb.w	r6, [r5], #1
 8006920:	4652      	mov	r2, sl
 8006922:	465b      	mov	r3, fp
 8006924:	4680      	mov	r8, r0
 8006926:	4689      	mov	r9, r1
 8006928:	f7fa f8e0 	bl	8000aec <__aeabi_dcmplt>
 800692c:	2800      	cmp	r0, #0
 800692e:	d163      	bne.n	80069f8 <_dtoa_r+0x608>
 8006930:	4642      	mov	r2, r8
 8006932:	464b      	mov	r3, r9
 8006934:	4936      	ldr	r1, [pc, #216]	; (8006a10 <_dtoa_r+0x620>)
 8006936:	2000      	movs	r0, #0
 8006938:	f7f9 fcae 	bl	8000298 <__aeabi_dsub>
 800693c:	4652      	mov	r2, sl
 800693e:	465b      	mov	r3, fp
 8006940:	f7fa f8d4 	bl	8000aec <__aeabi_dcmplt>
 8006944:	2800      	cmp	r0, #0
 8006946:	f040 80b5 	bne.w	8006ab4 <_dtoa_r+0x6c4>
 800694a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800694c:	429d      	cmp	r5, r3
 800694e:	d081      	beq.n	8006854 <_dtoa_r+0x464>
 8006950:	4b30      	ldr	r3, [pc, #192]	; (8006a14 <_dtoa_r+0x624>)
 8006952:	2200      	movs	r2, #0
 8006954:	4650      	mov	r0, sl
 8006956:	4659      	mov	r1, fp
 8006958:	f7f9 fe56 	bl	8000608 <__aeabi_dmul>
 800695c:	4b2d      	ldr	r3, [pc, #180]	; (8006a14 <_dtoa_r+0x624>)
 800695e:	4682      	mov	sl, r0
 8006960:	468b      	mov	fp, r1
 8006962:	4640      	mov	r0, r8
 8006964:	4649      	mov	r1, r9
 8006966:	2200      	movs	r2, #0
 8006968:	f7f9 fe4e 	bl	8000608 <__aeabi_dmul>
 800696c:	4680      	mov	r8, r0
 800696e:	4689      	mov	r9, r1
 8006970:	e7c6      	b.n	8006900 <_dtoa_r+0x510>
 8006972:	4650      	mov	r0, sl
 8006974:	4659      	mov	r1, fp
 8006976:	f7f9 fe47 	bl	8000608 <__aeabi_dmul>
 800697a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800697c:	9d01      	ldr	r5, [sp, #4]
 800697e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006980:	4682      	mov	sl, r0
 8006982:	468b      	mov	fp, r1
 8006984:	4649      	mov	r1, r9
 8006986:	4640      	mov	r0, r8
 8006988:	f7fa f8ee 	bl	8000b68 <__aeabi_d2iz>
 800698c:	4606      	mov	r6, r0
 800698e:	f7f9 fdd1 	bl	8000534 <__aeabi_i2d>
 8006992:	3630      	adds	r6, #48	; 0x30
 8006994:	4602      	mov	r2, r0
 8006996:	460b      	mov	r3, r1
 8006998:	4640      	mov	r0, r8
 800699a:	4649      	mov	r1, r9
 800699c:	f7f9 fc7c 	bl	8000298 <__aeabi_dsub>
 80069a0:	f805 6b01 	strb.w	r6, [r5], #1
 80069a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80069a6:	429d      	cmp	r5, r3
 80069a8:	4680      	mov	r8, r0
 80069aa:	4689      	mov	r9, r1
 80069ac:	f04f 0200 	mov.w	r2, #0
 80069b0:	d124      	bne.n	80069fc <_dtoa_r+0x60c>
 80069b2:	4b1b      	ldr	r3, [pc, #108]	; (8006a20 <_dtoa_r+0x630>)
 80069b4:	4650      	mov	r0, sl
 80069b6:	4659      	mov	r1, fp
 80069b8:	f7f9 fc70 	bl	800029c <__adddf3>
 80069bc:	4602      	mov	r2, r0
 80069be:	460b      	mov	r3, r1
 80069c0:	4640      	mov	r0, r8
 80069c2:	4649      	mov	r1, r9
 80069c4:	f7fa f8b0 	bl	8000b28 <__aeabi_dcmpgt>
 80069c8:	2800      	cmp	r0, #0
 80069ca:	d173      	bne.n	8006ab4 <_dtoa_r+0x6c4>
 80069cc:	4652      	mov	r2, sl
 80069ce:	465b      	mov	r3, fp
 80069d0:	4913      	ldr	r1, [pc, #76]	; (8006a20 <_dtoa_r+0x630>)
 80069d2:	2000      	movs	r0, #0
 80069d4:	f7f9 fc60 	bl	8000298 <__aeabi_dsub>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4640      	mov	r0, r8
 80069de:	4649      	mov	r1, r9
 80069e0:	f7fa f884 	bl	8000aec <__aeabi_dcmplt>
 80069e4:	2800      	cmp	r0, #0
 80069e6:	f43f af35 	beq.w	8006854 <_dtoa_r+0x464>
 80069ea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80069ec:	1e6b      	subs	r3, r5, #1
 80069ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80069f0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80069f4:	2b30      	cmp	r3, #48	; 0x30
 80069f6:	d0f8      	beq.n	80069ea <_dtoa_r+0x5fa>
 80069f8:	9700      	str	r7, [sp, #0]
 80069fa:	e049      	b.n	8006a90 <_dtoa_r+0x6a0>
 80069fc:	4b05      	ldr	r3, [pc, #20]	; (8006a14 <_dtoa_r+0x624>)
 80069fe:	f7f9 fe03 	bl	8000608 <__aeabi_dmul>
 8006a02:	4680      	mov	r8, r0
 8006a04:	4689      	mov	r9, r1
 8006a06:	e7bd      	b.n	8006984 <_dtoa_r+0x594>
 8006a08:	08008a68 	.word	0x08008a68
 8006a0c:	08008a40 	.word	0x08008a40
 8006a10:	3ff00000 	.word	0x3ff00000
 8006a14:	40240000 	.word	0x40240000
 8006a18:	401c0000 	.word	0x401c0000
 8006a1c:	40140000 	.word	0x40140000
 8006a20:	3fe00000 	.word	0x3fe00000
 8006a24:	9d01      	ldr	r5, [sp, #4]
 8006a26:	4656      	mov	r6, sl
 8006a28:	465f      	mov	r7, fp
 8006a2a:	4642      	mov	r2, r8
 8006a2c:	464b      	mov	r3, r9
 8006a2e:	4630      	mov	r0, r6
 8006a30:	4639      	mov	r1, r7
 8006a32:	f7f9 ff13 	bl	800085c <__aeabi_ddiv>
 8006a36:	f7fa f897 	bl	8000b68 <__aeabi_d2iz>
 8006a3a:	4682      	mov	sl, r0
 8006a3c:	f7f9 fd7a 	bl	8000534 <__aeabi_i2d>
 8006a40:	4642      	mov	r2, r8
 8006a42:	464b      	mov	r3, r9
 8006a44:	f7f9 fde0 	bl	8000608 <__aeabi_dmul>
 8006a48:	4602      	mov	r2, r0
 8006a4a:	460b      	mov	r3, r1
 8006a4c:	4630      	mov	r0, r6
 8006a4e:	4639      	mov	r1, r7
 8006a50:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006a54:	f7f9 fc20 	bl	8000298 <__aeabi_dsub>
 8006a58:	f805 6b01 	strb.w	r6, [r5], #1
 8006a5c:	9e01      	ldr	r6, [sp, #4]
 8006a5e:	9f03      	ldr	r7, [sp, #12]
 8006a60:	1bae      	subs	r6, r5, r6
 8006a62:	42b7      	cmp	r7, r6
 8006a64:	4602      	mov	r2, r0
 8006a66:	460b      	mov	r3, r1
 8006a68:	d135      	bne.n	8006ad6 <_dtoa_r+0x6e6>
 8006a6a:	f7f9 fc17 	bl	800029c <__adddf3>
 8006a6e:	4642      	mov	r2, r8
 8006a70:	464b      	mov	r3, r9
 8006a72:	4606      	mov	r6, r0
 8006a74:	460f      	mov	r7, r1
 8006a76:	f7fa f857 	bl	8000b28 <__aeabi_dcmpgt>
 8006a7a:	b9d0      	cbnz	r0, 8006ab2 <_dtoa_r+0x6c2>
 8006a7c:	4642      	mov	r2, r8
 8006a7e:	464b      	mov	r3, r9
 8006a80:	4630      	mov	r0, r6
 8006a82:	4639      	mov	r1, r7
 8006a84:	f7fa f828 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a88:	b110      	cbz	r0, 8006a90 <_dtoa_r+0x6a0>
 8006a8a:	f01a 0f01 	tst.w	sl, #1
 8006a8e:	d110      	bne.n	8006ab2 <_dtoa_r+0x6c2>
 8006a90:	4620      	mov	r0, r4
 8006a92:	ee18 1a10 	vmov	r1, s16
 8006a96:	f000 faf3 	bl	8007080 <_Bfree>
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	9800      	ldr	r0, [sp, #0]
 8006a9e:	702b      	strb	r3, [r5, #0]
 8006aa0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006aa2:	3001      	adds	r0, #1
 8006aa4:	6018      	str	r0, [r3, #0]
 8006aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	f43f acf1 	beq.w	8006490 <_dtoa_r+0xa0>
 8006aae:	601d      	str	r5, [r3, #0]
 8006ab0:	e4ee      	b.n	8006490 <_dtoa_r+0xa0>
 8006ab2:	9f00      	ldr	r7, [sp, #0]
 8006ab4:	462b      	mov	r3, r5
 8006ab6:	461d      	mov	r5, r3
 8006ab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006abc:	2a39      	cmp	r2, #57	; 0x39
 8006abe:	d106      	bne.n	8006ace <_dtoa_r+0x6de>
 8006ac0:	9a01      	ldr	r2, [sp, #4]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d1f7      	bne.n	8006ab6 <_dtoa_r+0x6c6>
 8006ac6:	9901      	ldr	r1, [sp, #4]
 8006ac8:	2230      	movs	r2, #48	; 0x30
 8006aca:	3701      	adds	r7, #1
 8006acc:	700a      	strb	r2, [r1, #0]
 8006ace:	781a      	ldrb	r2, [r3, #0]
 8006ad0:	3201      	adds	r2, #1
 8006ad2:	701a      	strb	r2, [r3, #0]
 8006ad4:	e790      	b.n	80069f8 <_dtoa_r+0x608>
 8006ad6:	4ba6      	ldr	r3, [pc, #664]	; (8006d70 <_dtoa_r+0x980>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f7f9 fd95 	bl	8000608 <__aeabi_dmul>
 8006ade:	2200      	movs	r2, #0
 8006ae0:	2300      	movs	r3, #0
 8006ae2:	4606      	mov	r6, r0
 8006ae4:	460f      	mov	r7, r1
 8006ae6:	f7f9 fff7 	bl	8000ad8 <__aeabi_dcmpeq>
 8006aea:	2800      	cmp	r0, #0
 8006aec:	d09d      	beq.n	8006a2a <_dtoa_r+0x63a>
 8006aee:	e7cf      	b.n	8006a90 <_dtoa_r+0x6a0>
 8006af0:	9a08      	ldr	r2, [sp, #32]
 8006af2:	2a00      	cmp	r2, #0
 8006af4:	f000 80d7 	beq.w	8006ca6 <_dtoa_r+0x8b6>
 8006af8:	9a06      	ldr	r2, [sp, #24]
 8006afa:	2a01      	cmp	r2, #1
 8006afc:	f300 80ba 	bgt.w	8006c74 <_dtoa_r+0x884>
 8006b00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006b02:	2a00      	cmp	r2, #0
 8006b04:	f000 80b2 	beq.w	8006c6c <_dtoa_r+0x87c>
 8006b08:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006b0c:	9e07      	ldr	r6, [sp, #28]
 8006b0e:	9d04      	ldr	r5, [sp, #16]
 8006b10:	9a04      	ldr	r2, [sp, #16]
 8006b12:	441a      	add	r2, r3
 8006b14:	9204      	str	r2, [sp, #16]
 8006b16:	9a05      	ldr	r2, [sp, #20]
 8006b18:	2101      	movs	r1, #1
 8006b1a:	441a      	add	r2, r3
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	9205      	str	r2, [sp, #20]
 8006b20:	f000 fb66 	bl	80071f0 <__i2b>
 8006b24:	4607      	mov	r7, r0
 8006b26:	2d00      	cmp	r5, #0
 8006b28:	dd0c      	ble.n	8006b44 <_dtoa_r+0x754>
 8006b2a:	9b05      	ldr	r3, [sp, #20]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd09      	ble.n	8006b44 <_dtoa_r+0x754>
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	9a04      	ldr	r2, [sp, #16]
 8006b34:	bfa8      	it	ge
 8006b36:	462b      	movge	r3, r5
 8006b38:	1ad2      	subs	r2, r2, r3
 8006b3a:	9204      	str	r2, [sp, #16]
 8006b3c:	9a05      	ldr	r2, [sp, #20]
 8006b3e:	1aed      	subs	r5, r5, r3
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	9305      	str	r3, [sp, #20]
 8006b44:	9b07      	ldr	r3, [sp, #28]
 8006b46:	b31b      	cbz	r3, 8006b90 <_dtoa_r+0x7a0>
 8006b48:	9b08      	ldr	r3, [sp, #32]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 80af 	beq.w	8006cae <_dtoa_r+0x8be>
 8006b50:	2e00      	cmp	r6, #0
 8006b52:	dd13      	ble.n	8006b7c <_dtoa_r+0x78c>
 8006b54:	4639      	mov	r1, r7
 8006b56:	4632      	mov	r2, r6
 8006b58:	4620      	mov	r0, r4
 8006b5a:	f000 fc09 	bl	8007370 <__pow5mult>
 8006b5e:	ee18 2a10 	vmov	r2, s16
 8006b62:	4601      	mov	r1, r0
 8006b64:	4607      	mov	r7, r0
 8006b66:	4620      	mov	r0, r4
 8006b68:	f000 fb58 	bl	800721c <__multiply>
 8006b6c:	ee18 1a10 	vmov	r1, s16
 8006b70:	4680      	mov	r8, r0
 8006b72:	4620      	mov	r0, r4
 8006b74:	f000 fa84 	bl	8007080 <_Bfree>
 8006b78:	ee08 8a10 	vmov	s16, r8
 8006b7c:	9b07      	ldr	r3, [sp, #28]
 8006b7e:	1b9a      	subs	r2, r3, r6
 8006b80:	d006      	beq.n	8006b90 <_dtoa_r+0x7a0>
 8006b82:	ee18 1a10 	vmov	r1, s16
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 fbf2 	bl	8007370 <__pow5mult>
 8006b8c:	ee08 0a10 	vmov	s16, r0
 8006b90:	2101      	movs	r1, #1
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 fb2c 	bl	80071f0 <__i2b>
 8006b98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	4606      	mov	r6, r0
 8006b9e:	f340 8088 	ble.w	8006cb2 <_dtoa_r+0x8c2>
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	4601      	mov	r1, r0
 8006ba6:	4620      	mov	r0, r4
 8006ba8:	f000 fbe2 	bl	8007370 <__pow5mult>
 8006bac:	9b06      	ldr	r3, [sp, #24]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	4606      	mov	r6, r0
 8006bb2:	f340 8081 	ble.w	8006cb8 <_dtoa_r+0x8c8>
 8006bb6:	f04f 0800 	mov.w	r8, #0
 8006bba:	6933      	ldr	r3, [r6, #16]
 8006bbc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006bc0:	6918      	ldr	r0, [r3, #16]
 8006bc2:	f000 fac5 	bl	8007150 <__hi0bits>
 8006bc6:	f1c0 0020 	rsb	r0, r0, #32
 8006bca:	9b05      	ldr	r3, [sp, #20]
 8006bcc:	4418      	add	r0, r3
 8006bce:	f010 001f 	ands.w	r0, r0, #31
 8006bd2:	f000 8092 	beq.w	8006cfa <_dtoa_r+0x90a>
 8006bd6:	f1c0 0320 	rsb	r3, r0, #32
 8006bda:	2b04      	cmp	r3, #4
 8006bdc:	f340 808a 	ble.w	8006cf4 <_dtoa_r+0x904>
 8006be0:	f1c0 001c 	rsb	r0, r0, #28
 8006be4:	9b04      	ldr	r3, [sp, #16]
 8006be6:	4403      	add	r3, r0
 8006be8:	9304      	str	r3, [sp, #16]
 8006bea:	9b05      	ldr	r3, [sp, #20]
 8006bec:	4403      	add	r3, r0
 8006bee:	4405      	add	r5, r0
 8006bf0:	9305      	str	r3, [sp, #20]
 8006bf2:	9b04      	ldr	r3, [sp, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	dd07      	ble.n	8006c08 <_dtoa_r+0x818>
 8006bf8:	ee18 1a10 	vmov	r1, s16
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 fc10 	bl	8007424 <__lshift>
 8006c04:	ee08 0a10 	vmov	s16, r0
 8006c08:	9b05      	ldr	r3, [sp, #20]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	dd05      	ble.n	8006c1a <_dtoa_r+0x82a>
 8006c0e:	4631      	mov	r1, r6
 8006c10:	461a      	mov	r2, r3
 8006c12:	4620      	mov	r0, r4
 8006c14:	f000 fc06 	bl	8007424 <__lshift>
 8006c18:	4606      	mov	r6, r0
 8006c1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d06e      	beq.n	8006cfe <_dtoa_r+0x90e>
 8006c20:	ee18 0a10 	vmov	r0, s16
 8006c24:	4631      	mov	r1, r6
 8006c26:	f000 fc6d 	bl	8007504 <__mcmp>
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	da67      	bge.n	8006cfe <_dtoa_r+0x90e>
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	3b01      	subs	r3, #1
 8006c32:	ee18 1a10 	vmov	r1, s16
 8006c36:	9300      	str	r3, [sp, #0]
 8006c38:	220a      	movs	r2, #10
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4620      	mov	r0, r4
 8006c3e:	f000 fa41 	bl	80070c4 <__multadd>
 8006c42:	9b08      	ldr	r3, [sp, #32]
 8006c44:	ee08 0a10 	vmov	s16, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	f000 81b1 	beq.w	8006fb0 <_dtoa_r+0xbc0>
 8006c4e:	2300      	movs	r3, #0
 8006c50:	4639      	mov	r1, r7
 8006c52:	220a      	movs	r2, #10
 8006c54:	4620      	mov	r0, r4
 8006c56:	f000 fa35 	bl	80070c4 <__multadd>
 8006c5a:	9b02      	ldr	r3, [sp, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	4607      	mov	r7, r0
 8006c60:	f300 808e 	bgt.w	8006d80 <_dtoa_r+0x990>
 8006c64:	9b06      	ldr	r3, [sp, #24]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	dc51      	bgt.n	8006d0e <_dtoa_r+0x91e>
 8006c6a:	e089      	b.n	8006d80 <_dtoa_r+0x990>
 8006c6c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c6e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006c72:	e74b      	b.n	8006b0c <_dtoa_r+0x71c>
 8006c74:	9b03      	ldr	r3, [sp, #12]
 8006c76:	1e5e      	subs	r6, r3, #1
 8006c78:	9b07      	ldr	r3, [sp, #28]
 8006c7a:	42b3      	cmp	r3, r6
 8006c7c:	bfbf      	itttt	lt
 8006c7e:	9b07      	ldrlt	r3, [sp, #28]
 8006c80:	9607      	strlt	r6, [sp, #28]
 8006c82:	1af2      	sublt	r2, r6, r3
 8006c84:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8006c86:	bfb6      	itet	lt
 8006c88:	189b      	addlt	r3, r3, r2
 8006c8a:	1b9e      	subge	r6, r3, r6
 8006c8c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006c8e:	9b03      	ldr	r3, [sp, #12]
 8006c90:	bfb8      	it	lt
 8006c92:	2600      	movlt	r6, #0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	bfb7      	itett	lt
 8006c98:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006c9c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006ca0:	1a9d      	sublt	r5, r3, r2
 8006ca2:	2300      	movlt	r3, #0
 8006ca4:	e734      	b.n	8006b10 <_dtoa_r+0x720>
 8006ca6:	9e07      	ldr	r6, [sp, #28]
 8006ca8:	9d04      	ldr	r5, [sp, #16]
 8006caa:	9f08      	ldr	r7, [sp, #32]
 8006cac:	e73b      	b.n	8006b26 <_dtoa_r+0x736>
 8006cae:	9a07      	ldr	r2, [sp, #28]
 8006cb0:	e767      	b.n	8006b82 <_dtoa_r+0x792>
 8006cb2:	9b06      	ldr	r3, [sp, #24]
 8006cb4:	2b01      	cmp	r3, #1
 8006cb6:	dc18      	bgt.n	8006cea <_dtoa_r+0x8fa>
 8006cb8:	f1ba 0f00 	cmp.w	sl, #0
 8006cbc:	d115      	bne.n	8006cea <_dtoa_r+0x8fa>
 8006cbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006cc2:	b993      	cbnz	r3, 8006cea <_dtoa_r+0x8fa>
 8006cc4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006cc8:	0d1b      	lsrs	r3, r3, #20
 8006cca:	051b      	lsls	r3, r3, #20
 8006ccc:	b183      	cbz	r3, 8006cf0 <_dtoa_r+0x900>
 8006cce:	9b04      	ldr	r3, [sp, #16]
 8006cd0:	3301      	adds	r3, #1
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	9b05      	ldr	r3, [sp, #20]
 8006cd6:	3301      	adds	r3, #1
 8006cd8:	9305      	str	r3, [sp, #20]
 8006cda:	f04f 0801 	mov.w	r8, #1
 8006cde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f47f af6a 	bne.w	8006bba <_dtoa_r+0x7ca>
 8006ce6:	2001      	movs	r0, #1
 8006ce8:	e76f      	b.n	8006bca <_dtoa_r+0x7da>
 8006cea:	f04f 0800 	mov.w	r8, #0
 8006cee:	e7f6      	b.n	8006cde <_dtoa_r+0x8ee>
 8006cf0:	4698      	mov	r8, r3
 8006cf2:	e7f4      	b.n	8006cde <_dtoa_r+0x8ee>
 8006cf4:	f43f af7d 	beq.w	8006bf2 <_dtoa_r+0x802>
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	301c      	adds	r0, #28
 8006cfc:	e772      	b.n	8006be4 <_dtoa_r+0x7f4>
 8006cfe:	9b03      	ldr	r3, [sp, #12]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	dc37      	bgt.n	8006d74 <_dtoa_r+0x984>
 8006d04:	9b06      	ldr	r3, [sp, #24]
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	dd34      	ble.n	8006d74 <_dtoa_r+0x984>
 8006d0a:	9b03      	ldr	r3, [sp, #12]
 8006d0c:	9302      	str	r3, [sp, #8]
 8006d0e:	9b02      	ldr	r3, [sp, #8]
 8006d10:	b96b      	cbnz	r3, 8006d2e <_dtoa_r+0x93e>
 8006d12:	4631      	mov	r1, r6
 8006d14:	2205      	movs	r2, #5
 8006d16:	4620      	mov	r0, r4
 8006d18:	f000 f9d4 	bl	80070c4 <__multadd>
 8006d1c:	4601      	mov	r1, r0
 8006d1e:	4606      	mov	r6, r0
 8006d20:	ee18 0a10 	vmov	r0, s16
 8006d24:	f000 fbee 	bl	8007504 <__mcmp>
 8006d28:	2800      	cmp	r0, #0
 8006d2a:	f73f adbb 	bgt.w	80068a4 <_dtoa_r+0x4b4>
 8006d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d30:	9d01      	ldr	r5, [sp, #4]
 8006d32:	43db      	mvns	r3, r3
 8006d34:	9300      	str	r3, [sp, #0]
 8006d36:	f04f 0800 	mov.w	r8, #0
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4620      	mov	r0, r4
 8006d3e:	f000 f99f 	bl	8007080 <_Bfree>
 8006d42:	2f00      	cmp	r7, #0
 8006d44:	f43f aea4 	beq.w	8006a90 <_dtoa_r+0x6a0>
 8006d48:	f1b8 0f00 	cmp.w	r8, #0
 8006d4c:	d005      	beq.n	8006d5a <_dtoa_r+0x96a>
 8006d4e:	45b8      	cmp	r8, r7
 8006d50:	d003      	beq.n	8006d5a <_dtoa_r+0x96a>
 8006d52:	4641      	mov	r1, r8
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 f993 	bl	8007080 <_Bfree>
 8006d5a:	4639      	mov	r1, r7
 8006d5c:	4620      	mov	r0, r4
 8006d5e:	f000 f98f 	bl	8007080 <_Bfree>
 8006d62:	e695      	b.n	8006a90 <_dtoa_r+0x6a0>
 8006d64:	2600      	movs	r6, #0
 8006d66:	4637      	mov	r7, r6
 8006d68:	e7e1      	b.n	8006d2e <_dtoa_r+0x93e>
 8006d6a:	9700      	str	r7, [sp, #0]
 8006d6c:	4637      	mov	r7, r6
 8006d6e:	e599      	b.n	80068a4 <_dtoa_r+0x4b4>
 8006d70:	40240000 	.word	0x40240000
 8006d74:	9b08      	ldr	r3, [sp, #32]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f000 80ca 	beq.w	8006f10 <_dtoa_r+0xb20>
 8006d7c:	9b03      	ldr	r3, [sp, #12]
 8006d7e:	9302      	str	r3, [sp, #8]
 8006d80:	2d00      	cmp	r5, #0
 8006d82:	dd05      	ble.n	8006d90 <_dtoa_r+0x9a0>
 8006d84:	4639      	mov	r1, r7
 8006d86:	462a      	mov	r2, r5
 8006d88:	4620      	mov	r0, r4
 8006d8a:	f000 fb4b 	bl	8007424 <__lshift>
 8006d8e:	4607      	mov	r7, r0
 8006d90:	f1b8 0f00 	cmp.w	r8, #0
 8006d94:	d05b      	beq.n	8006e4e <_dtoa_r+0xa5e>
 8006d96:	6879      	ldr	r1, [r7, #4]
 8006d98:	4620      	mov	r0, r4
 8006d9a:	f000 f931 	bl	8007000 <_Balloc>
 8006d9e:	4605      	mov	r5, r0
 8006da0:	b928      	cbnz	r0, 8006dae <_dtoa_r+0x9be>
 8006da2:	4b87      	ldr	r3, [pc, #540]	; (8006fc0 <_dtoa_r+0xbd0>)
 8006da4:	4602      	mov	r2, r0
 8006da6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006daa:	f7ff bb3b 	b.w	8006424 <_dtoa_r+0x34>
 8006dae:	693a      	ldr	r2, [r7, #16]
 8006db0:	3202      	adds	r2, #2
 8006db2:	0092      	lsls	r2, r2, #2
 8006db4:	f107 010c 	add.w	r1, r7, #12
 8006db8:	300c      	adds	r0, #12
 8006dba:	f000 f913 	bl	8006fe4 <memcpy>
 8006dbe:	2201      	movs	r2, #1
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4620      	mov	r0, r4
 8006dc4:	f000 fb2e 	bl	8007424 <__lshift>
 8006dc8:	9b01      	ldr	r3, [sp, #4]
 8006dca:	f103 0901 	add.w	r9, r3, #1
 8006dce:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006dd2:	4413      	add	r3, r2
 8006dd4:	9305      	str	r3, [sp, #20]
 8006dd6:	f00a 0301 	and.w	r3, sl, #1
 8006dda:	46b8      	mov	r8, r7
 8006ddc:	9304      	str	r3, [sp, #16]
 8006dde:	4607      	mov	r7, r0
 8006de0:	4631      	mov	r1, r6
 8006de2:	ee18 0a10 	vmov	r0, s16
 8006de6:	f7ff fa75 	bl	80062d4 <quorem>
 8006dea:	4641      	mov	r1, r8
 8006dec:	9002      	str	r0, [sp, #8]
 8006dee:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006df2:	ee18 0a10 	vmov	r0, s16
 8006df6:	f000 fb85 	bl	8007504 <__mcmp>
 8006dfa:	463a      	mov	r2, r7
 8006dfc:	9003      	str	r0, [sp, #12]
 8006dfe:	4631      	mov	r1, r6
 8006e00:	4620      	mov	r0, r4
 8006e02:	f000 fb9b 	bl	800753c <__mdiff>
 8006e06:	68c2      	ldr	r2, [r0, #12]
 8006e08:	f109 3bff 	add.w	fp, r9, #4294967295
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	bb02      	cbnz	r2, 8006e52 <_dtoa_r+0xa62>
 8006e10:	4601      	mov	r1, r0
 8006e12:	ee18 0a10 	vmov	r0, s16
 8006e16:	f000 fb75 	bl	8007504 <__mcmp>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	4629      	mov	r1, r5
 8006e1e:	4620      	mov	r0, r4
 8006e20:	9207      	str	r2, [sp, #28]
 8006e22:	f000 f92d 	bl	8007080 <_Bfree>
 8006e26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006e2a:	ea43 0102 	orr.w	r1, r3, r2
 8006e2e:	9b04      	ldr	r3, [sp, #16]
 8006e30:	430b      	orrs	r3, r1
 8006e32:	464d      	mov	r5, r9
 8006e34:	d10f      	bne.n	8006e56 <_dtoa_r+0xa66>
 8006e36:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e3a:	d02a      	beq.n	8006e92 <_dtoa_r+0xaa2>
 8006e3c:	9b03      	ldr	r3, [sp, #12]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	dd02      	ble.n	8006e48 <_dtoa_r+0xa58>
 8006e42:	9b02      	ldr	r3, [sp, #8]
 8006e44:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006e48:	f88b a000 	strb.w	sl, [fp]
 8006e4c:	e775      	b.n	8006d3a <_dtoa_r+0x94a>
 8006e4e:	4638      	mov	r0, r7
 8006e50:	e7ba      	b.n	8006dc8 <_dtoa_r+0x9d8>
 8006e52:	2201      	movs	r2, #1
 8006e54:	e7e2      	b.n	8006e1c <_dtoa_r+0xa2c>
 8006e56:	9b03      	ldr	r3, [sp, #12]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	db04      	blt.n	8006e66 <_dtoa_r+0xa76>
 8006e5c:	9906      	ldr	r1, [sp, #24]
 8006e5e:	430b      	orrs	r3, r1
 8006e60:	9904      	ldr	r1, [sp, #16]
 8006e62:	430b      	orrs	r3, r1
 8006e64:	d122      	bne.n	8006eac <_dtoa_r+0xabc>
 8006e66:	2a00      	cmp	r2, #0
 8006e68:	ddee      	ble.n	8006e48 <_dtoa_r+0xa58>
 8006e6a:	ee18 1a10 	vmov	r1, s16
 8006e6e:	2201      	movs	r2, #1
 8006e70:	4620      	mov	r0, r4
 8006e72:	f000 fad7 	bl	8007424 <__lshift>
 8006e76:	4631      	mov	r1, r6
 8006e78:	ee08 0a10 	vmov	s16, r0
 8006e7c:	f000 fb42 	bl	8007504 <__mcmp>
 8006e80:	2800      	cmp	r0, #0
 8006e82:	dc03      	bgt.n	8006e8c <_dtoa_r+0xa9c>
 8006e84:	d1e0      	bne.n	8006e48 <_dtoa_r+0xa58>
 8006e86:	f01a 0f01 	tst.w	sl, #1
 8006e8a:	d0dd      	beq.n	8006e48 <_dtoa_r+0xa58>
 8006e8c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006e90:	d1d7      	bne.n	8006e42 <_dtoa_r+0xa52>
 8006e92:	2339      	movs	r3, #57	; 0x39
 8006e94:	f88b 3000 	strb.w	r3, [fp]
 8006e98:	462b      	mov	r3, r5
 8006e9a:	461d      	mov	r5, r3
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006ea2:	2a39      	cmp	r2, #57	; 0x39
 8006ea4:	d071      	beq.n	8006f8a <_dtoa_r+0xb9a>
 8006ea6:	3201      	adds	r2, #1
 8006ea8:	701a      	strb	r2, [r3, #0]
 8006eaa:	e746      	b.n	8006d3a <_dtoa_r+0x94a>
 8006eac:	2a00      	cmp	r2, #0
 8006eae:	dd07      	ble.n	8006ec0 <_dtoa_r+0xad0>
 8006eb0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006eb4:	d0ed      	beq.n	8006e92 <_dtoa_r+0xaa2>
 8006eb6:	f10a 0301 	add.w	r3, sl, #1
 8006eba:	f88b 3000 	strb.w	r3, [fp]
 8006ebe:	e73c      	b.n	8006d3a <_dtoa_r+0x94a>
 8006ec0:	9b05      	ldr	r3, [sp, #20]
 8006ec2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006ec6:	4599      	cmp	r9, r3
 8006ec8:	d047      	beq.n	8006f5a <_dtoa_r+0xb6a>
 8006eca:	ee18 1a10 	vmov	r1, s16
 8006ece:	2300      	movs	r3, #0
 8006ed0:	220a      	movs	r2, #10
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f000 f8f6 	bl	80070c4 <__multadd>
 8006ed8:	45b8      	cmp	r8, r7
 8006eda:	ee08 0a10 	vmov	s16, r0
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	f04f 020a 	mov.w	r2, #10
 8006ee6:	4641      	mov	r1, r8
 8006ee8:	4620      	mov	r0, r4
 8006eea:	d106      	bne.n	8006efa <_dtoa_r+0xb0a>
 8006eec:	f000 f8ea 	bl	80070c4 <__multadd>
 8006ef0:	4680      	mov	r8, r0
 8006ef2:	4607      	mov	r7, r0
 8006ef4:	f109 0901 	add.w	r9, r9, #1
 8006ef8:	e772      	b.n	8006de0 <_dtoa_r+0x9f0>
 8006efa:	f000 f8e3 	bl	80070c4 <__multadd>
 8006efe:	4639      	mov	r1, r7
 8006f00:	4680      	mov	r8, r0
 8006f02:	2300      	movs	r3, #0
 8006f04:	220a      	movs	r2, #10
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 f8dc 	bl	80070c4 <__multadd>
 8006f0c:	4607      	mov	r7, r0
 8006f0e:	e7f1      	b.n	8006ef4 <_dtoa_r+0xb04>
 8006f10:	9b03      	ldr	r3, [sp, #12]
 8006f12:	9302      	str	r3, [sp, #8]
 8006f14:	9d01      	ldr	r5, [sp, #4]
 8006f16:	ee18 0a10 	vmov	r0, s16
 8006f1a:	4631      	mov	r1, r6
 8006f1c:	f7ff f9da 	bl	80062d4 <quorem>
 8006f20:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006f24:	9b01      	ldr	r3, [sp, #4]
 8006f26:	f805 ab01 	strb.w	sl, [r5], #1
 8006f2a:	1aea      	subs	r2, r5, r3
 8006f2c:	9b02      	ldr	r3, [sp, #8]
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	dd09      	ble.n	8006f46 <_dtoa_r+0xb56>
 8006f32:	ee18 1a10 	vmov	r1, s16
 8006f36:	2300      	movs	r3, #0
 8006f38:	220a      	movs	r2, #10
 8006f3a:	4620      	mov	r0, r4
 8006f3c:	f000 f8c2 	bl	80070c4 <__multadd>
 8006f40:	ee08 0a10 	vmov	s16, r0
 8006f44:	e7e7      	b.n	8006f16 <_dtoa_r+0xb26>
 8006f46:	9b02      	ldr	r3, [sp, #8]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	bfc8      	it	gt
 8006f4c:	461d      	movgt	r5, r3
 8006f4e:	9b01      	ldr	r3, [sp, #4]
 8006f50:	bfd8      	it	le
 8006f52:	2501      	movle	r5, #1
 8006f54:	441d      	add	r5, r3
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	ee18 1a10 	vmov	r1, s16
 8006f5e:	2201      	movs	r2, #1
 8006f60:	4620      	mov	r0, r4
 8006f62:	f000 fa5f 	bl	8007424 <__lshift>
 8006f66:	4631      	mov	r1, r6
 8006f68:	ee08 0a10 	vmov	s16, r0
 8006f6c:	f000 faca 	bl	8007504 <__mcmp>
 8006f70:	2800      	cmp	r0, #0
 8006f72:	dc91      	bgt.n	8006e98 <_dtoa_r+0xaa8>
 8006f74:	d102      	bne.n	8006f7c <_dtoa_r+0xb8c>
 8006f76:	f01a 0f01 	tst.w	sl, #1
 8006f7a:	d18d      	bne.n	8006e98 <_dtoa_r+0xaa8>
 8006f7c:	462b      	mov	r3, r5
 8006f7e:	461d      	mov	r5, r3
 8006f80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f84:	2a30      	cmp	r2, #48	; 0x30
 8006f86:	d0fa      	beq.n	8006f7e <_dtoa_r+0xb8e>
 8006f88:	e6d7      	b.n	8006d3a <_dtoa_r+0x94a>
 8006f8a:	9a01      	ldr	r2, [sp, #4]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d184      	bne.n	8006e9a <_dtoa_r+0xaaa>
 8006f90:	9b00      	ldr	r3, [sp, #0]
 8006f92:	3301      	adds	r3, #1
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	2331      	movs	r3, #49	; 0x31
 8006f98:	7013      	strb	r3, [r2, #0]
 8006f9a:	e6ce      	b.n	8006d3a <_dtoa_r+0x94a>
 8006f9c:	4b09      	ldr	r3, [pc, #36]	; (8006fc4 <_dtoa_r+0xbd4>)
 8006f9e:	f7ff ba95 	b.w	80064cc <_dtoa_r+0xdc>
 8006fa2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	f47f aa6e 	bne.w	8006486 <_dtoa_r+0x96>
 8006faa:	4b07      	ldr	r3, [pc, #28]	; (8006fc8 <_dtoa_r+0xbd8>)
 8006fac:	f7ff ba8e 	b.w	80064cc <_dtoa_r+0xdc>
 8006fb0:	9b02      	ldr	r3, [sp, #8]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	dcae      	bgt.n	8006f14 <_dtoa_r+0xb24>
 8006fb6:	9b06      	ldr	r3, [sp, #24]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	f73f aea8 	bgt.w	8006d0e <_dtoa_r+0x91e>
 8006fbe:	e7a9      	b.n	8006f14 <_dtoa_r+0xb24>
 8006fc0:	080089d0 	.word	0x080089d0
 8006fc4:	0800882c 	.word	0x0800882c
 8006fc8:	08008951 	.word	0x08008951

08006fcc <_localeconv_r>:
 8006fcc:	4800      	ldr	r0, [pc, #0]	; (8006fd0 <_localeconv_r+0x4>)
 8006fce:	4770      	bx	lr
 8006fd0:	20000160 	.word	0x20000160

08006fd4 <malloc>:
 8006fd4:	4b02      	ldr	r3, [pc, #8]	; (8006fe0 <malloc+0xc>)
 8006fd6:	4601      	mov	r1, r0
 8006fd8:	6818      	ldr	r0, [r3, #0]
 8006fda:	f000 bc17 	b.w	800780c <_malloc_r>
 8006fde:	bf00      	nop
 8006fe0:	2000000c 	.word	0x2000000c

08006fe4 <memcpy>:
 8006fe4:	440a      	add	r2, r1
 8006fe6:	4291      	cmp	r1, r2
 8006fe8:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fec:	d100      	bne.n	8006ff0 <memcpy+0xc>
 8006fee:	4770      	bx	lr
 8006ff0:	b510      	push	{r4, lr}
 8006ff2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ff6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ffa:	4291      	cmp	r1, r2
 8006ffc:	d1f9      	bne.n	8006ff2 <memcpy+0xe>
 8006ffe:	bd10      	pop	{r4, pc}

08007000 <_Balloc>:
 8007000:	b570      	push	{r4, r5, r6, lr}
 8007002:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007004:	4604      	mov	r4, r0
 8007006:	460d      	mov	r5, r1
 8007008:	b976      	cbnz	r6, 8007028 <_Balloc+0x28>
 800700a:	2010      	movs	r0, #16
 800700c:	f7ff ffe2 	bl	8006fd4 <malloc>
 8007010:	4602      	mov	r2, r0
 8007012:	6260      	str	r0, [r4, #36]	; 0x24
 8007014:	b920      	cbnz	r0, 8007020 <_Balloc+0x20>
 8007016:	4b18      	ldr	r3, [pc, #96]	; (8007078 <_Balloc+0x78>)
 8007018:	4818      	ldr	r0, [pc, #96]	; (800707c <_Balloc+0x7c>)
 800701a:	2166      	movs	r1, #102	; 0x66
 800701c:	f000 fdd6 	bl	8007bcc <__assert_func>
 8007020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007024:	6006      	str	r6, [r0, #0]
 8007026:	60c6      	str	r6, [r0, #12]
 8007028:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800702a:	68f3      	ldr	r3, [r6, #12]
 800702c:	b183      	cbz	r3, 8007050 <_Balloc+0x50>
 800702e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007036:	b9b8      	cbnz	r0, 8007068 <_Balloc+0x68>
 8007038:	2101      	movs	r1, #1
 800703a:	fa01 f605 	lsl.w	r6, r1, r5
 800703e:	1d72      	adds	r2, r6, #5
 8007040:	0092      	lsls	r2, r2, #2
 8007042:	4620      	mov	r0, r4
 8007044:	f000 fb60 	bl	8007708 <_calloc_r>
 8007048:	b160      	cbz	r0, 8007064 <_Balloc+0x64>
 800704a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800704e:	e00e      	b.n	800706e <_Balloc+0x6e>
 8007050:	2221      	movs	r2, #33	; 0x21
 8007052:	2104      	movs	r1, #4
 8007054:	4620      	mov	r0, r4
 8007056:	f000 fb57 	bl	8007708 <_calloc_r>
 800705a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800705c:	60f0      	str	r0, [r6, #12]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e4      	bne.n	800702e <_Balloc+0x2e>
 8007064:	2000      	movs	r0, #0
 8007066:	bd70      	pop	{r4, r5, r6, pc}
 8007068:	6802      	ldr	r2, [r0, #0]
 800706a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800706e:	2300      	movs	r3, #0
 8007070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007074:	e7f7      	b.n	8007066 <_Balloc+0x66>
 8007076:	bf00      	nop
 8007078:	0800895e 	.word	0x0800895e
 800707c:	080089e1 	.word	0x080089e1

08007080 <_Bfree>:
 8007080:	b570      	push	{r4, r5, r6, lr}
 8007082:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007084:	4605      	mov	r5, r0
 8007086:	460c      	mov	r4, r1
 8007088:	b976      	cbnz	r6, 80070a8 <_Bfree+0x28>
 800708a:	2010      	movs	r0, #16
 800708c:	f7ff ffa2 	bl	8006fd4 <malloc>
 8007090:	4602      	mov	r2, r0
 8007092:	6268      	str	r0, [r5, #36]	; 0x24
 8007094:	b920      	cbnz	r0, 80070a0 <_Bfree+0x20>
 8007096:	4b09      	ldr	r3, [pc, #36]	; (80070bc <_Bfree+0x3c>)
 8007098:	4809      	ldr	r0, [pc, #36]	; (80070c0 <_Bfree+0x40>)
 800709a:	218a      	movs	r1, #138	; 0x8a
 800709c:	f000 fd96 	bl	8007bcc <__assert_func>
 80070a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070a4:	6006      	str	r6, [r0, #0]
 80070a6:	60c6      	str	r6, [r0, #12]
 80070a8:	b13c      	cbz	r4, 80070ba <_Bfree+0x3a>
 80070aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80070ac:	6862      	ldr	r2, [r4, #4]
 80070ae:	68db      	ldr	r3, [r3, #12]
 80070b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80070b4:	6021      	str	r1, [r4, #0]
 80070b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80070ba:	bd70      	pop	{r4, r5, r6, pc}
 80070bc:	0800895e 	.word	0x0800895e
 80070c0:	080089e1 	.word	0x080089e1

080070c4 <__multadd>:
 80070c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070c8:	690d      	ldr	r5, [r1, #16]
 80070ca:	4607      	mov	r7, r0
 80070cc:	460c      	mov	r4, r1
 80070ce:	461e      	mov	r6, r3
 80070d0:	f101 0c14 	add.w	ip, r1, #20
 80070d4:	2000      	movs	r0, #0
 80070d6:	f8dc 3000 	ldr.w	r3, [ip]
 80070da:	b299      	uxth	r1, r3
 80070dc:	fb02 6101 	mla	r1, r2, r1, r6
 80070e0:	0c1e      	lsrs	r6, r3, #16
 80070e2:	0c0b      	lsrs	r3, r1, #16
 80070e4:	fb02 3306 	mla	r3, r2, r6, r3
 80070e8:	b289      	uxth	r1, r1
 80070ea:	3001      	adds	r0, #1
 80070ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80070f0:	4285      	cmp	r5, r0
 80070f2:	f84c 1b04 	str.w	r1, [ip], #4
 80070f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80070fa:	dcec      	bgt.n	80070d6 <__multadd+0x12>
 80070fc:	b30e      	cbz	r6, 8007142 <__multadd+0x7e>
 80070fe:	68a3      	ldr	r3, [r4, #8]
 8007100:	42ab      	cmp	r3, r5
 8007102:	dc19      	bgt.n	8007138 <__multadd+0x74>
 8007104:	6861      	ldr	r1, [r4, #4]
 8007106:	4638      	mov	r0, r7
 8007108:	3101      	adds	r1, #1
 800710a:	f7ff ff79 	bl	8007000 <_Balloc>
 800710e:	4680      	mov	r8, r0
 8007110:	b928      	cbnz	r0, 800711e <__multadd+0x5a>
 8007112:	4602      	mov	r2, r0
 8007114:	4b0c      	ldr	r3, [pc, #48]	; (8007148 <__multadd+0x84>)
 8007116:	480d      	ldr	r0, [pc, #52]	; (800714c <__multadd+0x88>)
 8007118:	21b5      	movs	r1, #181	; 0xb5
 800711a:	f000 fd57 	bl	8007bcc <__assert_func>
 800711e:	6922      	ldr	r2, [r4, #16]
 8007120:	3202      	adds	r2, #2
 8007122:	f104 010c 	add.w	r1, r4, #12
 8007126:	0092      	lsls	r2, r2, #2
 8007128:	300c      	adds	r0, #12
 800712a:	f7ff ff5b 	bl	8006fe4 <memcpy>
 800712e:	4621      	mov	r1, r4
 8007130:	4638      	mov	r0, r7
 8007132:	f7ff ffa5 	bl	8007080 <_Bfree>
 8007136:	4644      	mov	r4, r8
 8007138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800713c:	3501      	adds	r5, #1
 800713e:	615e      	str	r6, [r3, #20]
 8007140:	6125      	str	r5, [r4, #16]
 8007142:	4620      	mov	r0, r4
 8007144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007148:	080089d0 	.word	0x080089d0
 800714c:	080089e1 	.word	0x080089e1

08007150 <__hi0bits>:
 8007150:	0c03      	lsrs	r3, r0, #16
 8007152:	041b      	lsls	r3, r3, #16
 8007154:	b9d3      	cbnz	r3, 800718c <__hi0bits+0x3c>
 8007156:	0400      	lsls	r0, r0, #16
 8007158:	2310      	movs	r3, #16
 800715a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800715e:	bf04      	itt	eq
 8007160:	0200      	lsleq	r0, r0, #8
 8007162:	3308      	addeq	r3, #8
 8007164:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007168:	bf04      	itt	eq
 800716a:	0100      	lsleq	r0, r0, #4
 800716c:	3304      	addeq	r3, #4
 800716e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007172:	bf04      	itt	eq
 8007174:	0080      	lsleq	r0, r0, #2
 8007176:	3302      	addeq	r3, #2
 8007178:	2800      	cmp	r0, #0
 800717a:	db05      	blt.n	8007188 <__hi0bits+0x38>
 800717c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007180:	f103 0301 	add.w	r3, r3, #1
 8007184:	bf08      	it	eq
 8007186:	2320      	moveq	r3, #32
 8007188:	4618      	mov	r0, r3
 800718a:	4770      	bx	lr
 800718c:	2300      	movs	r3, #0
 800718e:	e7e4      	b.n	800715a <__hi0bits+0xa>

08007190 <__lo0bits>:
 8007190:	6803      	ldr	r3, [r0, #0]
 8007192:	f013 0207 	ands.w	r2, r3, #7
 8007196:	4601      	mov	r1, r0
 8007198:	d00b      	beq.n	80071b2 <__lo0bits+0x22>
 800719a:	07da      	lsls	r2, r3, #31
 800719c:	d423      	bmi.n	80071e6 <__lo0bits+0x56>
 800719e:	0798      	lsls	r0, r3, #30
 80071a0:	bf49      	itett	mi
 80071a2:	085b      	lsrmi	r3, r3, #1
 80071a4:	089b      	lsrpl	r3, r3, #2
 80071a6:	2001      	movmi	r0, #1
 80071a8:	600b      	strmi	r3, [r1, #0]
 80071aa:	bf5c      	itt	pl
 80071ac:	600b      	strpl	r3, [r1, #0]
 80071ae:	2002      	movpl	r0, #2
 80071b0:	4770      	bx	lr
 80071b2:	b298      	uxth	r0, r3
 80071b4:	b9a8      	cbnz	r0, 80071e2 <__lo0bits+0x52>
 80071b6:	0c1b      	lsrs	r3, r3, #16
 80071b8:	2010      	movs	r0, #16
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	b90a      	cbnz	r2, 80071c2 <__lo0bits+0x32>
 80071be:	3008      	adds	r0, #8
 80071c0:	0a1b      	lsrs	r3, r3, #8
 80071c2:	071a      	lsls	r2, r3, #28
 80071c4:	bf04      	itt	eq
 80071c6:	091b      	lsreq	r3, r3, #4
 80071c8:	3004      	addeq	r0, #4
 80071ca:	079a      	lsls	r2, r3, #30
 80071cc:	bf04      	itt	eq
 80071ce:	089b      	lsreq	r3, r3, #2
 80071d0:	3002      	addeq	r0, #2
 80071d2:	07da      	lsls	r2, r3, #31
 80071d4:	d403      	bmi.n	80071de <__lo0bits+0x4e>
 80071d6:	085b      	lsrs	r3, r3, #1
 80071d8:	f100 0001 	add.w	r0, r0, #1
 80071dc:	d005      	beq.n	80071ea <__lo0bits+0x5a>
 80071de:	600b      	str	r3, [r1, #0]
 80071e0:	4770      	bx	lr
 80071e2:	4610      	mov	r0, r2
 80071e4:	e7e9      	b.n	80071ba <__lo0bits+0x2a>
 80071e6:	2000      	movs	r0, #0
 80071e8:	4770      	bx	lr
 80071ea:	2020      	movs	r0, #32
 80071ec:	4770      	bx	lr
	...

080071f0 <__i2b>:
 80071f0:	b510      	push	{r4, lr}
 80071f2:	460c      	mov	r4, r1
 80071f4:	2101      	movs	r1, #1
 80071f6:	f7ff ff03 	bl	8007000 <_Balloc>
 80071fa:	4602      	mov	r2, r0
 80071fc:	b928      	cbnz	r0, 800720a <__i2b+0x1a>
 80071fe:	4b05      	ldr	r3, [pc, #20]	; (8007214 <__i2b+0x24>)
 8007200:	4805      	ldr	r0, [pc, #20]	; (8007218 <__i2b+0x28>)
 8007202:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007206:	f000 fce1 	bl	8007bcc <__assert_func>
 800720a:	2301      	movs	r3, #1
 800720c:	6144      	str	r4, [r0, #20]
 800720e:	6103      	str	r3, [r0, #16]
 8007210:	bd10      	pop	{r4, pc}
 8007212:	bf00      	nop
 8007214:	080089d0 	.word	0x080089d0
 8007218:	080089e1 	.word	0x080089e1

0800721c <__multiply>:
 800721c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007220:	4691      	mov	r9, r2
 8007222:	690a      	ldr	r2, [r1, #16]
 8007224:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007228:	429a      	cmp	r2, r3
 800722a:	bfb8      	it	lt
 800722c:	460b      	movlt	r3, r1
 800722e:	460c      	mov	r4, r1
 8007230:	bfbc      	itt	lt
 8007232:	464c      	movlt	r4, r9
 8007234:	4699      	movlt	r9, r3
 8007236:	6927      	ldr	r7, [r4, #16]
 8007238:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800723c:	68a3      	ldr	r3, [r4, #8]
 800723e:	6861      	ldr	r1, [r4, #4]
 8007240:	eb07 060a 	add.w	r6, r7, sl
 8007244:	42b3      	cmp	r3, r6
 8007246:	b085      	sub	sp, #20
 8007248:	bfb8      	it	lt
 800724a:	3101      	addlt	r1, #1
 800724c:	f7ff fed8 	bl	8007000 <_Balloc>
 8007250:	b930      	cbnz	r0, 8007260 <__multiply+0x44>
 8007252:	4602      	mov	r2, r0
 8007254:	4b44      	ldr	r3, [pc, #272]	; (8007368 <__multiply+0x14c>)
 8007256:	4845      	ldr	r0, [pc, #276]	; (800736c <__multiply+0x150>)
 8007258:	f240 115d 	movw	r1, #349	; 0x15d
 800725c:	f000 fcb6 	bl	8007bcc <__assert_func>
 8007260:	f100 0514 	add.w	r5, r0, #20
 8007264:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007268:	462b      	mov	r3, r5
 800726a:	2200      	movs	r2, #0
 800726c:	4543      	cmp	r3, r8
 800726e:	d321      	bcc.n	80072b4 <__multiply+0x98>
 8007270:	f104 0314 	add.w	r3, r4, #20
 8007274:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007278:	f109 0314 	add.w	r3, r9, #20
 800727c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007280:	9202      	str	r2, [sp, #8]
 8007282:	1b3a      	subs	r2, r7, r4
 8007284:	3a15      	subs	r2, #21
 8007286:	f022 0203 	bic.w	r2, r2, #3
 800728a:	3204      	adds	r2, #4
 800728c:	f104 0115 	add.w	r1, r4, #21
 8007290:	428f      	cmp	r7, r1
 8007292:	bf38      	it	cc
 8007294:	2204      	movcc	r2, #4
 8007296:	9201      	str	r2, [sp, #4]
 8007298:	9a02      	ldr	r2, [sp, #8]
 800729a:	9303      	str	r3, [sp, #12]
 800729c:	429a      	cmp	r2, r3
 800729e:	d80c      	bhi.n	80072ba <__multiply+0x9e>
 80072a0:	2e00      	cmp	r6, #0
 80072a2:	dd03      	ble.n	80072ac <__multiply+0x90>
 80072a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d05a      	beq.n	8007362 <__multiply+0x146>
 80072ac:	6106      	str	r6, [r0, #16]
 80072ae:	b005      	add	sp, #20
 80072b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	f843 2b04 	str.w	r2, [r3], #4
 80072b8:	e7d8      	b.n	800726c <__multiply+0x50>
 80072ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80072be:	f1ba 0f00 	cmp.w	sl, #0
 80072c2:	d024      	beq.n	800730e <__multiply+0xf2>
 80072c4:	f104 0e14 	add.w	lr, r4, #20
 80072c8:	46a9      	mov	r9, r5
 80072ca:	f04f 0c00 	mov.w	ip, #0
 80072ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80072d2:	f8d9 1000 	ldr.w	r1, [r9]
 80072d6:	fa1f fb82 	uxth.w	fp, r2
 80072da:	b289      	uxth	r1, r1
 80072dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80072e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80072e4:	f8d9 2000 	ldr.w	r2, [r9]
 80072e8:	4461      	add	r1, ip
 80072ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80072ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80072f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80072f6:	b289      	uxth	r1, r1
 80072f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072fc:	4577      	cmp	r7, lr
 80072fe:	f849 1b04 	str.w	r1, [r9], #4
 8007302:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007306:	d8e2      	bhi.n	80072ce <__multiply+0xb2>
 8007308:	9a01      	ldr	r2, [sp, #4]
 800730a:	f845 c002 	str.w	ip, [r5, r2]
 800730e:	9a03      	ldr	r2, [sp, #12]
 8007310:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007314:	3304      	adds	r3, #4
 8007316:	f1b9 0f00 	cmp.w	r9, #0
 800731a:	d020      	beq.n	800735e <__multiply+0x142>
 800731c:	6829      	ldr	r1, [r5, #0]
 800731e:	f104 0c14 	add.w	ip, r4, #20
 8007322:	46ae      	mov	lr, r5
 8007324:	f04f 0a00 	mov.w	sl, #0
 8007328:	f8bc b000 	ldrh.w	fp, [ip]
 800732c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007330:	fb09 220b 	mla	r2, r9, fp, r2
 8007334:	4492      	add	sl, r2
 8007336:	b289      	uxth	r1, r1
 8007338:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800733c:	f84e 1b04 	str.w	r1, [lr], #4
 8007340:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007344:	f8be 1000 	ldrh.w	r1, [lr]
 8007348:	0c12      	lsrs	r2, r2, #16
 800734a:	fb09 1102 	mla	r1, r9, r2, r1
 800734e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007352:	4567      	cmp	r7, ip
 8007354:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007358:	d8e6      	bhi.n	8007328 <__multiply+0x10c>
 800735a:	9a01      	ldr	r2, [sp, #4]
 800735c:	50a9      	str	r1, [r5, r2]
 800735e:	3504      	adds	r5, #4
 8007360:	e79a      	b.n	8007298 <__multiply+0x7c>
 8007362:	3e01      	subs	r6, #1
 8007364:	e79c      	b.n	80072a0 <__multiply+0x84>
 8007366:	bf00      	nop
 8007368:	080089d0 	.word	0x080089d0
 800736c:	080089e1 	.word	0x080089e1

08007370 <__pow5mult>:
 8007370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007374:	4615      	mov	r5, r2
 8007376:	f012 0203 	ands.w	r2, r2, #3
 800737a:	4606      	mov	r6, r0
 800737c:	460f      	mov	r7, r1
 800737e:	d007      	beq.n	8007390 <__pow5mult+0x20>
 8007380:	4c25      	ldr	r4, [pc, #148]	; (8007418 <__pow5mult+0xa8>)
 8007382:	3a01      	subs	r2, #1
 8007384:	2300      	movs	r3, #0
 8007386:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800738a:	f7ff fe9b 	bl	80070c4 <__multadd>
 800738e:	4607      	mov	r7, r0
 8007390:	10ad      	asrs	r5, r5, #2
 8007392:	d03d      	beq.n	8007410 <__pow5mult+0xa0>
 8007394:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007396:	b97c      	cbnz	r4, 80073b8 <__pow5mult+0x48>
 8007398:	2010      	movs	r0, #16
 800739a:	f7ff fe1b 	bl	8006fd4 <malloc>
 800739e:	4602      	mov	r2, r0
 80073a0:	6270      	str	r0, [r6, #36]	; 0x24
 80073a2:	b928      	cbnz	r0, 80073b0 <__pow5mult+0x40>
 80073a4:	4b1d      	ldr	r3, [pc, #116]	; (800741c <__pow5mult+0xac>)
 80073a6:	481e      	ldr	r0, [pc, #120]	; (8007420 <__pow5mult+0xb0>)
 80073a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80073ac:	f000 fc0e 	bl	8007bcc <__assert_func>
 80073b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80073b4:	6004      	str	r4, [r0, #0]
 80073b6:	60c4      	str	r4, [r0, #12]
 80073b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80073bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80073c0:	b94c      	cbnz	r4, 80073d6 <__pow5mult+0x66>
 80073c2:	f240 2171 	movw	r1, #625	; 0x271
 80073c6:	4630      	mov	r0, r6
 80073c8:	f7ff ff12 	bl	80071f0 <__i2b>
 80073cc:	2300      	movs	r3, #0
 80073ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80073d2:	4604      	mov	r4, r0
 80073d4:	6003      	str	r3, [r0, #0]
 80073d6:	f04f 0900 	mov.w	r9, #0
 80073da:	07eb      	lsls	r3, r5, #31
 80073dc:	d50a      	bpl.n	80073f4 <__pow5mult+0x84>
 80073de:	4639      	mov	r1, r7
 80073e0:	4622      	mov	r2, r4
 80073e2:	4630      	mov	r0, r6
 80073e4:	f7ff ff1a 	bl	800721c <__multiply>
 80073e8:	4639      	mov	r1, r7
 80073ea:	4680      	mov	r8, r0
 80073ec:	4630      	mov	r0, r6
 80073ee:	f7ff fe47 	bl	8007080 <_Bfree>
 80073f2:	4647      	mov	r7, r8
 80073f4:	106d      	asrs	r5, r5, #1
 80073f6:	d00b      	beq.n	8007410 <__pow5mult+0xa0>
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	b938      	cbnz	r0, 800740c <__pow5mult+0x9c>
 80073fc:	4622      	mov	r2, r4
 80073fe:	4621      	mov	r1, r4
 8007400:	4630      	mov	r0, r6
 8007402:	f7ff ff0b 	bl	800721c <__multiply>
 8007406:	6020      	str	r0, [r4, #0]
 8007408:	f8c0 9000 	str.w	r9, [r0]
 800740c:	4604      	mov	r4, r0
 800740e:	e7e4      	b.n	80073da <__pow5mult+0x6a>
 8007410:	4638      	mov	r0, r7
 8007412:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007416:	bf00      	nop
 8007418:	08008b30 	.word	0x08008b30
 800741c:	0800895e 	.word	0x0800895e
 8007420:	080089e1 	.word	0x080089e1

08007424 <__lshift>:
 8007424:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	460c      	mov	r4, r1
 800742a:	6849      	ldr	r1, [r1, #4]
 800742c:	6923      	ldr	r3, [r4, #16]
 800742e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007432:	68a3      	ldr	r3, [r4, #8]
 8007434:	4607      	mov	r7, r0
 8007436:	4691      	mov	r9, r2
 8007438:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800743c:	f108 0601 	add.w	r6, r8, #1
 8007440:	42b3      	cmp	r3, r6
 8007442:	db0b      	blt.n	800745c <__lshift+0x38>
 8007444:	4638      	mov	r0, r7
 8007446:	f7ff fddb 	bl	8007000 <_Balloc>
 800744a:	4605      	mov	r5, r0
 800744c:	b948      	cbnz	r0, 8007462 <__lshift+0x3e>
 800744e:	4602      	mov	r2, r0
 8007450:	4b2a      	ldr	r3, [pc, #168]	; (80074fc <__lshift+0xd8>)
 8007452:	482b      	ldr	r0, [pc, #172]	; (8007500 <__lshift+0xdc>)
 8007454:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007458:	f000 fbb8 	bl	8007bcc <__assert_func>
 800745c:	3101      	adds	r1, #1
 800745e:	005b      	lsls	r3, r3, #1
 8007460:	e7ee      	b.n	8007440 <__lshift+0x1c>
 8007462:	2300      	movs	r3, #0
 8007464:	f100 0114 	add.w	r1, r0, #20
 8007468:	f100 0210 	add.w	r2, r0, #16
 800746c:	4618      	mov	r0, r3
 800746e:	4553      	cmp	r3, sl
 8007470:	db37      	blt.n	80074e2 <__lshift+0xbe>
 8007472:	6920      	ldr	r0, [r4, #16]
 8007474:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007478:	f104 0314 	add.w	r3, r4, #20
 800747c:	f019 091f 	ands.w	r9, r9, #31
 8007480:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007484:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007488:	d02f      	beq.n	80074ea <__lshift+0xc6>
 800748a:	f1c9 0e20 	rsb	lr, r9, #32
 800748e:	468a      	mov	sl, r1
 8007490:	f04f 0c00 	mov.w	ip, #0
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	fa02 f209 	lsl.w	r2, r2, r9
 800749a:	ea42 020c 	orr.w	r2, r2, ip
 800749e:	f84a 2b04 	str.w	r2, [sl], #4
 80074a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80074a6:	4298      	cmp	r0, r3
 80074a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80074ac:	d8f2      	bhi.n	8007494 <__lshift+0x70>
 80074ae:	1b03      	subs	r3, r0, r4
 80074b0:	3b15      	subs	r3, #21
 80074b2:	f023 0303 	bic.w	r3, r3, #3
 80074b6:	3304      	adds	r3, #4
 80074b8:	f104 0215 	add.w	r2, r4, #21
 80074bc:	4290      	cmp	r0, r2
 80074be:	bf38      	it	cc
 80074c0:	2304      	movcc	r3, #4
 80074c2:	f841 c003 	str.w	ip, [r1, r3]
 80074c6:	f1bc 0f00 	cmp.w	ip, #0
 80074ca:	d001      	beq.n	80074d0 <__lshift+0xac>
 80074cc:	f108 0602 	add.w	r6, r8, #2
 80074d0:	3e01      	subs	r6, #1
 80074d2:	4638      	mov	r0, r7
 80074d4:	612e      	str	r6, [r5, #16]
 80074d6:	4621      	mov	r1, r4
 80074d8:	f7ff fdd2 	bl	8007080 <_Bfree>
 80074dc:	4628      	mov	r0, r5
 80074de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80074e6:	3301      	adds	r3, #1
 80074e8:	e7c1      	b.n	800746e <__lshift+0x4a>
 80074ea:	3904      	subs	r1, #4
 80074ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80074f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80074f4:	4298      	cmp	r0, r3
 80074f6:	d8f9      	bhi.n	80074ec <__lshift+0xc8>
 80074f8:	e7ea      	b.n	80074d0 <__lshift+0xac>
 80074fa:	bf00      	nop
 80074fc:	080089d0 	.word	0x080089d0
 8007500:	080089e1 	.word	0x080089e1

08007504 <__mcmp>:
 8007504:	b530      	push	{r4, r5, lr}
 8007506:	6902      	ldr	r2, [r0, #16]
 8007508:	690c      	ldr	r4, [r1, #16]
 800750a:	1b12      	subs	r2, r2, r4
 800750c:	d10e      	bne.n	800752c <__mcmp+0x28>
 800750e:	f100 0314 	add.w	r3, r0, #20
 8007512:	3114      	adds	r1, #20
 8007514:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007518:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800751c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007520:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007524:	42a5      	cmp	r5, r4
 8007526:	d003      	beq.n	8007530 <__mcmp+0x2c>
 8007528:	d305      	bcc.n	8007536 <__mcmp+0x32>
 800752a:	2201      	movs	r2, #1
 800752c:	4610      	mov	r0, r2
 800752e:	bd30      	pop	{r4, r5, pc}
 8007530:	4283      	cmp	r3, r0
 8007532:	d3f3      	bcc.n	800751c <__mcmp+0x18>
 8007534:	e7fa      	b.n	800752c <__mcmp+0x28>
 8007536:	f04f 32ff 	mov.w	r2, #4294967295
 800753a:	e7f7      	b.n	800752c <__mcmp+0x28>

0800753c <__mdiff>:
 800753c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	460c      	mov	r4, r1
 8007542:	4606      	mov	r6, r0
 8007544:	4611      	mov	r1, r2
 8007546:	4620      	mov	r0, r4
 8007548:	4690      	mov	r8, r2
 800754a:	f7ff ffdb 	bl	8007504 <__mcmp>
 800754e:	1e05      	subs	r5, r0, #0
 8007550:	d110      	bne.n	8007574 <__mdiff+0x38>
 8007552:	4629      	mov	r1, r5
 8007554:	4630      	mov	r0, r6
 8007556:	f7ff fd53 	bl	8007000 <_Balloc>
 800755a:	b930      	cbnz	r0, 800756a <__mdiff+0x2e>
 800755c:	4b3a      	ldr	r3, [pc, #232]	; (8007648 <__mdiff+0x10c>)
 800755e:	4602      	mov	r2, r0
 8007560:	f240 2132 	movw	r1, #562	; 0x232
 8007564:	4839      	ldr	r0, [pc, #228]	; (800764c <__mdiff+0x110>)
 8007566:	f000 fb31 	bl	8007bcc <__assert_func>
 800756a:	2301      	movs	r3, #1
 800756c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007570:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007574:	bfa4      	itt	ge
 8007576:	4643      	movge	r3, r8
 8007578:	46a0      	movge	r8, r4
 800757a:	4630      	mov	r0, r6
 800757c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007580:	bfa6      	itte	ge
 8007582:	461c      	movge	r4, r3
 8007584:	2500      	movge	r5, #0
 8007586:	2501      	movlt	r5, #1
 8007588:	f7ff fd3a 	bl	8007000 <_Balloc>
 800758c:	b920      	cbnz	r0, 8007598 <__mdiff+0x5c>
 800758e:	4b2e      	ldr	r3, [pc, #184]	; (8007648 <__mdiff+0x10c>)
 8007590:	4602      	mov	r2, r0
 8007592:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007596:	e7e5      	b.n	8007564 <__mdiff+0x28>
 8007598:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800759c:	6926      	ldr	r6, [r4, #16]
 800759e:	60c5      	str	r5, [r0, #12]
 80075a0:	f104 0914 	add.w	r9, r4, #20
 80075a4:	f108 0514 	add.w	r5, r8, #20
 80075a8:	f100 0e14 	add.w	lr, r0, #20
 80075ac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80075b0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80075b4:	f108 0210 	add.w	r2, r8, #16
 80075b8:	46f2      	mov	sl, lr
 80075ba:	2100      	movs	r1, #0
 80075bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80075c0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80075c4:	fa1f f883 	uxth.w	r8, r3
 80075c8:	fa11 f18b 	uxtah	r1, r1, fp
 80075cc:	0c1b      	lsrs	r3, r3, #16
 80075ce:	eba1 0808 	sub.w	r8, r1, r8
 80075d2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80075d6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80075da:	fa1f f888 	uxth.w	r8, r8
 80075de:	1419      	asrs	r1, r3, #16
 80075e0:	454e      	cmp	r6, r9
 80075e2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80075e6:	f84a 3b04 	str.w	r3, [sl], #4
 80075ea:	d8e7      	bhi.n	80075bc <__mdiff+0x80>
 80075ec:	1b33      	subs	r3, r6, r4
 80075ee:	3b15      	subs	r3, #21
 80075f0:	f023 0303 	bic.w	r3, r3, #3
 80075f4:	3304      	adds	r3, #4
 80075f6:	3415      	adds	r4, #21
 80075f8:	42a6      	cmp	r6, r4
 80075fa:	bf38      	it	cc
 80075fc:	2304      	movcc	r3, #4
 80075fe:	441d      	add	r5, r3
 8007600:	4473      	add	r3, lr
 8007602:	469e      	mov	lr, r3
 8007604:	462e      	mov	r6, r5
 8007606:	4566      	cmp	r6, ip
 8007608:	d30e      	bcc.n	8007628 <__mdiff+0xec>
 800760a:	f10c 0203 	add.w	r2, ip, #3
 800760e:	1b52      	subs	r2, r2, r5
 8007610:	f022 0203 	bic.w	r2, r2, #3
 8007614:	3d03      	subs	r5, #3
 8007616:	45ac      	cmp	ip, r5
 8007618:	bf38      	it	cc
 800761a:	2200      	movcc	r2, #0
 800761c:	441a      	add	r2, r3
 800761e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007622:	b17b      	cbz	r3, 8007644 <__mdiff+0x108>
 8007624:	6107      	str	r7, [r0, #16]
 8007626:	e7a3      	b.n	8007570 <__mdiff+0x34>
 8007628:	f856 8b04 	ldr.w	r8, [r6], #4
 800762c:	fa11 f288 	uxtah	r2, r1, r8
 8007630:	1414      	asrs	r4, r2, #16
 8007632:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007636:	b292      	uxth	r2, r2
 8007638:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800763c:	f84e 2b04 	str.w	r2, [lr], #4
 8007640:	1421      	asrs	r1, r4, #16
 8007642:	e7e0      	b.n	8007606 <__mdiff+0xca>
 8007644:	3f01      	subs	r7, #1
 8007646:	e7ea      	b.n	800761e <__mdiff+0xe2>
 8007648:	080089d0 	.word	0x080089d0
 800764c:	080089e1 	.word	0x080089e1

08007650 <__d2b>:
 8007650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007654:	4689      	mov	r9, r1
 8007656:	2101      	movs	r1, #1
 8007658:	ec57 6b10 	vmov	r6, r7, d0
 800765c:	4690      	mov	r8, r2
 800765e:	f7ff fccf 	bl	8007000 <_Balloc>
 8007662:	4604      	mov	r4, r0
 8007664:	b930      	cbnz	r0, 8007674 <__d2b+0x24>
 8007666:	4602      	mov	r2, r0
 8007668:	4b25      	ldr	r3, [pc, #148]	; (8007700 <__d2b+0xb0>)
 800766a:	4826      	ldr	r0, [pc, #152]	; (8007704 <__d2b+0xb4>)
 800766c:	f240 310a 	movw	r1, #778	; 0x30a
 8007670:	f000 faac 	bl	8007bcc <__assert_func>
 8007674:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007678:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800767c:	bb35      	cbnz	r5, 80076cc <__d2b+0x7c>
 800767e:	2e00      	cmp	r6, #0
 8007680:	9301      	str	r3, [sp, #4]
 8007682:	d028      	beq.n	80076d6 <__d2b+0x86>
 8007684:	4668      	mov	r0, sp
 8007686:	9600      	str	r6, [sp, #0]
 8007688:	f7ff fd82 	bl	8007190 <__lo0bits>
 800768c:	9900      	ldr	r1, [sp, #0]
 800768e:	b300      	cbz	r0, 80076d2 <__d2b+0x82>
 8007690:	9a01      	ldr	r2, [sp, #4]
 8007692:	f1c0 0320 	rsb	r3, r0, #32
 8007696:	fa02 f303 	lsl.w	r3, r2, r3
 800769a:	430b      	orrs	r3, r1
 800769c:	40c2      	lsrs	r2, r0
 800769e:	6163      	str	r3, [r4, #20]
 80076a0:	9201      	str	r2, [sp, #4]
 80076a2:	9b01      	ldr	r3, [sp, #4]
 80076a4:	61a3      	str	r3, [r4, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bf14      	ite	ne
 80076aa:	2202      	movne	r2, #2
 80076ac:	2201      	moveq	r2, #1
 80076ae:	6122      	str	r2, [r4, #16]
 80076b0:	b1d5      	cbz	r5, 80076e8 <__d2b+0x98>
 80076b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80076b6:	4405      	add	r5, r0
 80076b8:	f8c9 5000 	str.w	r5, [r9]
 80076bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80076c0:	f8c8 0000 	str.w	r0, [r8]
 80076c4:	4620      	mov	r0, r4
 80076c6:	b003      	add	sp, #12
 80076c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80076cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80076d0:	e7d5      	b.n	800767e <__d2b+0x2e>
 80076d2:	6161      	str	r1, [r4, #20]
 80076d4:	e7e5      	b.n	80076a2 <__d2b+0x52>
 80076d6:	a801      	add	r0, sp, #4
 80076d8:	f7ff fd5a 	bl	8007190 <__lo0bits>
 80076dc:	9b01      	ldr	r3, [sp, #4]
 80076de:	6163      	str	r3, [r4, #20]
 80076e0:	2201      	movs	r2, #1
 80076e2:	6122      	str	r2, [r4, #16]
 80076e4:	3020      	adds	r0, #32
 80076e6:	e7e3      	b.n	80076b0 <__d2b+0x60>
 80076e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80076f0:	f8c9 0000 	str.w	r0, [r9]
 80076f4:	6918      	ldr	r0, [r3, #16]
 80076f6:	f7ff fd2b 	bl	8007150 <__hi0bits>
 80076fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80076fe:	e7df      	b.n	80076c0 <__d2b+0x70>
 8007700:	080089d0 	.word	0x080089d0
 8007704:	080089e1 	.word	0x080089e1

08007708 <_calloc_r>:
 8007708:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800770a:	fba1 2402 	umull	r2, r4, r1, r2
 800770e:	b94c      	cbnz	r4, 8007724 <_calloc_r+0x1c>
 8007710:	4611      	mov	r1, r2
 8007712:	9201      	str	r2, [sp, #4]
 8007714:	f000 f87a 	bl	800780c <_malloc_r>
 8007718:	9a01      	ldr	r2, [sp, #4]
 800771a:	4605      	mov	r5, r0
 800771c:	b930      	cbnz	r0, 800772c <_calloc_r+0x24>
 800771e:	4628      	mov	r0, r5
 8007720:	b003      	add	sp, #12
 8007722:	bd30      	pop	{r4, r5, pc}
 8007724:	220c      	movs	r2, #12
 8007726:	6002      	str	r2, [r0, #0]
 8007728:	2500      	movs	r5, #0
 800772a:	e7f8      	b.n	800771e <_calloc_r+0x16>
 800772c:	4621      	mov	r1, r4
 800772e:	f7fe f8b3 	bl	8005898 <memset>
 8007732:	e7f4      	b.n	800771e <_calloc_r+0x16>

08007734 <_free_r>:
 8007734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007736:	2900      	cmp	r1, #0
 8007738:	d044      	beq.n	80077c4 <_free_r+0x90>
 800773a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800773e:	9001      	str	r0, [sp, #4]
 8007740:	2b00      	cmp	r3, #0
 8007742:	f1a1 0404 	sub.w	r4, r1, #4
 8007746:	bfb8      	it	lt
 8007748:	18e4      	addlt	r4, r4, r3
 800774a:	f000 fa9b 	bl	8007c84 <__malloc_lock>
 800774e:	4a1e      	ldr	r2, [pc, #120]	; (80077c8 <_free_r+0x94>)
 8007750:	9801      	ldr	r0, [sp, #4]
 8007752:	6813      	ldr	r3, [r2, #0]
 8007754:	b933      	cbnz	r3, 8007764 <_free_r+0x30>
 8007756:	6063      	str	r3, [r4, #4]
 8007758:	6014      	str	r4, [r2, #0]
 800775a:	b003      	add	sp, #12
 800775c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007760:	f000 ba96 	b.w	8007c90 <__malloc_unlock>
 8007764:	42a3      	cmp	r3, r4
 8007766:	d908      	bls.n	800777a <_free_r+0x46>
 8007768:	6825      	ldr	r5, [r4, #0]
 800776a:	1961      	adds	r1, r4, r5
 800776c:	428b      	cmp	r3, r1
 800776e:	bf01      	itttt	eq
 8007770:	6819      	ldreq	r1, [r3, #0]
 8007772:	685b      	ldreq	r3, [r3, #4]
 8007774:	1949      	addeq	r1, r1, r5
 8007776:	6021      	streq	r1, [r4, #0]
 8007778:	e7ed      	b.n	8007756 <_free_r+0x22>
 800777a:	461a      	mov	r2, r3
 800777c:	685b      	ldr	r3, [r3, #4]
 800777e:	b10b      	cbz	r3, 8007784 <_free_r+0x50>
 8007780:	42a3      	cmp	r3, r4
 8007782:	d9fa      	bls.n	800777a <_free_r+0x46>
 8007784:	6811      	ldr	r1, [r2, #0]
 8007786:	1855      	adds	r5, r2, r1
 8007788:	42a5      	cmp	r5, r4
 800778a:	d10b      	bne.n	80077a4 <_free_r+0x70>
 800778c:	6824      	ldr	r4, [r4, #0]
 800778e:	4421      	add	r1, r4
 8007790:	1854      	adds	r4, r2, r1
 8007792:	42a3      	cmp	r3, r4
 8007794:	6011      	str	r1, [r2, #0]
 8007796:	d1e0      	bne.n	800775a <_free_r+0x26>
 8007798:	681c      	ldr	r4, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	6053      	str	r3, [r2, #4]
 800779e:	4421      	add	r1, r4
 80077a0:	6011      	str	r1, [r2, #0]
 80077a2:	e7da      	b.n	800775a <_free_r+0x26>
 80077a4:	d902      	bls.n	80077ac <_free_r+0x78>
 80077a6:	230c      	movs	r3, #12
 80077a8:	6003      	str	r3, [r0, #0]
 80077aa:	e7d6      	b.n	800775a <_free_r+0x26>
 80077ac:	6825      	ldr	r5, [r4, #0]
 80077ae:	1961      	adds	r1, r4, r5
 80077b0:	428b      	cmp	r3, r1
 80077b2:	bf04      	itt	eq
 80077b4:	6819      	ldreq	r1, [r3, #0]
 80077b6:	685b      	ldreq	r3, [r3, #4]
 80077b8:	6063      	str	r3, [r4, #4]
 80077ba:	bf04      	itt	eq
 80077bc:	1949      	addeq	r1, r1, r5
 80077be:	6021      	streq	r1, [r4, #0]
 80077c0:	6054      	str	r4, [r2, #4]
 80077c2:	e7ca      	b.n	800775a <_free_r+0x26>
 80077c4:	b003      	add	sp, #12
 80077c6:	bd30      	pop	{r4, r5, pc}
 80077c8:	20000378 	.word	0x20000378

080077cc <sbrk_aligned>:
 80077cc:	b570      	push	{r4, r5, r6, lr}
 80077ce:	4e0e      	ldr	r6, [pc, #56]	; (8007808 <sbrk_aligned+0x3c>)
 80077d0:	460c      	mov	r4, r1
 80077d2:	6831      	ldr	r1, [r6, #0]
 80077d4:	4605      	mov	r5, r0
 80077d6:	b911      	cbnz	r1, 80077de <sbrk_aligned+0x12>
 80077d8:	f000 f9e8 	bl	8007bac <_sbrk_r>
 80077dc:	6030      	str	r0, [r6, #0]
 80077de:	4621      	mov	r1, r4
 80077e0:	4628      	mov	r0, r5
 80077e2:	f000 f9e3 	bl	8007bac <_sbrk_r>
 80077e6:	1c43      	adds	r3, r0, #1
 80077e8:	d00a      	beq.n	8007800 <sbrk_aligned+0x34>
 80077ea:	1cc4      	adds	r4, r0, #3
 80077ec:	f024 0403 	bic.w	r4, r4, #3
 80077f0:	42a0      	cmp	r0, r4
 80077f2:	d007      	beq.n	8007804 <sbrk_aligned+0x38>
 80077f4:	1a21      	subs	r1, r4, r0
 80077f6:	4628      	mov	r0, r5
 80077f8:	f000 f9d8 	bl	8007bac <_sbrk_r>
 80077fc:	3001      	adds	r0, #1
 80077fe:	d101      	bne.n	8007804 <sbrk_aligned+0x38>
 8007800:	f04f 34ff 	mov.w	r4, #4294967295
 8007804:	4620      	mov	r0, r4
 8007806:	bd70      	pop	{r4, r5, r6, pc}
 8007808:	2000037c 	.word	0x2000037c

0800780c <_malloc_r>:
 800780c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007810:	1ccd      	adds	r5, r1, #3
 8007812:	f025 0503 	bic.w	r5, r5, #3
 8007816:	3508      	adds	r5, #8
 8007818:	2d0c      	cmp	r5, #12
 800781a:	bf38      	it	cc
 800781c:	250c      	movcc	r5, #12
 800781e:	2d00      	cmp	r5, #0
 8007820:	4607      	mov	r7, r0
 8007822:	db01      	blt.n	8007828 <_malloc_r+0x1c>
 8007824:	42a9      	cmp	r1, r5
 8007826:	d905      	bls.n	8007834 <_malloc_r+0x28>
 8007828:	230c      	movs	r3, #12
 800782a:	603b      	str	r3, [r7, #0]
 800782c:	2600      	movs	r6, #0
 800782e:	4630      	mov	r0, r6
 8007830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007834:	4e2e      	ldr	r6, [pc, #184]	; (80078f0 <_malloc_r+0xe4>)
 8007836:	f000 fa25 	bl	8007c84 <__malloc_lock>
 800783a:	6833      	ldr	r3, [r6, #0]
 800783c:	461c      	mov	r4, r3
 800783e:	bb34      	cbnz	r4, 800788e <_malloc_r+0x82>
 8007840:	4629      	mov	r1, r5
 8007842:	4638      	mov	r0, r7
 8007844:	f7ff ffc2 	bl	80077cc <sbrk_aligned>
 8007848:	1c43      	adds	r3, r0, #1
 800784a:	4604      	mov	r4, r0
 800784c:	d14d      	bne.n	80078ea <_malloc_r+0xde>
 800784e:	6834      	ldr	r4, [r6, #0]
 8007850:	4626      	mov	r6, r4
 8007852:	2e00      	cmp	r6, #0
 8007854:	d140      	bne.n	80078d8 <_malloc_r+0xcc>
 8007856:	6823      	ldr	r3, [r4, #0]
 8007858:	4631      	mov	r1, r6
 800785a:	4638      	mov	r0, r7
 800785c:	eb04 0803 	add.w	r8, r4, r3
 8007860:	f000 f9a4 	bl	8007bac <_sbrk_r>
 8007864:	4580      	cmp	r8, r0
 8007866:	d13a      	bne.n	80078de <_malloc_r+0xd2>
 8007868:	6821      	ldr	r1, [r4, #0]
 800786a:	3503      	adds	r5, #3
 800786c:	1a6d      	subs	r5, r5, r1
 800786e:	f025 0503 	bic.w	r5, r5, #3
 8007872:	3508      	adds	r5, #8
 8007874:	2d0c      	cmp	r5, #12
 8007876:	bf38      	it	cc
 8007878:	250c      	movcc	r5, #12
 800787a:	4629      	mov	r1, r5
 800787c:	4638      	mov	r0, r7
 800787e:	f7ff ffa5 	bl	80077cc <sbrk_aligned>
 8007882:	3001      	adds	r0, #1
 8007884:	d02b      	beq.n	80078de <_malloc_r+0xd2>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	442b      	add	r3, r5
 800788a:	6023      	str	r3, [r4, #0]
 800788c:	e00e      	b.n	80078ac <_malloc_r+0xa0>
 800788e:	6822      	ldr	r2, [r4, #0]
 8007890:	1b52      	subs	r2, r2, r5
 8007892:	d41e      	bmi.n	80078d2 <_malloc_r+0xc6>
 8007894:	2a0b      	cmp	r2, #11
 8007896:	d916      	bls.n	80078c6 <_malloc_r+0xba>
 8007898:	1961      	adds	r1, r4, r5
 800789a:	42a3      	cmp	r3, r4
 800789c:	6025      	str	r5, [r4, #0]
 800789e:	bf18      	it	ne
 80078a0:	6059      	strne	r1, [r3, #4]
 80078a2:	6863      	ldr	r3, [r4, #4]
 80078a4:	bf08      	it	eq
 80078a6:	6031      	streq	r1, [r6, #0]
 80078a8:	5162      	str	r2, [r4, r5]
 80078aa:	604b      	str	r3, [r1, #4]
 80078ac:	4638      	mov	r0, r7
 80078ae:	f104 060b 	add.w	r6, r4, #11
 80078b2:	f000 f9ed 	bl	8007c90 <__malloc_unlock>
 80078b6:	f026 0607 	bic.w	r6, r6, #7
 80078ba:	1d23      	adds	r3, r4, #4
 80078bc:	1af2      	subs	r2, r6, r3
 80078be:	d0b6      	beq.n	800782e <_malloc_r+0x22>
 80078c0:	1b9b      	subs	r3, r3, r6
 80078c2:	50a3      	str	r3, [r4, r2]
 80078c4:	e7b3      	b.n	800782e <_malloc_r+0x22>
 80078c6:	6862      	ldr	r2, [r4, #4]
 80078c8:	42a3      	cmp	r3, r4
 80078ca:	bf0c      	ite	eq
 80078cc:	6032      	streq	r2, [r6, #0]
 80078ce:	605a      	strne	r2, [r3, #4]
 80078d0:	e7ec      	b.n	80078ac <_malloc_r+0xa0>
 80078d2:	4623      	mov	r3, r4
 80078d4:	6864      	ldr	r4, [r4, #4]
 80078d6:	e7b2      	b.n	800783e <_malloc_r+0x32>
 80078d8:	4634      	mov	r4, r6
 80078da:	6876      	ldr	r6, [r6, #4]
 80078dc:	e7b9      	b.n	8007852 <_malloc_r+0x46>
 80078de:	230c      	movs	r3, #12
 80078e0:	603b      	str	r3, [r7, #0]
 80078e2:	4638      	mov	r0, r7
 80078e4:	f000 f9d4 	bl	8007c90 <__malloc_unlock>
 80078e8:	e7a1      	b.n	800782e <_malloc_r+0x22>
 80078ea:	6025      	str	r5, [r4, #0]
 80078ec:	e7de      	b.n	80078ac <_malloc_r+0xa0>
 80078ee:	bf00      	nop
 80078f0:	20000378 	.word	0x20000378

080078f4 <__ssputs_r>:
 80078f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f8:	688e      	ldr	r6, [r1, #8]
 80078fa:	429e      	cmp	r6, r3
 80078fc:	4682      	mov	sl, r0
 80078fe:	460c      	mov	r4, r1
 8007900:	4690      	mov	r8, r2
 8007902:	461f      	mov	r7, r3
 8007904:	d838      	bhi.n	8007978 <__ssputs_r+0x84>
 8007906:	898a      	ldrh	r2, [r1, #12]
 8007908:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800790c:	d032      	beq.n	8007974 <__ssputs_r+0x80>
 800790e:	6825      	ldr	r5, [r4, #0]
 8007910:	6909      	ldr	r1, [r1, #16]
 8007912:	eba5 0901 	sub.w	r9, r5, r1
 8007916:	6965      	ldr	r5, [r4, #20]
 8007918:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800791c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007920:	3301      	adds	r3, #1
 8007922:	444b      	add	r3, r9
 8007924:	106d      	asrs	r5, r5, #1
 8007926:	429d      	cmp	r5, r3
 8007928:	bf38      	it	cc
 800792a:	461d      	movcc	r5, r3
 800792c:	0553      	lsls	r3, r2, #21
 800792e:	d531      	bpl.n	8007994 <__ssputs_r+0xa0>
 8007930:	4629      	mov	r1, r5
 8007932:	f7ff ff6b 	bl	800780c <_malloc_r>
 8007936:	4606      	mov	r6, r0
 8007938:	b950      	cbnz	r0, 8007950 <__ssputs_r+0x5c>
 800793a:	230c      	movs	r3, #12
 800793c:	f8ca 3000 	str.w	r3, [sl]
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007946:	81a3      	strh	r3, [r4, #12]
 8007948:	f04f 30ff 	mov.w	r0, #4294967295
 800794c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007950:	6921      	ldr	r1, [r4, #16]
 8007952:	464a      	mov	r2, r9
 8007954:	f7ff fb46 	bl	8006fe4 <memcpy>
 8007958:	89a3      	ldrh	r3, [r4, #12]
 800795a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800795e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007962:	81a3      	strh	r3, [r4, #12]
 8007964:	6126      	str	r6, [r4, #16]
 8007966:	6165      	str	r5, [r4, #20]
 8007968:	444e      	add	r6, r9
 800796a:	eba5 0509 	sub.w	r5, r5, r9
 800796e:	6026      	str	r6, [r4, #0]
 8007970:	60a5      	str	r5, [r4, #8]
 8007972:	463e      	mov	r6, r7
 8007974:	42be      	cmp	r6, r7
 8007976:	d900      	bls.n	800797a <__ssputs_r+0x86>
 8007978:	463e      	mov	r6, r7
 800797a:	6820      	ldr	r0, [r4, #0]
 800797c:	4632      	mov	r2, r6
 800797e:	4641      	mov	r1, r8
 8007980:	f000 f966 	bl	8007c50 <memmove>
 8007984:	68a3      	ldr	r3, [r4, #8]
 8007986:	1b9b      	subs	r3, r3, r6
 8007988:	60a3      	str	r3, [r4, #8]
 800798a:	6823      	ldr	r3, [r4, #0]
 800798c:	4433      	add	r3, r6
 800798e:	6023      	str	r3, [r4, #0]
 8007990:	2000      	movs	r0, #0
 8007992:	e7db      	b.n	800794c <__ssputs_r+0x58>
 8007994:	462a      	mov	r2, r5
 8007996:	f000 f981 	bl	8007c9c <_realloc_r>
 800799a:	4606      	mov	r6, r0
 800799c:	2800      	cmp	r0, #0
 800799e:	d1e1      	bne.n	8007964 <__ssputs_r+0x70>
 80079a0:	6921      	ldr	r1, [r4, #16]
 80079a2:	4650      	mov	r0, sl
 80079a4:	f7ff fec6 	bl	8007734 <_free_r>
 80079a8:	e7c7      	b.n	800793a <__ssputs_r+0x46>
	...

080079ac <_svfiprintf_r>:
 80079ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079b0:	4698      	mov	r8, r3
 80079b2:	898b      	ldrh	r3, [r1, #12]
 80079b4:	061b      	lsls	r3, r3, #24
 80079b6:	b09d      	sub	sp, #116	; 0x74
 80079b8:	4607      	mov	r7, r0
 80079ba:	460d      	mov	r5, r1
 80079bc:	4614      	mov	r4, r2
 80079be:	d50e      	bpl.n	80079de <_svfiprintf_r+0x32>
 80079c0:	690b      	ldr	r3, [r1, #16]
 80079c2:	b963      	cbnz	r3, 80079de <_svfiprintf_r+0x32>
 80079c4:	2140      	movs	r1, #64	; 0x40
 80079c6:	f7ff ff21 	bl	800780c <_malloc_r>
 80079ca:	6028      	str	r0, [r5, #0]
 80079cc:	6128      	str	r0, [r5, #16]
 80079ce:	b920      	cbnz	r0, 80079da <_svfiprintf_r+0x2e>
 80079d0:	230c      	movs	r3, #12
 80079d2:	603b      	str	r3, [r7, #0]
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	e0d1      	b.n	8007b7e <_svfiprintf_r+0x1d2>
 80079da:	2340      	movs	r3, #64	; 0x40
 80079dc:	616b      	str	r3, [r5, #20]
 80079de:	2300      	movs	r3, #0
 80079e0:	9309      	str	r3, [sp, #36]	; 0x24
 80079e2:	2320      	movs	r3, #32
 80079e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80079ec:	2330      	movs	r3, #48	; 0x30
 80079ee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b98 <_svfiprintf_r+0x1ec>
 80079f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079f6:	f04f 0901 	mov.w	r9, #1
 80079fa:	4623      	mov	r3, r4
 80079fc:	469a      	mov	sl, r3
 80079fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a02:	b10a      	cbz	r2, 8007a08 <_svfiprintf_r+0x5c>
 8007a04:	2a25      	cmp	r2, #37	; 0x25
 8007a06:	d1f9      	bne.n	80079fc <_svfiprintf_r+0x50>
 8007a08:	ebba 0b04 	subs.w	fp, sl, r4
 8007a0c:	d00b      	beq.n	8007a26 <_svfiprintf_r+0x7a>
 8007a0e:	465b      	mov	r3, fp
 8007a10:	4622      	mov	r2, r4
 8007a12:	4629      	mov	r1, r5
 8007a14:	4638      	mov	r0, r7
 8007a16:	f7ff ff6d 	bl	80078f4 <__ssputs_r>
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	f000 80aa 	beq.w	8007b74 <_svfiprintf_r+0x1c8>
 8007a20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a22:	445a      	add	r2, fp
 8007a24:	9209      	str	r2, [sp, #36]	; 0x24
 8007a26:	f89a 3000 	ldrb.w	r3, [sl]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	f000 80a2 	beq.w	8007b74 <_svfiprintf_r+0x1c8>
 8007a30:	2300      	movs	r3, #0
 8007a32:	f04f 32ff 	mov.w	r2, #4294967295
 8007a36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a3a:	f10a 0a01 	add.w	sl, sl, #1
 8007a3e:	9304      	str	r3, [sp, #16]
 8007a40:	9307      	str	r3, [sp, #28]
 8007a42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a46:	931a      	str	r3, [sp, #104]	; 0x68
 8007a48:	4654      	mov	r4, sl
 8007a4a:	2205      	movs	r2, #5
 8007a4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a50:	4851      	ldr	r0, [pc, #324]	; (8007b98 <_svfiprintf_r+0x1ec>)
 8007a52:	f7f8 fbcd 	bl	80001f0 <memchr>
 8007a56:	9a04      	ldr	r2, [sp, #16]
 8007a58:	b9d8      	cbnz	r0, 8007a92 <_svfiprintf_r+0xe6>
 8007a5a:	06d0      	lsls	r0, r2, #27
 8007a5c:	bf44      	itt	mi
 8007a5e:	2320      	movmi	r3, #32
 8007a60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a64:	0711      	lsls	r1, r2, #28
 8007a66:	bf44      	itt	mi
 8007a68:	232b      	movmi	r3, #43	; 0x2b
 8007a6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007a72:	2b2a      	cmp	r3, #42	; 0x2a
 8007a74:	d015      	beq.n	8007aa2 <_svfiprintf_r+0xf6>
 8007a76:	9a07      	ldr	r2, [sp, #28]
 8007a78:	4654      	mov	r4, sl
 8007a7a:	2000      	movs	r0, #0
 8007a7c:	f04f 0c0a 	mov.w	ip, #10
 8007a80:	4621      	mov	r1, r4
 8007a82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a86:	3b30      	subs	r3, #48	; 0x30
 8007a88:	2b09      	cmp	r3, #9
 8007a8a:	d94e      	bls.n	8007b2a <_svfiprintf_r+0x17e>
 8007a8c:	b1b0      	cbz	r0, 8007abc <_svfiprintf_r+0x110>
 8007a8e:	9207      	str	r2, [sp, #28]
 8007a90:	e014      	b.n	8007abc <_svfiprintf_r+0x110>
 8007a92:	eba0 0308 	sub.w	r3, r0, r8
 8007a96:	fa09 f303 	lsl.w	r3, r9, r3
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	46a2      	mov	sl, r4
 8007aa0:	e7d2      	b.n	8007a48 <_svfiprintf_r+0x9c>
 8007aa2:	9b03      	ldr	r3, [sp, #12]
 8007aa4:	1d19      	adds	r1, r3, #4
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	9103      	str	r1, [sp, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	bfbb      	ittet	lt
 8007aae:	425b      	neglt	r3, r3
 8007ab0:	f042 0202 	orrlt.w	r2, r2, #2
 8007ab4:	9307      	strge	r3, [sp, #28]
 8007ab6:	9307      	strlt	r3, [sp, #28]
 8007ab8:	bfb8      	it	lt
 8007aba:	9204      	strlt	r2, [sp, #16]
 8007abc:	7823      	ldrb	r3, [r4, #0]
 8007abe:	2b2e      	cmp	r3, #46	; 0x2e
 8007ac0:	d10c      	bne.n	8007adc <_svfiprintf_r+0x130>
 8007ac2:	7863      	ldrb	r3, [r4, #1]
 8007ac4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ac6:	d135      	bne.n	8007b34 <_svfiprintf_r+0x188>
 8007ac8:	9b03      	ldr	r3, [sp, #12]
 8007aca:	1d1a      	adds	r2, r3, #4
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	9203      	str	r2, [sp, #12]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	bfb8      	it	lt
 8007ad4:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ad8:	3402      	adds	r4, #2
 8007ada:	9305      	str	r3, [sp, #20]
 8007adc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007ba8 <_svfiprintf_r+0x1fc>
 8007ae0:	7821      	ldrb	r1, [r4, #0]
 8007ae2:	2203      	movs	r2, #3
 8007ae4:	4650      	mov	r0, sl
 8007ae6:	f7f8 fb83 	bl	80001f0 <memchr>
 8007aea:	b140      	cbz	r0, 8007afe <_svfiprintf_r+0x152>
 8007aec:	2340      	movs	r3, #64	; 0x40
 8007aee:	eba0 000a 	sub.w	r0, r0, sl
 8007af2:	fa03 f000 	lsl.w	r0, r3, r0
 8007af6:	9b04      	ldr	r3, [sp, #16]
 8007af8:	4303      	orrs	r3, r0
 8007afa:	3401      	adds	r4, #1
 8007afc:	9304      	str	r3, [sp, #16]
 8007afe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b02:	4826      	ldr	r0, [pc, #152]	; (8007b9c <_svfiprintf_r+0x1f0>)
 8007b04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007b08:	2206      	movs	r2, #6
 8007b0a:	f7f8 fb71 	bl	80001f0 <memchr>
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	d038      	beq.n	8007b84 <_svfiprintf_r+0x1d8>
 8007b12:	4b23      	ldr	r3, [pc, #140]	; (8007ba0 <_svfiprintf_r+0x1f4>)
 8007b14:	bb1b      	cbnz	r3, 8007b5e <_svfiprintf_r+0x1b2>
 8007b16:	9b03      	ldr	r3, [sp, #12]
 8007b18:	3307      	adds	r3, #7
 8007b1a:	f023 0307 	bic.w	r3, r3, #7
 8007b1e:	3308      	adds	r3, #8
 8007b20:	9303      	str	r3, [sp, #12]
 8007b22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b24:	4433      	add	r3, r6
 8007b26:	9309      	str	r3, [sp, #36]	; 0x24
 8007b28:	e767      	b.n	80079fa <_svfiprintf_r+0x4e>
 8007b2a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b2e:	460c      	mov	r4, r1
 8007b30:	2001      	movs	r0, #1
 8007b32:	e7a5      	b.n	8007a80 <_svfiprintf_r+0xd4>
 8007b34:	2300      	movs	r3, #0
 8007b36:	3401      	adds	r4, #1
 8007b38:	9305      	str	r3, [sp, #20]
 8007b3a:	4619      	mov	r1, r3
 8007b3c:	f04f 0c0a 	mov.w	ip, #10
 8007b40:	4620      	mov	r0, r4
 8007b42:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b46:	3a30      	subs	r2, #48	; 0x30
 8007b48:	2a09      	cmp	r2, #9
 8007b4a:	d903      	bls.n	8007b54 <_svfiprintf_r+0x1a8>
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d0c5      	beq.n	8007adc <_svfiprintf_r+0x130>
 8007b50:	9105      	str	r1, [sp, #20]
 8007b52:	e7c3      	b.n	8007adc <_svfiprintf_r+0x130>
 8007b54:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b58:	4604      	mov	r4, r0
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e7f0      	b.n	8007b40 <_svfiprintf_r+0x194>
 8007b5e:	ab03      	add	r3, sp, #12
 8007b60:	9300      	str	r3, [sp, #0]
 8007b62:	462a      	mov	r2, r5
 8007b64:	4b0f      	ldr	r3, [pc, #60]	; (8007ba4 <_svfiprintf_r+0x1f8>)
 8007b66:	a904      	add	r1, sp, #16
 8007b68:	4638      	mov	r0, r7
 8007b6a:	f7fd ff3d 	bl	80059e8 <_printf_float>
 8007b6e:	1c42      	adds	r2, r0, #1
 8007b70:	4606      	mov	r6, r0
 8007b72:	d1d6      	bne.n	8007b22 <_svfiprintf_r+0x176>
 8007b74:	89ab      	ldrh	r3, [r5, #12]
 8007b76:	065b      	lsls	r3, r3, #25
 8007b78:	f53f af2c 	bmi.w	80079d4 <_svfiprintf_r+0x28>
 8007b7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b7e:	b01d      	add	sp, #116	; 0x74
 8007b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b84:	ab03      	add	r3, sp, #12
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	462a      	mov	r2, r5
 8007b8a:	4b06      	ldr	r3, [pc, #24]	; (8007ba4 <_svfiprintf_r+0x1f8>)
 8007b8c:	a904      	add	r1, sp, #16
 8007b8e:	4638      	mov	r0, r7
 8007b90:	f7fe f9ce 	bl	8005f30 <_printf_i>
 8007b94:	e7eb      	b.n	8007b6e <_svfiprintf_r+0x1c2>
 8007b96:	bf00      	nop
 8007b98:	08008b3c 	.word	0x08008b3c
 8007b9c:	08008b46 	.word	0x08008b46
 8007ba0:	080059e9 	.word	0x080059e9
 8007ba4:	080078f5 	.word	0x080078f5
 8007ba8:	08008b42 	.word	0x08008b42

08007bac <_sbrk_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4d06      	ldr	r5, [pc, #24]	; (8007bc8 <_sbrk_r+0x1c>)
 8007bb0:	2300      	movs	r3, #0
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	602b      	str	r3, [r5, #0]
 8007bb8:	f7fa fa2a 	bl	8002010 <_sbrk>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d102      	bne.n	8007bc6 <_sbrk_r+0x1a>
 8007bc0:	682b      	ldr	r3, [r5, #0]
 8007bc2:	b103      	cbz	r3, 8007bc6 <_sbrk_r+0x1a>
 8007bc4:	6023      	str	r3, [r4, #0]
 8007bc6:	bd38      	pop	{r3, r4, r5, pc}
 8007bc8:	20000380 	.word	0x20000380

08007bcc <__assert_func>:
 8007bcc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007bce:	4614      	mov	r4, r2
 8007bd0:	461a      	mov	r2, r3
 8007bd2:	4b09      	ldr	r3, [pc, #36]	; (8007bf8 <__assert_func+0x2c>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	4605      	mov	r5, r0
 8007bd8:	68d8      	ldr	r0, [r3, #12]
 8007bda:	b14c      	cbz	r4, 8007bf0 <__assert_func+0x24>
 8007bdc:	4b07      	ldr	r3, [pc, #28]	; (8007bfc <__assert_func+0x30>)
 8007bde:	9100      	str	r1, [sp, #0]
 8007be0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007be4:	4906      	ldr	r1, [pc, #24]	; (8007c00 <__assert_func+0x34>)
 8007be6:	462b      	mov	r3, r5
 8007be8:	f000 f80e 	bl	8007c08 <fiprintf>
 8007bec:	f000 faac 	bl	8008148 <abort>
 8007bf0:	4b04      	ldr	r3, [pc, #16]	; (8007c04 <__assert_func+0x38>)
 8007bf2:	461c      	mov	r4, r3
 8007bf4:	e7f3      	b.n	8007bde <__assert_func+0x12>
 8007bf6:	bf00      	nop
 8007bf8:	2000000c 	.word	0x2000000c
 8007bfc:	08008b4d 	.word	0x08008b4d
 8007c00:	08008b5a 	.word	0x08008b5a
 8007c04:	08008b88 	.word	0x08008b88

08007c08 <fiprintf>:
 8007c08:	b40e      	push	{r1, r2, r3}
 8007c0a:	b503      	push	{r0, r1, lr}
 8007c0c:	4601      	mov	r1, r0
 8007c0e:	ab03      	add	r3, sp, #12
 8007c10:	4805      	ldr	r0, [pc, #20]	; (8007c28 <fiprintf+0x20>)
 8007c12:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c16:	6800      	ldr	r0, [r0, #0]
 8007c18:	9301      	str	r3, [sp, #4]
 8007c1a:	f000 f897 	bl	8007d4c <_vfiprintf_r>
 8007c1e:	b002      	add	sp, #8
 8007c20:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c24:	b003      	add	sp, #12
 8007c26:	4770      	bx	lr
 8007c28:	2000000c 	.word	0x2000000c

08007c2c <__ascii_mbtowc>:
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	b901      	cbnz	r1, 8007c32 <__ascii_mbtowc+0x6>
 8007c30:	a901      	add	r1, sp, #4
 8007c32:	b142      	cbz	r2, 8007c46 <__ascii_mbtowc+0x1a>
 8007c34:	b14b      	cbz	r3, 8007c4a <__ascii_mbtowc+0x1e>
 8007c36:	7813      	ldrb	r3, [r2, #0]
 8007c38:	600b      	str	r3, [r1, #0]
 8007c3a:	7812      	ldrb	r2, [r2, #0]
 8007c3c:	1e10      	subs	r0, r2, #0
 8007c3e:	bf18      	it	ne
 8007c40:	2001      	movne	r0, #1
 8007c42:	b002      	add	sp, #8
 8007c44:	4770      	bx	lr
 8007c46:	4610      	mov	r0, r2
 8007c48:	e7fb      	b.n	8007c42 <__ascii_mbtowc+0x16>
 8007c4a:	f06f 0001 	mvn.w	r0, #1
 8007c4e:	e7f8      	b.n	8007c42 <__ascii_mbtowc+0x16>

08007c50 <memmove>:
 8007c50:	4288      	cmp	r0, r1
 8007c52:	b510      	push	{r4, lr}
 8007c54:	eb01 0402 	add.w	r4, r1, r2
 8007c58:	d902      	bls.n	8007c60 <memmove+0x10>
 8007c5a:	4284      	cmp	r4, r0
 8007c5c:	4623      	mov	r3, r4
 8007c5e:	d807      	bhi.n	8007c70 <memmove+0x20>
 8007c60:	1e43      	subs	r3, r0, #1
 8007c62:	42a1      	cmp	r1, r4
 8007c64:	d008      	beq.n	8007c78 <memmove+0x28>
 8007c66:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c6e:	e7f8      	b.n	8007c62 <memmove+0x12>
 8007c70:	4402      	add	r2, r0
 8007c72:	4601      	mov	r1, r0
 8007c74:	428a      	cmp	r2, r1
 8007c76:	d100      	bne.n	8007c7a <memmove+0x2a>
 8007c78:	bd10      	pop	{r4, pc}
 8007c7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c82:	e7f7      	b.n	8007c74 <memmove+0x24>

08007c84 <__malloc_lock>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__malloc_lock+0x8>)
 8007c86:	f000 bc1f 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	20000384 	.word	0x20000384

08007c90 <__malloc_unlock>:
 8007c90:	4801      	ldr	r0, [pc, #4]	; (8007c98 <__malloc_unlock+0x8>)
 8007c92:	f000 bc1a 	b.w	80084ca <__retarget_lock_release_recursive>
 8007c96:	bf00      	nop
 8007c98:	20000384 	.word	0x20000384

08007c9c <_realloc_r>:
 8007c9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ca0:	4680      	mov	r8, r0
 8007ca2:	4614      	mov	r4, r2
 8007ca4:	460e      	mov	r6, r1
 8007ca6:	b921      	cbnz	r1, 8007cb2 <_realloc_r+0x16>
 8007ca8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cac:	4611      	mov	r1, r2
 8007cae:	f7ff bdad 	b.w	800780c <_malloc_r>
 8007cb2:	b92a      	cbnz	r2, 8007cc0 <_realloc_r+0x24>
 8007cb4:	f7ff fd3e 	bl	8007734 <_free_r>
 8007cb8:	4625      	mov	r5, r4
 8007cba:	4628      	mov	r0, r5
 8007cbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cc0:	f000 fc6a 	bl	8008598 <_malloc_usable_size_r>
 8007cc4:	4284      	cmp	r4, r0
 8007cc6:	4607      	mov	r7, r0
 8007cc8:	d802      	bhi.n	8007cd0 <_realloc_r+0x34>
 8007cca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007cce:	d812      	bhi.n	8007cf6 <_realloc_r+0x5a>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4640      	mov	r0, r8
 8007cd4:	f7ff fd9a 	bl	800780c <_malloc_r>
 8007cd8:	4605      	mov	r5, r0
 8007cda:	2800      	cmp	r0, #0
 8007cdc:	d0ed      	beq.n	8007cba <_realloc_r+0x1e>
 8007cde:	42bc      	cmp	r4, r7
 8007ce0:	4622      	mov	r2, r4
 8007ce2:	4631      	mov	r1, r6
 8007ce4:	bf28      	it	cs
 8007ce6:	463a      	movcs	r2, r7
 8007ce8:	f7ff f97c 	bl	8006fe4 <memcpy>
 8007cec:	4631      	mov	r1, r6
 8007cee:	4640      	mov	r0, r8
 8007cf0:	f7ff fd20 	bl	8007734 <_free_r>
 8007cf4:	e7e1      	b.n	8007cba <_realloc_r+0x1e>
 8007cf6:	4635      	mov	r5, r6
 8007cf8:	e7df      	b.n	8007cba <_realloc_r+0x1e>

08007cfa <__sfputc_r>:
 8007cfa:	6893      	ldr	r3, [r2, #8]
 8007cfc:	3b01      	subs	r3, #1
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	b410      	push	{r4}
 8007d02:	6093      	str	r3, [r2, #8]
 8007d04:	da08      	bge.n	8007d18 <__sfputc_r+0x1e>
 8007d06:	6994      	ldr	r4, [r2, #24]
 8007d08:	42a3      	cmp	r3, r4
 8007d0a:	db01      	blt.n	8007d10 <__sfputc_r+0x16>
 8007d0c:	290a      	cmp	r1, #10
 8007d0e:	d103      	bne.n	8007d18 <__sfputc_r+0x1e>
 8007d10:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d14:	f000 b94a 	b.w	8007fac <__swbuf_r>
 8007d18:	6813      	ldr	r3, [r2, #0]
 8007d1a:	1c58      	adds	r0, r3, #1
 8007d1c:	6010      	str	r0, [r2, #0]
 8007d1e:	7019      	strb	r1, [r3, #0]
 8007d20:	4608      	mov	r0, r1
 8007d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <__sfputs_r>:
 8007d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2a:	4606      	mov	r6, r0
 8007d2c:	460f      	mov	r7, r1
 8007d2e:	4614      	mov	r4, r2
 8007d30:	18d5      	adds	r5, r2, r3
 8007d32:	42ac      	cmp	r4, r5
 8007d34:	d101      	bne.n	8007d3a <__sfputs_r+0x12>
 8007d36:	2000      	movs	r0, #0
 8007d38:	e007      	b.n	8007d4a <__sfputs_r+0x22>
 8007d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d3e:	463a      	mov	r2, r7
 8007d40:	4630      	mov	r0, r6
 8007d42:	f7ff ffda 	bl	8007cfa <__sfputc_r>
 8007d46:	1c43      	adds	r3, r0, #1
 8007d48:	d1f3      	bne.n	8007d32 <__sfputs_r+0xa>
 8007d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007d4c <_vfiprintf_r>:
 8007d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d50:	460d      	mov	r5, r1
 8007d52:	b09d      	sub	sp, #116	; 0x74
 8007d54:	4614      	mov	r4, r2
 8007d56:	4698      	mov	r8, r3
 8007d58:	4606      	mov	r6, r0
 8007d5a:	b118      	cbz	r0, 8007d64 <_vfiprintf_r+0x18>
 8007d5c:	6983      	ldr	r3, [r0, #24]
 8007d5e:	b90b      	cbnz	r3, 8007d64 <_vfiprintf_r+0x18>
 8007d60:	f000 fb14 	bl	800838c <__sinit>
 8007d64:	4b89      	ldr	r3, [pc, #548]	; (8007f8c <_vfiprintf_r+0x240>)
 8007d66:	429d      	cmp	r5, r3
 8007d68:	d11b      	bne.n	8007da2 <_vfiprintf_r+0x56>
 8007d6a:	6875      	ldr	r5, [r6, #4]
 8007d6c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d6e:	07d9      	lsls	r1, r3, #31
 8007d70:	d405      	bmi.n	8007d7e <_vfiprintf_r+0x32>
 8007d72:	89ab      	ldrh	r3, [r5, #12]
 8007d74:	059a      	lsls	r2, r3, #22
 8007d76:	d402      	bmi.n	8007d7e <_vfiprintf_r+0x32>
 8007d78:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d7a:	f000 fba5 	bl	80084c8 <__retarget_lock_acquire_recursive>
 8007d7e:	89ab      	ldrh	r3, [r5, #12]
 8007d80:	071b      	lsls	r3, r3, #28
 8007d82:	d501      	bpl.n	8007d88 <_vfiprintf_r+0x3c>
 8007d84:	692b      	ldr	r3, [r5, #16]
 8007d86:	b9eb      	cbnz	r3, 8007dc4 <_vfiprintf_r+0x78>
 8007d88:	4629      	mov	r1, r5
 8007d8a:	4630      	mov	r0, r6
 8007d8c:	f000 f96e 	bl	800806c <__swsetup_r>
 8007d90:	b1c0      	cbz	r0, 8007dc4 <_vfiprintf_r+0x78>
 8007d92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d94:	07dc      	lsls	r4, r3, #31
 8007d96:	d50e      	bpl.n	8007db6 <_vfiprintf_r+0x6a>
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	b01d      	add	sp, #116	; 0x74
 8007d9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da2:	4b7b      	ldr	r3, [pc, #492]	; (8007f90 <_vfiprintf_r+0x244>)
 8007da4:	429d      	cmp	r5, r3
 8007da6:	d101      	bne.n	8007dac <_vfiprintf_r+0x60>
 8007da8:	68b5      	ldr	r5, [r6, #8]
 8007daa:	e7df      	b.n	8007d6c <_vfiprintf_r+0x20>
 8007dac:	4b79      	ldr	r3, [pc, #484]	; (8007f94 <_vfiprintf_r+0x248>)
 8007dae:	429d      	cmp	r5, r3
 8007db0:	bf08      	it	eq
 8007db2:	68f5      	ldreq	r5, [r6, #12]
 8007db4:	e7da      	b.n	8007d6c <_vfiprintf_r+0x20>
 8007db6:	89ab      	ldrh	r3, [r5, #12]
 8007db8:	0598      	lsls	r0, r3, #22
 8007dba:	d4ed      	bmi.n	8007d98 <_vfiprintf_r+0x4c>
 8007dbc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007dbe:	f000 fb84 	bl	80084ca <__retarget_lock_release_recursive>
 8007dc2:	e7e9      	b.n	8007d98 <_vfiprintf_r+0x4c>
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8007dc8:	2320      	movs	r3, #32
 8007dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dce:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dd2:	2330      	movs	r3, #48	; 0x30
 8007dd4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007f98 <_vfiprintf_r+0x24c>
 8007dd8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ddc:	f04f 0901 	mov.w	r9, #1
 8007de0:	4623      	mov	r3, r4
 8007de2:	469a      	mov	sl, r3
 8007de4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007de8:	b10a      	cbz	r2, 8007dee <_vfiprintf_r+0xa2>
 8007dea:	2a25      	cmp	r2, #37	; 0x25
 8007dec:	d1f9      	bne.n	8007de2 <_vfiprintf_r+0x96>
 8007dee:	ebba 0b04 	subs.w	fp, sl, r4
 8007df2:	d00b      	beq.n	8007e0c <_vfiprintf_r+0xc0>
 8007df4:	465b      	mov	r3, fp
 8007df6:	4622      	mov	r2, r4
 8007df8:	4629      	mov	r1, r5
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f7ff ff94 	bl	8007d28 <__sfputs_r>
 8007e00:	3001      	adds	r0, #1
 8007e02:	f000 80aa 	beq.w	8007f5a <_vfiprintf_r+0x20e>
 8007e06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e08:	445a      	add	r2, fp
 8007e0a:	9209      	str	r2, [sp, #36]	; 0x24
 8007e0c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	f000 80a2 	beq.w	8007f5a <_vfiprintf_r+0x20e>
 8007e16:	2300      	movs	r3, #0
 8007e18:	f04f 32ff 	mov.w	r2, #4294967295
 8007e1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e20:	f10a 0a01 	add.w	sl, sl, #1
 8007e24:	9304      	str	r3, [sp, #16]
 8007e26:	9307      	str	r3, [sp, #28]
 8007e28:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e2c:	931a      	str	r3, [sp, #104]	; 0x68
 8007e2e:	4654      	mov	r4, sl
 8007e30:	2205      	movs	r2, #5
 8007e32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e36:	4858      	ldr	r0, [pc, #352]	; (8007f98 <_vfiprintf_r+0x24c>)
 8007e38:	f7f8 f9da 	bl	80001f0 <memchr>
 8007e3c:	9a04      	ldr	r2, [sp, #16]
 8007e3e:	b9d8      	cbnz	r0, 8007e78 <_vfiprintf_r+0x12c>
 8007e40:	06d1      	lsls	r1, r2, #27
 8007e42:	bf44      	itt	mi
 8007e44:	2320      	movmi	r3, #32
 8007e46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e4a:	0713      	lsls	r3, r2, #28
 8007e4c:	bf44      	itt	mi
 8007e4e:	232b      	movmi	r3, #43	; 0x2b
 8007e50:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e54:	f89a 3000 	ldrb.w	r3, [sl]
 8007e58:	2b2a      	cmp	r3, #42	; 0x2a
 8007e5a:	d015      	beq.n	8007e88 <_vfiprintf_r+0x13c>
 8007e5c:	9a07      	ldr	r2, [sp, #28]
 8007e5e:	4654      	mov	r4, sl
 8007e60:	2000      	movs	r0, #0
 8007e62:	f04f 0c0a 	mov.w	ip, #10
 8007e66:	4621      	mov	r1, r4
 8007e68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e6c:	3b30      	subs	r3, #48	; 0x30
 8007e6e:	2b09      	cmp	r3, #9
 8007e70:	d94e      	bls.n	8007f10 <_vfiprintf_r+0x1c4>
 8007e72:	b1b0      	cbz	r0, 8007ea2 <_vfiprintf_r+0x156>
 8007e74:	9207      	str	r2, [sp, #28]
 8007e76:	e014      	b.n	8007ea2 <_vfiprintf_r+0x156>
 8007e78:	eba0 0308 	sub.w	r3, r0, r8
 8007e7c:	fa09 f303 	lsl.w	r3, r9, r3
 8007e80:	4313      	orrs	r3, r2
 8007e82:	9304      	str	r3, [sp, #16]
 8007e84:	46a2      	mov	sl, r4
 8007e86:	e7d2      	b.n	8007e2e <_vfiprintf_r+0xe2>
 8007e88:	9b03      	ldr	r3, [sp, #12]
 8007e8a:	1d19      	adds	r1, r3, #4
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	9103      	str	r1, [sp, #12]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	bfbb      	ittet	lt
 8007e94:	425b      	neglt	r3, r3
 8007e96:	f042 0202 	orrlt.w	r2, r2, #2
 8007e9a:	9307      	strge	r3, [sp, #28]
 8007e9c:	9307      	strlt	r3, [sp, #28]
 8007e9e:	bfb8      	it	lt
 8007ea0:	9204      	strlt	r2, [sp, #16]
 8007ea2:	7823      	ldrb	r3, [r4, #0]
 8007ea4:	2b2e      	cmp	r3, #46	; 0x2e
 8007ea6:	d10c      	bne.n	8007ec2 <_vfiprintf_r+0x176>
 8007ea8:	7863      	ldrb	r3, [r4, #1]
 8007eaa:	2b2a      	cmp	r3, #42	; 0x2a
 8007eac:	d135      	bne.n	8007f1a <_vfiprintf_r+0x1ce>
 8007eae:	9b03      	ldr	r3, [sp, #12]
 8007eb0:	1d1a      	adds	r2, r3, #4
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	9203      	str	r2, [sp, #12]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	bfb8      	it	lt
 8007eba:	f04f 33ff 	movlt.w	r3, #4294967295
 8007ebe:	3402      	adds	r4, #2
 8007ec0:	9305      	str	r3, [sp, #20]
 8007ec2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007fa8 <_vfiprintf_r+0x25c>
 8007ec6:	7821      	ldrb	r1, [r4, #0]
 8007ec8:	2203      	movs	r2, #3
 8007eca:	4650      	mov	r0, sl
 8007ecc:	f7f8 f990 	bl	80001f0 <memchr>
 8007ed0:	b140      	cbz	r0, 8007ee4 <_vfiprintf_r+0x198>
 8007ed2:	2340      	movs	r3, #64	; 0x40
 8007ed4:	eba0 000a 	sub.w	r0, r0, sl
 8007ed8:	fa03 f000 	lsl.w	r0, r3, r0
 8007edc:	9b04      	ldr	r3, [sp, #16]
 8007ede:	4303      	orrs	r3, r0
 8007ee0:	3401      	adds	r4, #1
 8007ee2:	9304      	str	r3, [sp, #16]
 8007ee4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ee8:	482c      	ldr	r0, [pc, #176]	; (8007f9c <_vfiprintf_r+0x250>)
 8007eea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007eee:	2206      	movs	r2, #6
 8007ef0:	f7f8 f97e 	bl	80001f0 <memchr>
 8007ef4:	2800      	cmp	r0, #0
 8007ef6:	d03f      	beq.n	8007f78 <_vfiprintf_r+0x22c>
 8007ef8:	4b29      	ldr	r3, [pc, #164]	; (8007fa0 <_vfiprintf_r+0x254>)
 8007efa:	bb1b      	cbnz	r3, 8007f44 <_vfiprintf_r+0x1f8>
 8007efc:	9b03      	ldr	r3, [sp, #12]
 8007efe:	3307      	adds	r3, #7
 8007f00:	f023 0307 	bic.w	r3, r3, #7
 8007f04:	3308      	adds	r3, #8
 8007f06:	9303      	str	r3, [sp, #12]
 8007f08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f0a:	443b      	add	r3, r7
 8007f0c:	9309      	str	r3, [sp, #36]	; 0x24
 8007f0e:	e767      	b.n	8007de0 <_vfiprintf_r+0x94>
 8007f10:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f14:	460c      	mov	r4, r1
 8007f16:	2001      	movs	r0, #1
 8007f18:	e7a5      	b.n	8007e66 <_vfiprintf_r+0x11a>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	3401      	adds	r4, #1
 8007f1e:	9305      	str	r3, [sp, #20]
 8007f20:	4619      	mov	r1, r3
 8007f22:	f04f 0c0a 	mov.w	ip, #10
 8007f26:	4620      	mov	r0, r4
 8007f28:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f2c:	3a30      	subs	r2, #48	; 0x30
 8007f2e:	2a09      	cmp	r2, #9
 8007f30:	d903      	bls.n	8007f3a <_vfiprintf_r+0x1ee>
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d0c5      	beq.n	8007ec2 <_vfiprintf_r+0x176>
 8007f36:	9105      	str	r1, [sp, #20]
 8007f38:	e7c3      	b.n	8007ec2 <_vfiprintf_r+0x176>
 8007f3a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f3e:	4604      	mov	r4, r0
 8007f40:	2301      	movs	r3, #1
 8007f42:	e7f0      	b.n	8007f26 <_vfiprintf_r+0x1da>
 8007f44:	ab03      	add	r3, sp, #12
 8007f46:	9300      	str	r3, [sp, #0]
 8007f48:	462a      	mov	r2, r5
 8007f4a:	4b16      	ldr	r3, [pc, #88]	; (8007fa4 <_vfiprintf_r+0x258>)
 8007f4c:	a904      	add	r1, sp, #16
 8007f4e:	4630      	mov	r0, r6
 8007f50:	f7fd fd4a 	bl	80059e8 <_printf_float>
 8007f54:	4607      	mov	r7, r0
 8007f56:	1c78      	adds	r0, r7, #1
 8007f58:	d1d6      	bne.n	8007f08 <_vfiprintf_r+0x1bc>
 8007f5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007f5c:	07d9      	lsls	r1, r3, #31
 8007f5e:	d405      	bmi.n	8007f6c <_vfiprintf_r+0x220>
 8007f60:	89ab      	ldrh	r3, [r5, #12]
 8007f62:	059a      	lsls	r2, r3, #22
 8007f64:	d402      	bmi.n	8007f6c <_vfiprintf_r+0x220>
 8007f66:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007f68:	f000 faaf 	bl	80084ca <__retarget_lock_release_recursive>
 8007f6c:	89ab      	ldrh	r3, [r5, #12]
 8007f6e:	065b      	lsls	r3, r3, #25
 8007f70:	f53f af12 	bmi.w	8007d98 <_vfiprintf_r+0x4c>
 8007f74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f76:	e711      	b.n	8007d9c <_vfiprintf_r+0x50>
 8007f78:	ab03      	add	r3, sp, #12
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	462a      	mov	r2, r5
 8007f7e:	4b09      	ldr	r3, [pc, #36]	; (8007fa4 <_vfiprintf_r+0x258>)
 8007f80:	a904      	add	r1, sp, #16
 8007f82:	4630      	mov	r0, r6
 8007f84:	f7fd ffd4 	bl	8005f30 <_printf_i>
 8007f88:	e7e4      	b.n	8007f54 <_vfiprintf_r+0x208>
 8007f8a:	bf00      	nop
 8007f8c:	08008bb4 	.word	0x08008bb4
 8007f90:	08008bd4 	.word	0x08008bd4
 8007f94:	08008b94 	.word	0x08008b94
 8007f98:	08008b3c 	.word	0x08008b3c
 8007f9c:	08008b46 	.word	0x08008b46
 8007fa0:	080059e9 	.word	0x080059e9
 8007fa4:	08007d29 	.word	0x08007d29
 8007fa8:	08008b42 	.word	0x08008b42

08007fac <__swbuf_r>:
 8007fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fae:	460e      	mov	r6, r1
 8007fb0:	4614      	mov	r4, r2
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	b118      	cbz	r0, 8007fbe <__swbuf_r+0x12>
 8007fb6:	6983      	ldr	r3, [r0, #24]
 8007fb8:	b90b      	cbnz	r3, 8007fbe <__swbuf_r+0x12>
 8007fba:	f000 f9e7 	bl	800838c <__sinit>
 8007fbe:	4b21      	ldr	r3, [pc, #132]	; (8008044 <__swbuf_r+0x98>)
 8007fc0:	429c      	cmp	r4, r3
 8007fc2:	d12b      	bne.n	800801c <__swbuf_r+0x70>
 8007fc4:	686c      	ldr	r4, [r5, #4]
 8007fc6:	69a3      	ldr	r3, [r4, #24]
 8007fc8:	60a3      	str	r3, [r4, #8]
 8007fca:	89a3      	ldrh	r3, [r4, #12]
 8007fcc:	071a      	lsls	r2, r3, #28
 8007fce:	d52f      	bpl.n	8008030 <__swbuf_r+0x84>
 8007fd0:	6923      	ldr	r3, [r4, #16]
 8007fd2:	b36b      	cbz	r3, 8008030 <__swbuf_r+0x84>
 8007fd4:	6923      	ldr	r3, [r4, #16]
 8007fd6:	6820      	ldr	r0, [r4, #0]
 8007fd8:	1ac0      	subs	r0, r0, r3
 8007fda:	6963      	ldr	r3, [r4, #20]
 8007fdc:	b2f6      	uxtb	r6, r6
 8007fde:	4283      	cmp	r3, r0
 8007fe0:	4637      	mov	r7, r6
 8007fe2:	dc04      	bgt.n	8007fee <__swbuf_r+0x42>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 f93c 	bl	8008264 <_fflush_r>
 8007fec:	bb30      	cbnz	r0, 800803c <__swbuf_r+0x90>
 8007fee:	68a3      	ldr	r3, [r4, #8]
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	60a3      	str	r3, [r4, #8]
 8007ff4:	6823      	ldr	r3, [r4, #0]
 8007ff6:	1c5a      	adds	r2, r3, #1
 8007ff8:	6022      	str	r2, [r4, #0]
 8007ffa:	701e      	strb	r6, [r3, #0]
 8007ffc:	6963      	ldr	r3, [r4, #20]
 8007ffe:	3001      	adds	r0, #1
 8008000:	4283      	cmp	r3, r0
 8008002:	d004      	beq.n	800800e <__swbuf_r+0x62>
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	07db      	lsls	r3, r3, #31
 8008008:	d506      	bpl.n	8008018 <__swbuf_r+0x6c>
 800800a:	2e0a      	cmp	r6, #10
 800800c:	d104      	bne.n	8008018 <__swbuf_r+0x6c>
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 f927 	bl	8008264 <_fflush_r>
 8008016:	b988      	cbnz	r0, 800803c <__swbuf_r+0x90>
 8008018:	4638      	mov	r0, r7
 800801a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800801c:	4b0a      	ldr	r3, [pc, #40]	; (8008048 <__swbuf_r+0x9c>)
 800801e:	429c      	cmp	r4, r3
 8008020:	d101      	bne.n	8008026 <__swbuf_r+0x7a>
 8008022:	68ac      	ldr	r4, [r5, #8]
 8008024:	e7cf      	b.n	8007fc6 <__swbuf_r+0x1a>
 8008026:	4b09      	ldr	r3, [pc, #36]	; (800804c <__swbuf_r+0xa0>)
 8008028:	429c      	cmp	r4, r3
 800802a:	bf08      	it	eq
 800802c:	68ec      	ldreq	r4, [r5, #12]
 800802e:	e7ca      	b.n	8007fc6 <__swbuf_r+0x1a>
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f000 f81a 	bl	800806c <__swsetup_r>
 8008038:	2800      	cmp	r0, #0
 800803a:	d0cb      	beq.n	8007fd4 <__swbuf_r+0x28>
 800803c:	f04f 37ff 	mov.w	r7, #4294967295
 8008040:	e7ea      	b.n	8008018 <__swbuf_r+0x6c>
 8008042:	bf00      	nop
 8008044:	08008bb4 	.word	0x08008bb4
 8008048:	08008bd4 	.word	0x08008bd4
 800804c:	08008b94 	.word	0x08008b94

08008050 <__ascii_wctomb>:
 8008050:	b149      	cbz	r1, 8008066 <__ascii_wctomb+0x16>
 8008052:	2aff      	cmp	r2, #255	; 0xff
 8008054:	bf85      	ittet	hi
 8008056:	238a      	movhi	r3, #138	; 0x8a
 8008058:	6003      	strhi	r3, [r0, #0]
 800805a:	700a      	strbls	r2, [r1, #0]
 800805c:	f04f 30ff 	movhi.w	r0, #4294967295
 8008060:	bf98      	it	ls
 8008062:	2001      	movls	r0, #1
 8008064:	4770      	bx	lr
 8008066:	4608      	mov	r0, r1
 8008068:	4770      	bx	lr
	...

0800806c <__swsetup_r>:
 800806c:	4b32      	ldr	r3, [pc, #200]	; (8008138 <__swsetup_r+0xcc>)
 800806e:	b570      	push	{r4, r5, r6, lr}
 8008070:	681d      	ldr	r5, [r3, #0]
 8008072:	4606      	mov	r6, r0
 8008074:	460c      	mov	r4, r1
 8008076:	b125      	cbz	r5, 8008082 <__swsetup_r+0x16>
 8008078:	69ab      	ldr	r3, [r5, #24]
 800807a:	b913      	cbnz	r3, 8008082 <__swsetup_r+0x16>
 800807c:	4628      	mov	r0, r5
 800807e:	f000 f985 	bl	800838c <__sinit>
 8008082:	4b2e      	ldr	r3, [pc, #184]	; (800813c <__swsetup_r+0xd0>)
 8008084:	429c      	cmp	r4, r3
 8008086:	d10f      	bne.n	80080a8 <__swsetup_r+0x3c>
 8008088:	686c      	ldr	r4, [r5, #4]
 800808a:	89a3      	ldrh	r3, [r4, #12]
 800808c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008090:	0719      	lsls	r1, r3, #28
 8008092:	d42c      	bmi.n	80080ee <__swsetup_r+0x82>
 8008094:	06dd      	lsls	r5, r3, #27
 8008096:	d411      	bmi.n	80080bc <__swsetup_r+0x50>
 8008098:	2309      	movs	r3, #9
 800809a:	6033      	str	r3, [r6, #0]
 800809c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080a0:	81a3      	strh	r3, [r4, #12]
 80080a2:	f04f 30ff 	mov.w	r0, #4294967295
 80080a6:	e03e      	b.n	8008126 <__swsetup_r+0xba>
 80080a8:	4b25      	ldr	r3, [pc, #148]	; (8008140 <__swsetup_r+0xd4>)
 80080aa:	429c      	cmp	r4, r3
 80080ac:	d101      	bne.n	80080b2 <__swsetup_r+0x46>
 80080ae:	68ac      	ldr	r4, [r5, #8]
 80080b0:	e7eb      	b.n	800808a <__swsetup_r+0x1e>
 80080b2:	4b24      	ldr	r3, [pc, #144]	; (8008144 <__swsetup_r+0xd8>)
 80080b4:	429c      	cmp	r4, r3
 80080b6:	bf08      	it	eq
 80080b8:	68ec      	ldreq	r4, [r5, #12]
 80080ba:	e7e6      	b.n	800808a <__swsetup_r+0x1e>
 80080bc:	0758      	lsls	r0, r3, #29
 80080be:	d512      	bpl.n	80080e6 <__swsetup_r+0x7a>
 80080c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80080c2:	b141      	cbz	r1, 80080d6 <__swsetup_r+0x6a>
 80080c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80080c8:	4299      	cmp	r1, r3
 80080ca:	d002      	beq.n	80080d2 <__swsetup_r+0x66>
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff fb31 	bl	8007734 <_free_r>
 80080d2:	2300      	movs	r3, #0
 80080d4:	6363      	str	r3, [r4, #52]	; 0x34
 80080d6:	89a3      	ldrh	r3, [r4, #12]
 80080d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80080dc:	81a3      	strh	r3, [r4, #12]
 80080de:	2300      	movs	r3, #0
 80080e0:	6063      	str	r3, [r4, #4]
 80080e2:	6923      	ldr	r3, [r4, #16]
 80080e4:	6023      	str	r3, [r4, #0]
 80080e6:	89a3      	ldrh	r3, [r4, #12]
 80080e8:	f043 0308 	orr.w	r3, r3, #8
 80080ec:	81a3      	strh	r3, [r4, #12]
 80080ee:	6923      	ldr	r3, [r4, #16]
 80080f0:	b94b      	cbnz	r3, 8008106 <__swsetup_r+0x9a>
 80080f2:	89a3      	ldrh	r3, [r4, #12]
 80080f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080fc:	d003      	beq.n	8008106 <__swsetup_r+0x9a>
 80080fe:	4621      	mov	r1, r4
 8008100:	4630      	mov	r0, r6
 8008102:	f000 fa09 	bl	8008518 <__smakebuf_r>
 8008106:	89a0      	ldrh	r0, [r4, #12]
 8008108:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800810c:	f010 0301 	ands.w	r3, r0, #1
 8008110:	d00a      	beq.n	8008128 <__swsetup_r+0xbc>
 8008112:	2300      	movs	r3, #0
 8008114:	60a3      	str	r3, [r4, #8]
 8008116:	6963      	ldr	r3, [r4, #20]
 8008118:	425b      	negs	r3, r3
 800811a:	61a3      	str	r3, [r4, #24]
 800811c:	6923      	ldr	r3, [r4, #16]
 800811e:	b943      	cbnz	r3, 8008132 <__swsetup_r+0xc6>
 8008120:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008124:	d1ba      	bne.n	800809c <__swsetup_r+0x30>
 8008126:	bd70      	pop	{r4, r5, r6, pc}
 8008128:	0781      	lsls	r1, r0, #30
 800812a:	bf58      	it	pl
 800812c:	6963      	ldrpl	r3, [r4, #20]
 800812e:	60a3      	str	r3, [r4, #8]
 8008130:	e7f4      	b.n	800811c <__swsetup_r+0xb0>
 8008132:	2000      	movs	r0, #0
 8008134:	e7f7      	b.n	8008126 <__swsetup_r+0xba>
 8008136:	bf00      	nop
 8008138:	2000000c 	.word	0x2000000c
 800813c:	08008bb4 	.word	0x08008bb4
 8008140:	08008bd4 	.word	0x08008bd4
 8008144:	08008b94 	.word	0x08008b94

08008148 <abort>:
 8008148:	b508      	push	{r3, lr}
 800814a:	2006      	movs	r0, #6
 800814c:	f000 fa54 	bl	80085f8 <raise>
 8008150:	2001      	movs	r0, #1
 8008152:	f7f9 fee5 	bl	8001f20 <_exit>
	...

08008158 <__sflush_r>:
 8008158:	898a      	ldrh	r2, [r1, #12]
 800815a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800815e:	4605      	mov	r5, r0
 8008160:	0710      	lsls	r0, r2, #28
 8008162:	460c      	mov	r4, r1
 8008164:	d458      	bmi.n	8008218 <__sflush_r+0xc0>
 8008166:	684b      	ldr	r3, [r1, #4]
 8008168:	2b00      	cmp	r3, #0
 800816a:	dc05      	bgt.n	8008178 <__sflush_r+0x20>
 800816c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800816e:	2b00      	cmp	r3, #0
 8008170:	dc02      	bgt.n	8008178 <__sflush_r+0x20>
 8008172:	2000      	movs	r0, #0
 8008174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008178:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800817a:	2e00      	cmp	r6, #0
 800817c:	d0f9      	beq.n	8008172 <__sflush_r+0x1a>
 800817e:	2300      	movs	r3, #0
 8008180:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008184:	682f      	ldr	r7, [r5, #0]
 8008186:	602b      	str	r3, [r5, #0]
 8008188:	d032      	beq.n	80081f0 <__sflush_r+0x98>
 800818a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800818c:	89a3      	ldrh	r3, [r4, #12]
 800818e:	075a      	lsls	r2, r3, #29
 8008190:	d505      	bpl.n	800819e <__sflush_r+0x46>
 8008192:	6863      	ldr	r3, [r4, #4]
 8008194:	1ac0      	subs	r0, r0, r3
 8008196:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008198:	b10b      	cbz	r3, 800819e <__sflush_r+0x46>
 800819a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	2300      	movs	r3, #0
 80081a0:	4602      	mov	r2, r0
 80081a2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80081a4:	6a21      	ldr	r1, [r4, #32]
 80081a6:	4628      	mov	r0, r5
 80081a8:	47b0      	blx	r6
 80081aa:	1c43      	adds	r3, r0, #1
 80081ac:	89a3      	ldrh	r3, [r4, #12]
 80081ae:	d106      	bne.n	80081be <__sflush_r+0x66>
 80081b0:	6829      	ldr	r1, [r5, #0]
 80081b2:	291d      	cmp	r1, #29
 80081b4:	d82c      	bhi.n	8008210 <__sflush_r+0xb8>
 80081b6:	4a2a      	ldr	r2, [pc, #168]	; (8008260 <__sflush_r+0x108>)
 80081b8:	40ca      	lsrs	r2, r1
 80081ba:	07d6      	lsls	r6, r2, #31
 80081bc:	d528      	bpl.n	8008210 <__sflush_r+0xb8>
 80081be:	2200      	movs	r2, #0
 80081c0:	6062      	str	r2, [r4, #4]
 80081c2:	04d9      	lsls	r1, r3, #19
 80081c4:	6922      	ldr	r2, [r4, #16]
 80081c6:	6022      	str	r2, [r4, #0]
 80081c8:	d504      	bpl.n	80081d4 <__sflush_r+0x7c>
 80081ca:	1c42      	adds	r2, r0, #1
 80081cc:	d101      	bne.n	80081d2 <__sflush_r+0x7a>
 80081ce:	682b      	ldr	r3, [r5, #0]
 80081d0:	b903      	cbnz	r3, 80081d4 <__sflush_r+0x7c>
 80081d2:	6560      	str	r0, [r4, #84]	; 0x54
 80081d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80081d6:	602f      	str	r7, [r5, #0]
 80081d8:	2900      	cmp	r1, #0
 80081da:	d0ca      	beq.n	8008172 <__sflush_r+0x1a>
 80081dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081e0:	4299      	cmp	r1, r3
 80081e2:	d002      	beq.n	80081ea <__sflush_r+0x92>
 80081e4:	4628      	mov	r0, r5
 80081e6:	f7ff faa5 	bl	8007734 <_free_r>
 80081ea:	2000      	movs	r0, #0
 80081ec:	6360      	str	r0, [r4, #52]	; 0x34
 80081ee:	e7c1      	b.n	8008174 <__sflush_r+0x1c>
 80081f0:	6a21      	ldr	r1, [r4, #32]
 80081f2:	2301      	movs	r3, #1
 80081f4:	4628      	mov	r0, r5
 80081f6:	47b0      	blx	r6
 80081f8:	1c41      	adds	r1, r0, #1
 80081fa:	d1c7      	bne.n	800818c <__sflush_r+0x34>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d0c4      	beq.n	800818c <__sflush_r+0x34>
 8008202:	2b1d      	cmp	r3, #29
 8008204:	d001      	beq.n	800820a <__sflush_r+0xb2>
 8008206:	2b16      	cmp	r3, #22
 8008208:	d101      	bne.n	800820e <__sflush_r+0xb6>
 800820a:	602f      	str	r7, [r5, #0]
 800820c:	e7b1      	b.n	8008172 <__sflush_r+0x1a>
 800820e:	89a3      	ldrh	r3, [r4, #12]
 8008210:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	e7ad      	b.n	8008174 <__sflush_r+0x1c>
 8008218:	690f      	ldr	r7, [r1, #16]
 800821a:	2f00      	cmp	r7, #0
 800821c:	d0a9      	beq.n	8008172 <__sflush_r+0x1a>
 800821e:	0793      	lsls	r3, r2, #30
 8008220:	680e      	ldr	r6, [r1, #0]
 8008222:	bf08      	it	eq
 8008224:	694b      	ldreq	r3, [r1, #20]
 8008226:	600f      	str	r7, [r1, #0]
 8008228:	bf18      	it	ne
 800822a:	2300      	movne	r3, #0
 800822c:	eba6 0807 	sub.w	r8, r6, r7
 8008230:	608b      	str	r3, [r1, #8]
 8008232:	f1b8 0f00 	cmp.w	r8, #0
 8008236:	dd9c      	ble.n	8008172 <__sflush_r+0x1a>
 8008238:	6a21      	ldr	r1, [r4, #32]
 800823a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800823c:	4643      	mov	r3, r8
 800823e:	463a      	mov	r2, r7
 8008240:	4628      	mov	r0, r5
 8008242:	47b0      	blx	r6
 8008244:	2800      	cmp	r0, #0
 8008246:	dc06      	bgt.n	8008256 <__sflush_r+0xfe>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800824e:	81a3      	strh	r3, [r4, #12]
 8008250:	f04f 30ff 	mov.w	r0, #4294967295
 8008254:	e78e      	b.n	8008174 <__sflush_r+0x1c>
 8008256:	4407      	add	r7, r0
 8008258:	eba8 0800 	sub.w	r8, r8, r0
 800825c:	e7e9      	b.n	8008232 <__sflush_r+0xda>
 800825e:	bf00      	nop
 8008260:	20400001 	.word	0x20400001

08008264 <_fflush_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	690b      	ldr	r3, [r1, #16]
 8008268:	4605      	mov	r5, r0
 800826a:	460c      	mov	r4, r1
 800826c:	b913      	cbnz	r3, 8008274 <_fflush_r+0x10>
 800826e:	2500      	movs	r5, #0
 8008270:	4628      	mov	r0, r5
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	b118      	cbz	r0, 800827e <_fflush_r+0x1a>
 8008276:	6983      	ldr	r3, [r0, #24]
 8008278:	b90b      	cbnz	r3, 800827e <_fflush_r+0x1a>
 800827a:	f000 f887 	bl	800838c <__sinit>
 800827e:	4b14      	ldr	r3, [pc, #80]	; (80082d0 <_fflush_r+0x6c>)
 8008280:	429c      	cmp	r4, r3
 8008282:	d11b      	bne.n	80082bc <_fflush_r+0x58>
 8008284:	686c      	ldr	r4, [r5, #4]
 8008286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d0ef      	beq.n	800826e <_fflush_r+0xa>
 800828e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008290:	07d0      	lsls	r0, r2, #31
 8008292:	d404      	bmi.n	800829e <_fflush_r+0x3a>
 8008294:	0599      	lsls	r1, r3, #22
 8008296:	d402      	bmi.n	800829e <_fflush_r+0x3a>
 8008298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800829a:	f000 f915 	bl	80084c8 <__retarget_lock_acquire_recursive>
 800829e:	4628      	mov	r0, r5
 80082a0:	4621      	mov	r1, r4
 80082a2:	f7ff ff59 	bl	8008158 <__sflush_r>
 80082a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80082a8:	07da      	lsls	r2, r3, #31
 80082aa:	4605      	mov	r5, r0
 80082ac:	d4e0      	bmi.n	8008270 <_fflush_r+0xc>
 80082ae:	89a3      	ldrh	r3, [r4, #12]
 80082b0:	059b      	lsls	r3, r3, #22
 80082b2:	d4dd      	bmi.n	8008270 <_fflush_r+0xc>
 80082b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80082b6:	f000 f908 	bl	80084ca <__retarget_lock_release_recursive>
 80082ba:	e7d9      	b.n	8008270 <_fflush_r+0xc>
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <_fflush_r+0x70>)
 80082be:	429c      	cmp	r4, r3
 80082c0:	d101      	bne.n	80082c6 <_fflush_r+0x62>
 80082c2:	68ac      	ldr	r4, [r5, #8]
 80082c4:	e7df      	b.n	8008286 <_fflush_r+0x22>
 80082c6:	4b04      	ldr	r3, [pc, #16]	; (80082d8 <_fflush_r+0x74>)
 80082c8:	429c      	cmp	r4, r3
 80082ca:	bf08      	it	eq
 80082cc:	68ec      	ldreq	r4, [r5, #12]
 80082ce:	e7da      	b.n	8008286 <_fflush_r+0x22>
 80082d0:	08008bb4 	.word	0x08008bb4
 80082d4:	08008bd4 	.word	0x08008bd4
 80082d8:	08008b94 	.word	0x08008b94

080082dc <std>:
 80082dc:	2300      	movs	r3, #0
 80082de:	b510      	push	{r4, lr}
 80082e0:	4604      	mov	r4, r0
 80082e2:	e9c0 3300 	strd	r3, r3, [r0]
 80082e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ea:	6083      	str	r3, [r0, #8]
 80082ec:	8181      	strh	r1, [r0, #12]
 80082ee:	6643      	str	r3, [r0, #100]	; 0x64
 80082f0:	81c2      	strh	r2, [r0, #14]
 80082f2:	6183      	str	r3, [r0, #24]
 80082f4:	4619      	mov	r1, r3
 80082f6:	2208      	movs	r2, #8
 80082f8:	305c      	adds	r0, #92	; 0x5c
 80082fa:	f7fd facd 	bl	8005898 <memset>
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <std+0x38>)
 8008300:	6263      	str	r3, [r4, #36]	; 0x24
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <std+0x3c>)
 8008304:	62a3      	str	r3, [r4, #40]	; 0x28
 8008306:	4b05      	ldr	r3, [pc, #20]	; (800831c <std+0x40>)
 8008308:	62e3      	str	r3, [r4, #44]	; 0x2c
 800830a:	4b05      	ldr	r3, [pc, #20]	; (8008320 <std+0x44>)
 800830c:	6224      	str	r4, [r4, #32]
 800830e:	6323      	str	r3, [r4, #48]	; 0x30
 8008310:	bd10      	pop	{r4, pc}
 8008312:	bf00      	nop
 8008314:	08008631 	.word	0x08008631
 8008318:	08008653 	.word	0x08008653
 800831c:	0800868b 	.word	0x0800868b
 8008320:	080086af 	.word	0x080086af

08008324 <_cleanup_r>:
 8008324:	4901      	ldr	r1, [pc, #4]	; (800832c <_cleanup_r+0x8>)
 8008326:	f000 b8af 	b.w	8008488 <_fwalk_reent>
 800832a:	bf00      	nop
 800832c:	08008265 	.word	0x08008265

08008330 <__sfmoreglue>:
 8008330:	b570      	push	{r4, r5, r6, lr}
 8008332:	2268      	movs	r2, #104	; 0x68
 8008334:	1e4d      	subs	r5, r1, #1
 8008336:	4355      	muls	r5, r2
 8008338:	460e      	mov	r6, r1
 800833a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800833e:	f7ff fa65 	bl	800780c <_malloc_r>
 8008342:	4604      	mov	r4, r0
 8008344:	b140      	cbz	r0, 8008358 <__sfmoreglue+0x28>
 8008346:	2100      	movs	r1, #0
 8008348:	e9c0 1600 	strd	r1, r6, [r0]
 800834c:	300c      	adds	r0, #12
 800834e:	60a0      	str	r0, [r4, #8]
 8008350:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008354:	f7fd faa0 	bl	8005898 <memset>
 8008358:	4620      	mov	r0, r4
 800835a:	bd70      	pop	{r4, r5, r6, pc}

0800835c <__sfp_lock_acquire>:
 800835c:	4801      	ldr	r0, [pc, #4]	; (8008364 <__sfp_lock_acquire+0x8>)
 800835e:	f000 b8b3 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 8008362:	bf00      	nop
 8008364:	20000385 	.word	0x20000385

08008368 <__sfp_lock_release>:
 8008368:	4801      	ldr	r0, [pc, #4]	; (8008370 <__sfp_lock_release+0x8>)
 800836a:	f000 b8ae 	b.w	80084ca <__retarget_lock_release_recursive>
 800836e:	bf00      	nop
 8008370:	20000385 	.word	0x20000385

08008374 <__sinit_lock_acquire>:
 8008374:	4801      	ldr	r0, [pc, #4]	; (800837c <__sinit_lock_acquire+0x8>)
 8008376:	f000 b8a7 	b.w	80084c8 <__retarget_lock_acquire_recursive>
 800837a:	bf00      	nop
 800837c:	20000386 	.word	0x20000386

08008380 <__sinit_lock_release>:
 8008380:	4801      	ldr	r0, [pc, #4]	; (8008388 <__sinit_lock_release+0x8>)
 8008382:	f000 b8a2 	b.w	80084ca <__retarget_lock_release_recursive>
 8008386:	bf00      	nop
 8008388:	20000386 	.word	0x20000386

0800838c <__sinit>:
 800838c:	b510      	push	{r4, lr}
 800838e:	4604      	mov	r4, r0
 8008390:	f7ff fff0 	bl	8008374 <__sinit_lock_acquire>
 8008394:	69a3      	ldr	r3, [r4, #24]
 8008396:	b11b      	cbz	r3, 80083a0 <__sinit+0x14>
 8008398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800839c:	f7ff bff0 	b.w	8008380 <__sinit_lock_release>
 80083a0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80083a4:	6523      	str	r3, [r4, #80]	; 0x50
 80083a6:	4b13      	ldr	r3, [pc, #76]	; (80083f4 <__sinit+0x68>)
 80083a8:	4a13      	ldr	r2, [pc, #76]	; (80083f8 <__sinit+0x6c>)
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	62a2      	str	r2, [r4, #40]	; 0x28
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	bf04      	itt	eq
 80083b2:	2301      	moveq	r3, #1
 80083b4:	61a3      	streq	r3, [r4, #24]
 80083b6:	4620      	mov	r0, r4
 80083b8:	f000 f820 	bl	80083fc <__sfp>
 80083bc:	6060      	str	r0, [r4, #4]
 80083be:	4620      	mov	r0, r4
 80083c0:	f000 f81c 	bl	80083fc <__sfp>
 80083c4:	60a0      	str	r0, [r4, #8]
 80083c6:	4620      	mov	r0, r4
 80083c8:	f000 f818 	bl	80083fc <__sfp>
 80083cc:	2200      	movs	r2, #0
 80083ce:	60e0      	str	r0, [r4, #12]
 80083d0:	2104      	movs	r1, #4
 80083d2:	6860      	ldr	r0, [r4, #4]
 80083d4:	f7ff ff82 	bl	80082dc <std>
 80083d8:	68a0      	ldr	r0, [r4, #8]
 80083da:	2201      	movs	r2, #1
 80083dc:	2109      	movs	r1, #9
 80083de:	f7ff ff7d 	bl	80082dc <std>
 80083e2:	68e0      	ldr	r0, [r4, #12]
 80083e4:	2202      	movs	r2, #2
 80083e6:	2112      	movs	r1, #18
 80083e8:	f7ff ff78 	bl	80082dc <std>
 80083ec:	2301      	movs	r3, #1
 80083ee:	61a3      	str	r3, [r4, #24]
 80083f0:	e7d2      	b.n	8008398 <__sinit+0xc>
 80083f2:	bf00      	nop
 80083f4:	08008818 	.word	0x08008818
 80083f8:	08008325 	.word	0x08008325

080083fc <__sfp>:
 80083fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083fe:	4607      	mov	r7, r0
 8008400:	f7ff ffac 	bl	800835c <__sfp_lock_acquire>
 8008404:	4b1e      	ldr	r3, [pc, #120]	; (8008480 <__sfp+0x84>)
 8008406:	681e      	ldr	r6, [r3, #0]
 8008408:	69b3      	ldr	r3, [r6, #24]
 800840a:	b913      	cbnz	r3, 8008412 <__sfp+0x16>
 800840c:	4630      	mov	r0, r6
 800840e:	f7ff ffbd 	bl	800838c <__sinit>
 8008412:	3648      	adds	r6, #72	; 0x48
 8008414:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008418:	3b01      	subs	r3, #1
 800841a:	d503      	bpl.n	8008424 <__sfp+0x28>
 800841c:	6833      	ldr	r3, [r6, #0]
 800841e:	b30b      	cbz	r3, 8008464 <__sfp+0x68>
 8008420:	6836      	ldr	r6, [r6, #0]
 8008422:	e7f7      	b.n	8008414 <__sfp+0x18>
 8008424:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008428:	b9d5      	cbnz	r5, 8008460 <__sfp+0x64>
 800842a:	4b16      	ldr	r3, [pc, #88]	; (8008484 <__sfp+0x88>)
 800842c:	60e3      	str	r3, [r4, #12]
 800842e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008432:	6665      	str	r5, [r4, #100]	; 0x64
 8008434:	f000 f847 	bl	80084c6 <__retarget_lock_init_recursive>
 8008438:	f7ff ff96 	bl	8008368 <__sfp_lock_release>
 800843c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008440:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008444:	6025      	str	r5, [r4, #0]
 8008446:	61a5      	str	r5, [r4, #24]
 8008448:	2208      	movs	r2, #8
 800844a:	4629      	mov	r1, r5
 800844c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008450:	f7fd fa22 	bl	8005898 <memset>
 8008454:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008458:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800845c:	4620      	mov	r0, r4
 800845e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008460:	3468      	adds	r4, #104	; 0x68
 8008462:	e7d9      	b.n	8008418 <__sfp+0x1c>
 8008464:	2104      	movs	r1, #4
 8008466:	4638      	mov	r0, r7
 8008468:	f7ff ff62 	bl	8008330 <__sfmoreglue>
 800846c:	4604      	mov	r4, r0
 800846e:	6030      	str	r0, [r6, #0]
 8008470:	2800      	cmp	r0, #0
 8008472:	d1d5      	bne.n	8008420 <__sfp+0x24>
 8008474:	f7ff ff78 	bl	8008368 <__sfp_lock_release>
 8008478:	230c      	movs	r3, #12
 800847a:	603b      	str	r3, [r7, #0]
 800847c:	e7ee      	b.n	800845c <__sfp+0x60>
 800847e:	bf00      	nop
 8008480:	08008818 	.word	0x08008818
 8008484:	ffff0001 	.word	0xffff0001

08008488 <_fwalk_reent>:
 8008488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800848c:	4606      	mov	r6, r0
 800848e:	4688      	mov	r8, r1
 8008490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008494:	2700      	movs	r7, #0
 8008496:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800849a:	f1b9 0901 	subs.w	r9, r9, #1
 800849e:	d505      	bpl.n	80084ac <_fwalk_reent+0x24>
 80084a0:	6824      	ldr	r4, [r4, #0]
 80084a2:	2c00      	cmp	r4, #0
 80084a4:	d1f7      	bne.n	8008496 <_fwalk_reent+0xe>
 80084a6:	4638      	mov	r0, r7
 80084a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084ac:	89ab      	ldrh	r3, [r5, #12]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d907      	bls.n	80084c2 <_fwalk_reent+0x3a>
 80084b2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80084b6:	3301      	adds	r3, #1
 80084b8:	d003      	beq.n	80084c2 <_fwalk_reent+0x3a>
 80084ba:	4629      	mov	r1, r5
 80084bc:	4630      	mov	r0, r6
 80084be:	47c0      	blx	r8
 80084c0:	4307      	orrs	r7, r0
 80084c2:	3568      	adds	r5, #104	; 0x68
 80084c4:	e7e9      	b.n	800849a <_fwalk_reent+0x12>

080084c6 <__retarget_lock_init_recursive>:
 80084c6:	4770      	bx	lr

080084c8 <__retarget_lock_acquire_recursive>:
 80084c8:	4770      	bx	lr

080084ca <__retarget_lock_release_recursive>:
 80084ca:	4770      	bx	lr

080084cc <__swhatbuf_r>:
 80084cc:	b570      	push	{r4, r5, r6, lr}
 80084ce:	460e      	mov	r6, r1
 80084d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80084d4:	2900      	cmp	r1, #0
 80084d6:	b096      	sub	sp, #88	; 0x58
 80084d8:	4614      	mov	r4, r2
 80084da:	461d      	mov	r5, r3
 80084dc:	da08      	bge.n	80084f0 <__swhatbuf_r+0x24>
 80084de:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80084e2:	2200      	movs	r2, #0
 80084e4:	602a      	str	r2, [r5, #0]
 80084e6:	061a      	lsls	r2, r3, #24
 80084e8:	d410      	bmi.n	800850c <__swhatbuf_r+0x40>
 80084ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084ee:	e00e      	b.n	800850e <__swhatbuf_r+0x42>
 80084f0:	466a      	mov	r2, sp
 80084f2:	f000 f903 	bl	80086fc <_fstat_r>
 80084f6:	2800      	cmp	r0, #0
 80084f8:	dbf1      	blt.n	80084de <__swhatbuf_r+0x12>
 80084fa:	9a01      	ldr	r2, [sp, #4]
 80084fc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008500:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008504:	425a      	negs	r2, r3
 8008506:	415a      	adcs	r2, r3
 8008508:	602a      	str	r2, [r5, #0]
 800850a:	e7ee      	b.n	80084ea <__swhatbuf_r+0x1e>
 800850c:	2340      	movs	r3, #64	; 0x40
 800850e:	2000      	movs	r0, #0
 8008510:	6023      	str	r3, [r4, #0]
 8008512:	b016      	add	sp, #88	; 0x58
 8008514:	bd70      	pop	{r4, r5, r6, pc}
	...

08008518 <__smakebuf_r>:
 8008518:	898b      	ldrh	r3, [r1, #12]
 800851a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800851c:	079d      	lsls	r5, r3, #30
 800851e:	4606      	mov	r6, r0
 8008520:	460c      	mov	r4, r1
 8008522:	d507      	bpl.n	8008534 <__smakebuf_r+0x1c>
 8008524:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008528:	6023      	str	r3, [r4, #0]
 800852a:	6123      	str	r3, [r4, #16]
 800852c:	2301      	movs	r3, #1
 800852e:	6163      	str	r3, [r4, #20]
 8008530:	b002      	add	sp, #8
 8008532:	bd70      	pop	{r4, r5, r6, pc}
 8008534:	ab01      	add	r3, sp, #4
 8008536:	466a      	mov	r2, sp
 8008538:	f7ff ffc8 	bl	80084cc <__swhatbuf_r>
 800853c:	9900      	ldr	r1, [sp, #0]
 800853e:	4605      	mov	r5, r0
 8008540:	4630      	mov	r0, r6
 8008542:	f7ff f963 	bl	800780c <_malloc_r>
 8008546:	b948      	cbnz	r0, 800855c <__smakebuf_r+0x44>
 8008548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800854c:	059a      	lsls	r2, r3, #22
 800854e:	d4ef      	bmi.n	8008530 <__smakebuf_r+0x18>
 8008550:	f023 0303 	bic.w	r3, r3, #3
 8008554:	f043 0302 	orr.w	r3, r3, #2
 8008558:	81a3      	strh	r3, [r4, #12]
 800855a:	e7e3      	b.n	8008524 <__smakebuf_r+0xc>
 800855c:	4b0d      	ldr	r3, [pc, #52]	; (8008594 <__smakebuf_r+0x7c>)
 800855e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008560:	89a3      	ldrh	r3, [r4, #12]
 8008562:	6020      	str	r0, [r4, #0]
 8008564:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008568:	81a3      	strh	r3, [r4, #12]
 800856a:	9b00      	ldr	r3, [sp, #0]
 800856c:	6163      	str	r3, [r4, #20]
 800856e:	9b01      	ldr	r3, [sp, #4]
 8008570:	6120      	str	r0, [r4, #16]
 8008572:	b15b      	cbz	r3, 800858c <__smakebuf_r+0x74>
 8008574:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008578:	4630      	mov	r0, r6
 800857a:	f000 f8d1 	bl	8008720 <_isatty_r>
 800857e:	b128      	cbz	r0, 800858c <__smakebuf_r+0x74>
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f023 0303 	bic.w	r3, r3, #3
 8008586:	f043 0301 	orr.w	r3, r3, #1
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	89a0      	ldrh	r0, [r4, #12]
 800858e:	4305      	orrs	r5, r0
 8008590:	81a5      	strh	r5, [r4, #12]
 8008592:	e7cd      	b.n	8008530 <__smakebuf_r+0x18>
 8008594:	08008325 	.word	0x08008325

08008598 <_malloc_usable_size_r>:
 8008598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800859c:	1f18      	subs	r0, r3, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfbc      	itt	lt
 80085a2:	580b      	ldrlt	r3, [r1, r0]
 80085a4:	18c0      	addlt	r0, r0, r3
 80085a6:	4770      	bx	lr

080085a8 <_raise_r>:
 80085a8:	291f      	cmp	r1, #31
 80085aa:	b538      	push	{r3, r4, r5, lr}
 80085ac:	4604      	mov	r4, r0
 80085ae:	460d      	mov	r5, r1
 80085b0:	d904      	bls.n	80085bc <_raise_r+0x14>
 80085b2:	2316      	movs	r3, #22
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	f04f 30ff 	mov.w	r0, #4294967295
 80085ba:	bd38      	pop	{r3, r4, r5, pc}
 80085bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80085be:	b112      	cbz	r2, 80085c6 <_raise_r+0x1e>
 80085c0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80085c4:	b94b      	cbnz	r3, 80085da <_raise_r+0x32>
 80085c6:	4620      	mov	r0, r4
 80085c8:	f000 f830 	bl	800862c <_getpid_r>
 80085cc:	462a      	mov	r2, r5
 80085ce:	4601      	mov	r1, r0
 80085d0:	4620      	mov	r0, r4
 80085d2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085d6:	f000 b817 	b.w	8008608 <_kill_r>
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d00a      	beq.n	80085f4 <_raise_r+0x4c>
 80085de:	1c59      	adds	r1, r3, #1
 80085e0:	d103      	bne.n	80085ea <_raise_r+0x42>
 80085e2:	2316      	movs	r3, #22
 80085e4:	6003      	str	r3, [r0, #0]
 80085e6:	2001      	movs	r0, #1
 80085e8:	e7e7      	b.n	80085ba <_raise_r+0x12>
 80085ea:	2400      	movs	r4, #0
 80085ec:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80085f0:	4628      	mov	r0, r5
 80085f2:	4798      	blx	r3
 80085f4:	2000      	movs	r0, #0
 80085f6:	e7e0      	b.n	80085ba <_raise_r+0x12>

080085f8 <raise>:
 80085f8:	4b02      	ldr	r3, [pc, #8]	; (8008604 <raise+0xc>)
 80085fa:	4601      	mov	r1, r0
 80085fc:	6818      	ldr	r0, [r3, #0]
 80085fe:	f7ff bfd3 	b.w	80085a8 <_raise_r>
 8008602:	bf00      	nop
 8008604:	2000000c 	.word	0x2000000c

08008608 <_kill_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4d07      	ldr	r5, [pc, #28]	; (8008628 <_kill_r+0x20>)
 800860c:	2300      	movs	r3, #0
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	4611      	mov	r1, r2
 8008614:	602b      	str	r3, [r5, #0]
 8008616:	f7f9 fc73 	bl	8001f00 <_kill>
 800861a:	1c43      	adds	r3, r0, #1
 800861c:	d102      	bne.n	8008624 <_kill_r+0x1c>
 800861e:	682b      	ldr	r3, [r5, #0]
 8008620:	b103      	cbz	r3, 8008624 <_kill_r+0x1c>
 8008622:	6023      	str	r3, [r4, #0]
 8008624:	bd38      	pop	{r3, r4, r5, pc}
 8008626:	bf00      	nop
 8008628:	20000380 	.word	0x20000380

0800862c <_getpid_r>:
 800862c:	f7f9 bc60 	b.w	8001ef0 <_getpid>

08008630 <__sread>:
 8008630:	b510      	push	{r4, lr}
 8008632:	460c      	mov	r4, r1
 8008634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008638:	f000 f894 	bl	8008764 <_read_r>
 800863c:	2800      	cmp	r0, #0
 800863e:	bfab      	itete	ge
 8008640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008642:	89a3      	ldrhlt	r3, [r4, #12]
 8008644:	181b      	addge	r3, r3, r0
 8008646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800864a:	bfac      	ite	ge
 800864c:	6563      	strge	r3, [r4, #84]	; 0x54
 800864e:	81a3      	strhlt	r3, [r4, #12]
 8008650:	bd10      	pop	{r4, pc}

08008652 <__swrite>:
 8008652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008656:	461f      	mov	r7, r3
 8008658:	898b      	ldrh	r3, [r1, #12]
 800865a:	05db      	lsls	r3, r3, #23
 800865c:	4605      	mov	r5, r0
 800865e:	460c      	mov	r4, r1
 8008660:	4616      	mov	r6, r2
 8008662:	d505      	bpl.n	8008670 <__swrite+0x1e>
 8008664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008668:	2302      	movs	r3, #2
 800866a:	2200      	movs	r2, #0
 800866c:	f000 f868 	bl	8008740 <_lseek_r>
 8008670:	89a3      	ldrh	r3, [r4, #12]
 8008672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800867a:	81a3      	strh	r3, [r4, #12]
 800867c:	4632      	mov	r2, r6
 800867e:	463b      	mov	r3, r7
 8008680:	4628      	mov	r0, r5
 8008682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008686:	f000 b817 	b.w	80086b8 <_write_r>

0800868a <__sseek>:
 800868a:	b510      	push	{r4, lr}
 800868c:	460c      	mov	r4, r1
 800868e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008692:	f000 f855 	bl	8008740 <_lseek_r>
 8008696:	1c43      	adds	r3, r0, #1
 8008698:	89a3      	ldrh	r3, [r4, #12]
 800869a:	bf15      	itete	ne
 800869c:	6560      	strne	r0, [r4, #84]	; 0x54
 800869e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80086a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80086a6:	81a3      	strheq	r3, [r4, #12]
 80086a8:	bf18      	it	ne
 80086aa:	81a3      	strhne	r3, [r4, #12]
 80086ac:	bd10      	pop	{r4, pc}

080086ae <__sclose>:
 80086ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086b2:	f000 b813 	b.w	80086dc <_close_r>
	...

080086b8 <_write_r>:
 80086b8:	b538      	push	{r3, r4, r5, lr}
 80086ba:	4d07      	ldr	r5, [pc, #28]	; (80086d8 <_write_r+0x20>)
 80086bc:	4604      	mov	r4, r0
 80086be:	4608      	mov	r0, r1
 80086c0:	4611      	mov	r1, r2
 80086c2:	2200      	movs	r2, #0
 80086c4:	602a      	str	r2, [r5, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	f7f9 fc51 	bl	8001f6e <_write>
 80086cc:	1c43      	adds	r3, r0, #1
 80086ce:	d102      	bne.n	80086d6 <_write_r+0x1e>
 80086d0:	682b      	ldr	r3, [r5, #0]
 80086d2:	b103      	cbz	r3, 80086d6 <_write_r+0x1e>
 80086d4:	6023      	str	r3, [r4, #0]
 80086d6:	bd38      	pop	{r3, r4, r5, pc}
 80086d8:	20000380 	.word	0x20000380

080086dc <_close_r>:
 80086dc:	b538      	push	{r3, r4, r5, lr}
 80086de:	4d06      	ldr	r5, [pc, #24]	; (80086f8 <_close_r+0x1c>)
 80086e0:	2300      	movs	r3, #0
 80086e2:	4604      	mov	r4, r0
 80086e4:	4608      	mov	r0, r1
 80086e6:	602b      	str	r3, [r5, #0]
 80086e8:	f7f9 fc5d 	bl	8001fa6 <_close>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_close_r+0x1a>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_close_r+0x1a>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	20000380 	.word	0x20000380

080086fc <_fstat_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	; (800871c <_fstat_r+0x20>)
 8008700:	2300      	movs	r3, #0
 8008702:	4604      	mov	r4, r0
 8008704:	4608      	mov	r0, r1
 8008706:	4611      	mov	r1, r2
 8008708:	602b      	str	r3, [r5, #0]
 800870a:	f7f9 fc58 	bl	8001fbe <_fstat>
 800870e:	1c43      	adds	r3, r0, #1
 8008710:	d102      	bne.n	8008718 <_fstat_r+0x1c>
 8008712:	682b      	ldr	r3, [r5, #0]
 8008714:	b103      	cbz	r3, 8008718 <_fstat_r+0x1c>
 8008716:	6023      	str	r3, [r4, #0]
 8008718:	bd38      	pop	{r3, r4, r5, pc}
 800871a:	bf00      	nop
 800871c:	20000380 	.word	0x20000380

08008720 <_isatty_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d06      	ldr	r5, [pc, #24]	; (800873c <_isatty_r+0x1c>)
 8008724:	2300      	movs	r3, #0
 8008726:	4604      	mov	r4, r0
 8008728:	4608      	mov	r0, r1
 800872a:	602b      	str	r3, [r5, #0]
 800872c:	f7f9 fc57 	bl	8001fde <_isatty>
 8008730:	1c43      	adds	r3, r0, #1
 8008732:	d102      	bne.n	800873a <_isatty_r+0x1a>
 8008734:	682b      	ldr	r3, [r5, #0]
 8008736:	b103      	cbz	r3, 800873a <_isatty_r+0x1a>
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	bd38      	pop	{r3, r4, r5, pc}
 800873c:	20000380 	.word	0x20000380

08008740 <_lseek_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d07      	ldr	r5, [pc, #28]	; (8008760 <_lseek_r+0x20>)
 8008744:	4604      	mov	r4, r0
 8008746:	4608      	mov	r0, r1
 8008748:	4611      	mov	r1, r2
 800874a:	2200      	movs	r2, #0
 800874c:	602a      	str	r2, [r5, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	f7f9 fc50 	bl	8001ff4 <_lseek>
 8008754:	1c43      	adds	r3, r0, #1
 8008756:	d102      	bne.n	800875e <_lseek_r+0x1e>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	b103      	cbz	r3, 800875e <_lseek_r+0x1e>
 800875c:	6023      	str	r3, [r4, #0]
 800875e:	bd38      	pop	{r3, r4, r5, pc}
 8008760:	20000380 	.word	0x20000380

08008764 <_read_r>:
 8008764:	b538      	push	{r3, r4, r5, lr}
 8008766:	4d07      	ldr	r5, [pc, #28]	; (8008784 <_read_r+0x20>)
 8008768:	4604      	mov	r4, r0
 800876a:	4608      	mov	r0, r1
 800876c:	4611      	mov	r1, r2
 800876e:	2200      	movs	r2, #0
 8008770:	602a      	str	r2, [r5, #0]
 8008772:	461a      	mov	r2, r3
 8008774:	f7f9 fbde 	bl	8001f34 <_read>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d102      	bne.n	8008782 <_read_r+0x1e>
 800877c:	682b      	ldr	r3, [r5, #0]
 800877e:	b103      	cbz	r3, 8008782 <_read_r+0x1e>
 8008780:	6023      	str	r3, [r4, #0]
 8008782:	bd38      	pop	{r3, r4, r5, pc}
 8008784:	20000380 	.word	0x20000380

08008788 <_init>:
 8008788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800878a:	bf00      	nop
 800878c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800878e:	bc08      	pop	{r3}
 8008790:	469e      	mov	lr, r3
 8008792:	4770      	bx	lr

08008794 <_fini>:
 8008794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008796:	bf00      	nop
 8008798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800879a:	bc08      	pop	{r3}
 800879c:	469e      	mov	lr, r3
 800879e:	4770      	bx	lr
