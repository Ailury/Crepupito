
dht22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  08007ae8  08007ae8  00017ae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f24  08007f24  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007f24  08007f24  00017f24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f2c  08007f2c  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f2c  08007f2c  00017f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007f30  08007f30  00017f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000168  200001dc  08008110  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000344  08008110  00020344  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e221  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001efc  00000000  00000000  0002e42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f98  00000000  00000000  00030330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  000312c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b89  00000000  00000000  00032190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fbd1  00000000  00000000  00049d19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095034  00000000  00000000  000598ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ee91e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000550c  00000000  00000000  000ee970  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001dc 	.word	0x200001dc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007ad0 	.word	0x08007ad0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e0 	.word	0x200001e0
 80001dc:	08007ad0 	.word	0x08007ad0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	; 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_uldivmod>:
 8000e74:	b953      	cbnz	r3, 8000e8c <__aeabi_uldivmod+0x18>
 8000e76:	b94a      	cbnz	r2, 8000e8c <__aeabi_uldivmod+0x18>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bf08      	it	eq
 8000e7c:	2800      	cmpeq	r0, #0
 8000e7e:	bf1c      	itt	ne
 8000e80:	f04f 31ff 	movne.w	r1, #4294967295
 8000e84:	f04f 30ff 	movne.w	r0, #4294967295
 8000e88:	f000 b974 	b.w	8001174 <__aeabi_idiv0>
 8000e8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e94:	f000 f806 	bl	8000ea4 <__udivmoddi4>
 8000e98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea0:	b004      	add	sp, #16
 8000ea2:	4770      	bx	lr

08000ea4 <__udivmoddi4>:
 8000ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ea8:	9d08      	ldr	r5, [sp, #32]
 8000eaa:	4604      	mov	r4, r0
 8000eac:	468e      	mov	lr, r1
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d14d      	bne.n	8000f4e <__udivmoddi4+0xaa>
 8000eb2:	428a      	cmp	r2, r1
 8000eb4:	4694      	mov	ip, r2
 8000eb6:	d969      	bls.n	8000f8c <__udivmoddi4+0xe8>
 8000eb8:	fab2 f282 	clz	r2, r2
 8000ebc:	b152      	cbz	r2, 8000ed4 <__udivmoddi4+0x30>
 8000ebe:	fa01 f302 	lsl.w	r3, r1, r2
 8000ec2:	f1c2 0120 	rsb	r1, r2, #32
 8000ec6:	fa20 f101 	lsr.w	r1, r0, r1
 8000eca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ece:	ea41 0e03 	orr.w	lr, r1, r3
 8000ed2:	4094      	lsls	r4, r2
 8000ed4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed8:	0c21      	lsrs	r1, r4, #16
 8000eda:	fbbe f6f8 	udiv	r6, lr, r8
 8000ede:	fa1f f78c 	uxth.w	r7, ip
 8000ee2:	fb08 e316 	mls	r3, r8, r6, lr
 8000ee6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000eea:	fb06 f107 	mul.w	r1, r6, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d90a      	bls.n	8000f08 <__udivmoddi4+0x64>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000efa:	f080 811f 	bcs.w	800113c <__udivmoddi4+0x298>
 8000efe:	4299      	cmp	r1, r3
 8000f00:	f240 811c 	bls.w	800113c <__udivmoddi4+0x298>
 8000f04:	3e02      	subs	r6, #2
 8000f06:	4463      	add	r3, ip
 8000f08:	1a5b      	subs	r3, r3, r1
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f10:	fb08 3310 	mls	r3, r8, r0, r3
 8000f14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f18:	fb00 f707 	mul.w	r7, r0, r7
 8000f1c:	42a7      	cmp	r7, r4
 8000f1e:	d90a      	bls.n	8000f36 <__udivmoddi4+0x92>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f28:	f080 810a 	bcs.w	8001140 <__udivmoddi4+0x29c>
 8000f2c:	42a7      	cmp	r7, r4
 8000f2e:	f240 8107 	bls.w	8001140 <__udivmoddi4+0x29c>
 8000f32:	4464      	add	r4, ip
 8000f34:	3802      	subs	r0, #2
 8000f36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f3a:	1be4      	subs	r4, r4, r7
 8000f3c:	2600      	movs	r6, #0
 8000f3e:	b11d      	cbz	r5, 8000f48 <__udivmoddi4+0xa4>
 8000f40:	40d4      	lsrs	r4, r2
 8000f42:	2300      	movs	r3, #0
 8000f44:	e9c5 4300 	strd	r4, r3, [r5]
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d909      	bls.n	8000f66 <__udivmoddi4+0xc2>
 8000f52:	2d00      	cmp	r5, #0
 8000f54:	f000 80ef 	beq.w	8001136 <__udivmoddi4+0x292>
 8000f58:	2600      	movs	r6, #0
 8000f5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000f5e:	4630      	mov	r0, r6
 8000f60:	4631      	mov	r1, r6
 8000f62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f66:	fab3 f683 	clz	r6, r3
 8000f6a:	2e00      	cmp	r6, #0
 8000f6c:	d14a      	bne.n	8001004 <__udivmoddi4+0x160>
 8000f6e:	428b      	cmp	r3, r1
 8000f70:	d302      	bcc.n	8000f78 <__udivmoddi4+0xd4>
 8000f72:	4282      	cmp	r2, r0
 8000f74:	f200 80f9 	bhi.w	800116a <__udivmoddi4+0x2c6>
 8000f78:	1a84      	subs	r4, r0, r2
 8000f7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000f7e:	2001      	movs	r0, #1
 8000f80:	469e      	mov	lr, r3
 8000f82:	2d00      	cmp	r5, #0
 8000f84:	d0e0      	beq.n	8000f48 <__udivmoddi4+0xa4>
 8000f86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000f8a:	e7dd      	b.n	8000f48 <__udivmoddi4+0xa4>
 8000f8c:	b902      	cbnz	r2, 8000f90 <__udivmoddi4+0xec>
 8000f8e:	deff      	udf	#255	; 0xff
 8000f90:	fab2 f282 	clz	r2, r2
 8000f94:	2a00      	cmp	r2, #0
 8000f96:	f040 8092 	bne.w	80010be <__udivmoddi4+0x21a>
 8000f9a:	eba1 010c 	sub.w	r1, r1, ip
 8000f9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa2:	fa1f fe8c 	uxth.w	lr, ip
 8000fa6:	2601      	movs	r6, #1
 8000fa8:	0c20      	lsrs	r0, r4, #16
 8000faa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000fae:	fb07 1113 	mls	r1, r7, r3, r1
 8000fb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fb6:	fb0e f003 	mul.w	r0, lr, r3
 8000fba:	4288      	cmp	r0, r1
 8000fbc:	d908      	bls.n	8000fd0 <__udivmoddi4+0x12c>
 8000fbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000fc6:	d202      	bcs.n	8000fce <__udivmoddi4+0x12a>
 8000fc8:	4288      	cmp	r0, r1
 8000fca:	f200 80cb 	bhi.w	8001164 <__udivmoddi4+0x2c0>
 8000fce:	4643      	mov	r3, r8
 8000fd0:	1a09      	subs	r1, r1, r0
 8000fd2:	b2a4      	uxth	r4, r4
 8000fd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000fdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000fe0:	fb0e fe00 	mul.w	lr, lr, r0
 8000fe4:	45a6      	cmp	lr, r4
 8000fe6:	d908      	bls.n	8000ffa <__udivmoddi4+0x156>
 8000fe8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ff0:	d202      	bcs.n	8000ff8 <__udivmoddi4+0x154>
 8000ff2:	45a6      	cmp	lr, r4
 8000ff4:	f200 80bb 	bhi.w	800116e <__udivmoddi4+0x2ca>
 8000ff8:	4608      	mov	r0, r1
 8000ffa:	eba4 040e 	sub.w	r4, r4, lr
 8000ffe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8001002:	e79c      	b.n	8000f3e <__udivmoddi4+0x9a>
 8001004:	f1c6 0720 	rsb	r7, r6, #32
 8001008:	40b3      	lsls	r3, r6
 800100a:	fa22 fc07 	lsr.w	ip, r2, r7
 800100e:	ea4c 0c03 	orr.w	ip, ip, r3
 8001012:	fa20 f407 	lsr.w	r4, r0, r7
 8001016:	fa01 f306 	lsl.w	r3, r1, r6
 800101a:	431c      	orrs	r4, r3
 800101c:	40f9      	lsrs	r1, r7
 800101e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001022:	fa00 f306 	lsl.w	r3, r0, r6
 8001026:	fbb1 f8f9 	udiv	r8, r1, r9
 800102a:	0c20      	lsrs	r0, r4, #16
 800102c:	fa1f fe8c 	uxth.w	lr, ip
 8001030:	fb09 1118 	mls	r1, r9, r8, r1
 8001034:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8001038:	fb08 f00e 	mul.w	r0, r8, lr
 800103c:	4288      	cmp	r0, r1
 800103e:	fa02 f206 	lsl.w	r2, r2, r6
 8001042:	d90b      	bls.n	800105c <__udivmoddi4+0x1b8>
 8001044:	eb1c 0101 	adds.w	r1, ip, r1
 8001048:	f108 3aff 	add.w	sl, r8, #4294967295
 800104c:	f080 8088 	bcs.w	8001160 <__udivmoddi4+0x2bc>
 8001050:	4288      	cmp	r0, r1
 8001052:	f240 8085 	bls.w	8001160 <__udivmoddi4+0x2bc>
 8001056:	f1a8 0802 	sub.w	r8, r8, #2
 800105a:	4461      	add	r1, ip
 800105c:	1a09      	subs	r1, r1, r0
 800105e:	b2a4      	uxth	r4, r4
 8001060:	fbb1 f0f9 	udiv	r0, r1, r9
 8001064:	fb09 1110 	mls	r1, r9, r0, r1
 8001068:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800106c:	fb00 fe0e 	mul.w	lr, r0, lr
 8001070:	458e      	cmp	lr, r1
 8001072:	d908      	bls.n	8001086 <__udivmoddi4+0x1e2>
 8001074:	eb1c 0101 	adds.w	r1, ip, r1
 8001078:	f100 34ff 	add.w	r4, r0, #4294967295
 800107c:	d26c      	bcs.n	8001158 <__udivmoddi4+0x2b4>
 800107e:	458e      	cmp	lr, r1
 8001080:	d96a      	bls.n	8001158 <__udivmoddi4+0x2b4>
 8001082:	3802      	subs	r0, #2
 8001084:	4461      	add	r1, ip
 8001086:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800108a:	fba0 9402 	umull	r9, r4, r0, r2
 800108e:	eba1 010e 	sub.w	r1, r1, lr
 8001092:	42a1      	cmp	r1, r4
 8001094:	46c8      	mov	r8, r9
 8001096:	46a6      	mov	lr, r4
 8001098:	d356      	bcc.n	8001148 <__udivmoddi4+0x2a4>
 800109a:	d053      	beq.n	8001144 <__udivmoddi4+0x2a0>
 800109c:	b15d      	cbz	r5, 80010b6 <__udivmoddi4+0x212>
 800109e:	ebb3 0208 	subs.w	r2, r3, r8
 80010a2:	eb61 010e 	sbc.w	r1, r1, lr
 80010a6:	fa01 f707 	lsl.w	r7, r1, r7
 80010aa:	fa22 f306 	lsr.w	r3, r2, r6
 80010ae:	40f1      	lsrs	r1, r6
 80010b0:	431f      	orrs	r7, r3
 80010b2:	e9c5 7100 	strd	r7, r1, [r5]
 80010b6:	2600      	movs	r6, #0
 80010b8:	4631      	mov	r1, r6
 80010ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010be:	f1c2 0320 	rsb	r3, r2, #32
 80010c2:	40d8      	lsrs	r0, r3
 80010c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80010c8:	fa21 f303 	lsr.w	r3, r1, r3
 80010cc:	4091      	lsls	r1, r2
 80010ce:	4301      	orrs	r1, r0
 80010d0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010d4:	fa1f fe8c 	uxth.w	lr, ip
 80010d8:	fbb3 f0f7 	udiv	r0, r3, r7
 80010dc:	fb07 3610 	mls	r6, r7, r0, r3
 80010e0:	0c0b      	lsrs	r3, r1, #16
 80010e2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80010e6:	fb00 f60e 	mul.w	r6, r0, lr
 80010ea:	429e      	cmp	r6, r3
 80010ec:	fa04 f402 	lsl.w	r4, r4, r2
 80010f0:	d908      	bls.n	8001104 <__udivmoddi4+0x260>
 80010f2:	eb1c 0303 	adds.w	r3, ip, r3
 80010f6:	f100 38ff 	add.w	r8, r0, #4294967295
 80010fa:	d22f      	bcs.n	800115c <__udivmoddi4+0x2b8>
 80010fc:	429e      	cmp	r6, r3
 80010fe:	d92d      	bls.n	800115c <__udivmoddi4+0x2b8>
 8001100:	3802      	subs	r0, #2
 8001102:	4463      	add	r3, ip
 8001104:	1b9b      	subs	r3, r3, r6
 8001106:	b289      	uxth	r1, r1
 8001108:	fbb3 f6f7 	udiv	r6, r3, r7
 800110c:	fb07 3316 	mls	r3, r7, r6, r3
 8001110:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8001114:	fb06 f30e 	mul.w	r3, r6, lr
 8001118:	428b      	cmp	r3, r1
 800111a:	d908      	bls.n	800112e <__udivmoddi4+0x28a>
 800111c:	eb1c 0101 	adds.w	r1, ip, r1
 8001120:	f106 38ff 	add.w	r8, r6, #4294967295
 8001124:	d216      	bcs.n	8001154 <__udivmoddi4+0x2b0>
 8001126:	428b      	cmp	r3, r1
 8001128:	d914      	bls.n	8001154 <__udivmoddi4+0x2b0>
 800112a:	3e02      	subs	r6, #2
 800112c:	4461      	add	r1, ip
 800112e:	1ac9      	subs	r1, r1, r3
 8001130:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001134:	e738      	b.n	8000fa8 <__udivmoddi4+0x104>
 8001136:	462e      	mov	r6, r5
 8001138:	4628      	mov	r0, r5
 800113a:	e705      	b.n	8000f48 <__udivmoddi4+0xa4>
 800113c:	4606      	mov	r6, r0
 800113e:	e6e3      	b.n	8000f08 <__udivmoddi4+0x64>
 8001140:	4618      	mov	r0, r3
 8001142:	e6f8      	b.n	8000f36 <__udivmoddi4+0x92>
 8001144:	454b      	cmp	r3, r9
 8001146:	d2a9      	bcs.n	800109c <__udivmoddi4+0x1f8>
 8001148:	ebb9 0802 	subs.w	r8, r9, r2
 800114c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001150:	3801      	subs	r0, #1
 8001152:	e7a3      	b.n	800109c <__udivmoddi4+0x1f8>
 8001154:	4646      	mov	r6, r8
 8001156:	e7ea      	b.n	800112e <__udivmoddi4+0x28a>
 8001158:	4620      	mov	r0, r4
 800115a:	e794      	b.n	8001086 <__udivmoddi4+0x1e2>
 800115c:	4640      	mov	r0, r8
 800115e:	e7d1      	b.n	8001104 <__udivmoddi4+0x260>
 8001160:	46d0      	mov	r8, sl
 8001162:	e77b      	b.n	800105c <__udivmoddi4+0x1b8>
 8001164:	3b02      	subs	r3, #2
 8001166:	4461      	add	r1, ip
 8001168:	e732      	b.n	8000fd0 <__udivmoddi4+0x12c>
 800116a:	4630      	mov	r0, r6
 800116c:	e709      	b.n	8000f82 <__udivmoddi4+0xde>
 800116e:	4464      	add	r4, ip
 8001170:	3802      	subs	r0, #2
 8001172:	e742      	b.n	8000ffa <__udivmoddi4+0x156>

08001174 <__aeabi_idiv0>:
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <delay>:
uint8_t pres = 0;
#define DHT22_PORT GPIOA
#define DHT22_PIN GPIO_PIN_4
float reqhumid;

void delay(uint16_t time){
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	4603      	mov	r3, r0
 8001180:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 8001182:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <delay+0x30>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2200      	movs	r2, #0
 8001188:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 800118a:	bf00      	nop
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <delay+0x30>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	429a      	cmp	r2, r3
 8001196:	d3f9      	bcc.n	800118c <delay+0x14>
}
 8001198:	bf00      	nop
 800119a:	bf00      	nop
 800119c:	370c      	adds	r7, #12
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000294 	.word	0x20000294

080011ac <Set_Pin_Output>:

void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b088      	sub	sp, #32
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	460b      	mov	r3, r1
 80011b6:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80011c8:	887b      	ldrh	r3, [r7, #2]
 80011ca:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011cc:	2301      	movs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d0:	2300      	movs	r3, #0
 80011d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80011d4:	f107 030c 	add.w	r3, r7, #12
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f001 fb64 	bl	80028a8 <HAL_GPIO_Init>
}
 80011e0:	bf00      	nop
 80011e2:	3720      	adds	r7, #32
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin){
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	460b      	mov	r3, r1
 80011f2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 030c 	add.w	r3, r7, #12
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001204:	887b      	ldrh	r3, [r7, #2]
 8001206:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001208:	2300      	movs	r3, #0
 800120a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001210:	f107 030c 	add.w	r3, r7, #12
 8001214:	4619      	mov	r1, r3
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f001 fb46 	bl	80028a8 <HAL_GPIO_Init>
}
 800121c:	bf00      	nop
 800121e:	3720      	adds	r7, #32
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}

08001224 <DHT22_Start>:

void DHT22_Start (void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
	Set_Pin_Output(DHT22_PORT, DHT22_PIN); // set the pin as output
 8001228:	2110      	movs	r1, #16
 800122a:	4811      	ldr	r0, [pc, #68]	; (8001270 <DHT22_Start+0x4c>)
 800122c:	f7ff ffbe 	bl	80011ac <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);
 8001230:	2201      	movs	r2, #1
 8001232:	2110      	movs	r1, #16
 8001234:	480e      	ldr	r0, [pc, #56]	; (8001270 <DHT22_Start+0x4c>)
 8001236:	f001 fcd3 	bl	8002be0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800123a:	200a      	movs	r0, #10
 800123c:	f000 fe80 	bl	8001f40 <HAL_Delay>
	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 0);   // pull the pin low
 8001240:	2200      	movs	r2, #0
 8001242:	2110      	movs	r1, #16
 8001244:	480a      	ldr	r0, [pc, #40]	; (8001270 <DHT22_Start+0x4c>)
 8001246:	f001 fccb 	bl	8002be0 <HAL_GPIO_WritePin>
	delay(1500);   // wait for > 1ms
 800124a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800124e:	f7ff ff93 	bl	8001178 <delay>

	HAL_GPIO_WritePin (DHT22_PORT, DHT22_PIN, 1);   // pull the pin high
 8001252:	2201      	movs	r2, #1
 8001254:	2110      	movs	r1, #16
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <DHT22_Start+0x4c>)
 8001258:	f001 fcc2 	bl	8002be0 <HAL_GPIO_WritePin>
	delay(20);   // wait for 30us
 800125c:	2014      	movs	r0, #20
 800125e:	f7ff ff8b 	bl	8001178 <delay>

	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 8001262:	2110      	movs	r1, #16
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <DHT22_Start+0x4c>)
 8001266:	f7ff ffbf 	bl	80011e8 <Set_Pin_Input>
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40020000 	.word	0x40020000

08001274 <DHT22_Check_Response>:

uint8_t DHT22_Check_Response (void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
	Set_Pin_Input(DHT22_PORT, DHT22_PIN);   // set as input
 800127a:	2110      	movs	r1, #16
 800127c:	4815      	ldr	r0, [pc, #84]	; (80012d4 <DHT22_Check_Response+0x60>)
 800127e:	f7ff ffb3 	bl	80011e8 <Set_Pin_Input>
	uint8_t Response = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	71fb      	strb	r3, [r7, #7]
	delay(40);  // wait for 40us
 8001286:	2028      	movs	r0, #40	; 0x28
 8001288:	f7ff ff76 	bl	8001178 <delay>
	if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) // if the pin is low
 800128c:	2110      	movs	r1, #16
 800128e:	4811      	ldr	r0, [pc, #68]	; (80012d4 <DHT22_Check_Response+0x60>)
 8001290:	f001 fc8e 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d10e      	bne.n	80012b8 <DHT22_Check_Response+0x44>
	{
		delay(80);   // wait for 80us
 800129a:	2050      	movs	r0, #80	; 0x50
 800129c:	f7ff ff6c 	bl	8001178 <delay>

		if ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN))) Response = 1;  // if the pin is high, response is ok
 80012a0:	2110      	movs	r1, #16
 80012a2:	480c      	ldr	r0, [pc, #48]	; (80012d4 <DHT22_Check_Response+0x60>)
 80012a4:	f001 fc84 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d002      	beq.n	80012b4 <DHT22_Check_Response+0x40>
 80012ae:	2301      	movs	r3, #1
 80012b0:	71fb      	strb	r3, [r7, #7]
 80012b2:	e001      	b.n	80012b8 <DHT22_Check_Response+0x44>
		else Response = -1;
 80012b4:	23ff      	movs	r3, #255	; 0xff
 80012b6:	71fb      	strb	r3, [r7, #7]
	}

	while ((HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go low
 80012b8:	bf00      	nop
 80012ba:	2110      	movs	r1, #16
 80012bc:	4805      	ldr	r0, [pc, #20]	; (80012d4 <DHT22_Check_Response+0x60>)
 80012be:	f001 fc77 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1f8      	bne.n	80012ba <DHT22_Check_Response+0x46>
	return Response;
 80012c8:	79fb      	ldrb	r3, [r7, #7]
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40020000 	.word	0x40020000

080012d8 <DHT22_Read>:

uint8_t DHT22_Read (void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 80012de:	2300      	movs	r3, #0
 80012e0:	71bb      	strb	r3, [r7, #6]
 80012e2:	e03a      	b.n	800135a <DHT22_Read+0x82>
	{
		delay(10);
 80012e4:	200a      	movs	r0, #10
 80012e6:	f7ff ff47 	bl	8001178 <delay>
		while (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)));   // wait for the pin to go high
 80012ea:	bf00      	nop
 80012ec:	2110      	movs	r1, #16
 80012ee:	481f      	ldr	r0, [pc, #124]	; (800136c <DHT22_Read+0x94>)
 80012f0:	f001 fc5e 	bl	8002bb0 <HAL_GPIO_ReadPin>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d0f8      	beq.n	80012ec <DHT22_Read+0x14>
		delay(30);   // wait for 40 us
 80012fa:	201e      	movs	r0, #30
 80012fc:	f7ff ff3c 	bl	8001178 <delay>

		if (!(HAL_GPIO_ReadPin (DHT22_PORT, DHT22_PIN)))   // if the pin is low
 8001300:	2110      	movs	r1, #16
 8001302:	481a      	ldr	r0, [pc, #104]	; (800136c <DHT22_Read+0x94>)
 8001304:	f001 fc54 	bl	8002bb0 <HAL_GPIO_ReadPin>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10e      	bne.n	800132c <DHT22_Read+0x54>
		{
			i&= ~(1<<(7-j));   // write 0
 800130e:	79bb      	ldrb	r3, [r7, #6]
 8001310:	f1c3 0307 	rsb	r3, r3, #7
 8001314:	2201      	movs	r2, #1
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	b25b      	sxtb	r3, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	b25a      	sxtb	r2, r3
 8001320:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001324:	4013      	ands	r3, r2
 8001326:	b25b      	sxtb	r3, r3
 8001328:	71fb      	strb	r3, [r7, #7]
 800132a:	e00b      	b.n	8001344 <DHT22_Read+0x6c>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	f1c3 0307 	rsb	r3, r3, #7
 8001332:	2201      	movs	r2, #1
 8001334:	fa02 f303 	lsl.w	r3, r2, r3
 8001338:	b25a      	sxtb	r2, r3
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	4313      	orrs	r3, r2
 8001340:	b25b      	sxtb	r3, r3
 8001342:	71fb      	strb	r3, [r7, #7]
		while (HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN));  // wait for the pin to go low
 8001344:	bf00      	nop
 8001346:	2110      	movs	r1, #16
 8001348:	4808      	ldr	r0, [pc, #32]	; (800136c <DHT22_Read+0x94>)
 800134a:	f001 fc31 	bl	8002bb0 <HAL_GPIO_ReadPin>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f8      	bne.n	8001346 <DHT22_Read+0x6e>
	for (j=0;j<8;j++)
 8001354:	79bb      	ldrb	r3, [r7, #6]
 8001356:	3301      	adds	r3, #1
 8001358:	71bb      	strb	r3, [r7, #6]
 800135a:	79bb      	ldrb	r3, [r7, #6]
 800135c:	2b07      	cmp	r3, #7
 800135e:	d9c1      	bls.n	80012e4 <DHT22_Read+0xc>
	}

	return i;
 8001360:	79fb      	ldrb	r3, [r7, #7]
}
 8001362:	4618      	mov	r0, r3
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40020000 	.word	0x40020000

08001370 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001370:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001374:	b0bc      	sub	sp, #240	; 0xf0
 8001376:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001378:	f000 fd70 	bl	8001e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800137c:	f000 f946 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001380:	f000 faa8 	bl	80018d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001384:	f000 fa7c 	bl	8001880 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001388:	f000 fa2a 	bl	80017e0 <MX_TIM1_Init>
  MX_ADC1_Init();
 800138c:	f000 f9a8 	bl	80016e0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001390:	f000 f9f8 	bl	8001784 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start(&htim1);
 8001394:	4888      	ldr	r0, [pc, #544]	; (80015b8 <main+0x248>)
 8001396:	f002 fc18 	bl	8003bca <HAL_TIM_Base_Start>
  char buffer[100]; char p='%';
 800139a:	2325      	movs	r3, #37	; 0x25
 800139c:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
  uint64_t ADCValue;
  float ADCpercent;
  while (1)
  {
	  // DHT 22
	  DHT22_Start();
 80013a0:	f7ff ff40 	bl	8001224 <DHT22_Start>
	  pres = DHT22_Check_Response();
 80013a4:	f7ff ff66 	bl	8001274 <DHT22_Check_Response>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b83      	ldr	r3, [pc, #524]	; (80015bc <main+0x24c>)
 80013ae:	701a      	strb	r2, [r3, #0]
	  h_byte1 = DHT22_Read();
 80013b0:	f7ff ff92 	bl	80012d8 <DHT22_Read>
 80013b4:	4603      	mov	r3, r0
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b81      	ldr	r3, [pc, #516]	; (80015c0 <main+0x250>)
 80013ba:	701a      	strb	r2, [r3, #0]
	  h_byte2 = DHT22_Read();
 80013bc:	f7ff ff8c 	bl	80012d8 <DHT22_Read>
 80013c0:	4603      	mov	r3, r0
 80013c2:	461a      	mov	r2, r3
 80013c4:	4b7f      	ldr	r3, [pc, #508]	; (80015c4 <main+0x254>)
 80013c6:	701a      	strb	r2, [r3, #0]
	  t_byte1 = DHT22_Read();
 80013c8:	f7ff ff86 	bl	80012d8 <DHT22_Read>
 80013cc:	4603      	mov	r3, r0
 80013ce:	461a      	mov	r2, r3
 80013d0:	4b7d      	ldr	r3, [pc, #500]	; (80015c8 <main+0x258>)
 80013d2:	701a      	strb	r2, [r3, #0]
	  t_byte2 = DHT22_Read();
 80013d4:	f7ff ff80 	bl	80012d8 <DHT22_Read>
 80013d8:	4603      	mov	r3, r0
 80013da:	461a      	mov	r2, r3
 80013dc:	4b7b      	ldr	r3, [pc, #492]	; (80015cc <main+0x25c>)
 80013de:	701a      	strb	r2, [r3, #0]
	  sum = DHT22_Read();
 80013e0:	f7ff ff7a 	bl	80012d8 <DHT22_Read>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b79      	ldr	r3, [pc, #484]	; (80015d0 <main+0x260>)
 80013ea:	801a      	strh	r2, [r3, #0]

	  t = (t_byte1<<8)|t_byte2;
 80013ec:	4b76      	ldr	r3, [pc, #472]	; (80015c8 <main+0x258>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	021b      	lsls	r3, r3, #8
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	4b75      	ldr	r3, [pc, #468]	; (80015cc <main+0x25c>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	4313      	orrs	r3, r2
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	b29a      	uxth	r2, r3
 8001400:	4b74      	ldr	r3, [pc, #464]	; (80015d4 <main+0x264>)
 8001402:	801a      	strh	r2, [r3, #0]
	  h = (h_byte1<<8)|h_byte2;
 8001404:	4b6e      	ldr	r3, [pc, #440]	; (80015c0 <main+0x250>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	021b      	lsls	r3, r3, #8
 800140a:	b21a      	sxth	r2, r3
 800140c:	4b6d      	ldr	r3, [pc, #436]	; (80015c4 <main+0x254>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	b21b      	sxth	r3, r3
 8001412:	4313      	orrs	r3, r2
 8001414:	b21b      	sxth	r3, r3
 8001416:	b29a      	uxth	r2, r3
 8001418:	4b6f      	ldr	r3, [pc, #444]	; (80015d8 <main+0x268>)
 800141a:	801a      	strh	r2, [r3, #0]
	  temp = (float) (t/10.0);
 800141c:	4b6d      	ldr	r3, [pc, #436]	; (80015d4 <main+0x264>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff f887 	bl	8000534 <__aeabi_i2d>
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	4b6c      	ldr	r3, [pc, #432]	; (80015dc <main+0x26c>)
 800142c:	f7ff fa16 	bl	800085c <__aeabi_ddiv>
 8001430:	4602      	mov	r2, r0
 8001432:	460b      	mov	r3, r1
 8001434:	4610      	mov	r0, r2
 8001436:	4619      	mov	r1, r3
 8001438:	f7ff fbbe 	bl	8000bb8 <__aeabi_d2f>
 800143c:	4603      	mov	r3, r0
 800143e:	4a68      	ldr	r2, [pc, #416]	; (80015e0 <main+0x270>)
 8001440:	6013      	str	r3, [r2, #0]
	  humid = (float)(h/10.0);
 8001442:	4b65      	ldr	r3, [pc, #404]	; (80015d8 <main+0x268>)
 8001444:	881b      	ldrh	r3, [r3, #0]
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff f874 	bl	8000534 <__aeabi_i2d>
 800144c:	f04f 0200 	mov.w	r2, #0
 8001450:	4b62      	ldr	r3, [pc, #392]	; (80015dc <main+0x26c>)
 8001452:	f7ff fa03 	bl	800085c <__aeabi_ddiv>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	f7ff fbab 	bl	8000bb8 <__aeabi_d2f>
 8001462:	4603      	mov	r3, r0
 8001464:	4a5f      	ldr	r2, [pc, #380]	; (80015e4 <main+0x274>)
 8001466:	6013      	str	r3, [r2, #0]

	  //SOIL MOISTURE
	  HAL_ADC_Start(&hadc1);
 8001468:	485f      	ldr	r0, [pc, #380]	; (80015e8 <main+0x278>)
 800146a:	f000 fdd1 	bl	8002010 <HAL_ADC_Start>
	  if (HAL_ADC_PollForConversion(&hadc1, 1000000) == HAL_OK) {
 800146e:	495f      	ldr	r1, [pc, #380]	; (80015ec <main+0x27c>)
 8001470:	485d      	ldr	r0, [pc, #372]	; (80015e8 <main+0x278>)
 8001472:	f000 fe73 	bl	800215c <HAL_ADC_PollForConversion>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d139      	bne.n	80014f0 <main+0x180>
		  ADCValue = HAL_ADC_GetValue(&hadc1);
 800147c:	485a      	ldr	r0, [pc, #360]	; (80015e8 <main+0x278>)
 800147e:	f000 fef1 	bl	8002264 <HAL_ADC_GetValue>
 8001482:	4603      	mov	r3, r0
 8001484:	2200      	movs	r2, #0
 8001486:	469a      	mov	sl, r3
 8001488:	4693      	mov	fp, r2
 800148a:	e9c7 ab32 	strd	sl, fp, [r7, #200]	; 0xc8
		  ADCpercent = 0.02528;
 800148e:	4b58      	ldr	r3, [pc, #352]	; (80015f0 <main+0x280>)
 8001490:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  ADCpercent = -(float)(ADCValue)*ADCpercent+112.4;
 8001494:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001498:	f7ff fca6 	bl	8000de8 <__aeabi_ul2f>
 800149c:	4603      	mov	r3, r0
 800149e:	ee07 3a90 	vmov	s15, r3
 80014a2:	eeb1 7a67 	vneg.f32	s14, s15
 80014a6:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80014aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ae:	ee17 0a90 	vmov	r0, s15
 80014b2:	f7ff f851 	bl	8000558 <__aeabi_f2d>
 80014b6:	a33e      	add	r3, pc, #248	; (adr r3, 80015b0 <main+0x240>)
 80014b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014bc:	f7fe feee 	bl	800029c <__adddf3>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	f7ff fb76 	bl	8000bb8 <__aeabi_d2f>
 80014cc:	4603      	mov	r3, r0
 80014ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		  ADCpercent = (ADCpercent>100) ? 100.0 : ADCpercent;
 80014d2:	edd7 7a35 	vldr	s15, [r7, #212]	; 0xd4
 80014d6:	ed9f 7a47 	vldr	s14, [pc, #284]	; 80015f4 <main+0x284>
 80014da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e2:	dd01      	ble.n	80014e8 <main+0x178>
 80014e4:	4b44      	ldr	r3, [pc, #272]	; (80015f8 <main+0x288>)
 80014e6:	e001      	b.n	80014ec <main+0x17c>
 80014e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80014ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	  }

	  // I2C Transmit
	  sprintf(buffer,"%.1f%.1f%.1f",ADCpercent,temp,humid);
 80014f0:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80014f4:	f7ff f830 	bl	8000558 <__aeabi_f2d>
 80014f8:	4680      	mov	r8, r0
 80014fa:	4689      	mov	r9, r1
 80014fc:	4b38      	ldr	r3, [pc, #224]	; (80015e0 <main+0x270>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f829 	bl	8000558 <__aeabi_f2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	4b36      	ldr	r3, [pc, #216]	; (80015e4 <main+0x274>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4618      	mov	r0, r3
 8001510:	f7ff f822 	bl	8000558 <__aeabi_f2d>
 8001514:	4602      	mov	r2, r0
 8001516:	460b      	mov	r3, r1
 8001518:	f107 0064 	add.w	r0, r7, #100	; 0x64
 800151c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001520:	e9cd 4500 	strd	r4, r5, [sp]
 8001524:	4642      	mov	r2, r8
 8001526:	464b      	mov	r3, r9
 8001528:	4934      	ldr	r1, [pc, #208]	; (80015fc <main+0x28c>)
 800152a:	f004 f859 	bl	80055e0 <siprintf>
	  HAL_I2C_Slave_Transmit(&hi2c1, &buffer, strlen(buffer), HAL_MAX_DELAY);
 800152e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001532:	4618      	mov	r0, r3
 8001534:	f7fe fe54 	bl	80001e0 <strlen>
 8001538:	4603      	mov	r3, r0
 800153a:	b29a      	uxth	r2, r3
 800153c:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001540:	f04f 33ff 	mov.w	r3, #4294967295
 8001544:	482e      	ldr	r0, [pc, #184]	; (8001600 <main+0x290>)
 8001546:	f001 fca9 	bl	8002e9c <HAL_I2C_Slave_Transmit>

	  // I2C Receive


	  // CONSOLE LOGS
	  sprintf(logger, "soilhumid : %.1f , airtemp : %.1f C , airhumid : %.1f%c \r\n",ADCpercent,temp,humid,p);
 800154a:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 800154e:	f7ff f803 	bl	8000558 <__aeabi_f2d>
 8001552:	4680      	mov	r8, r0
 8001554:	4689      	mov	r9, r1
 8001556:	4b22      	ldr	r3, [pc, #136]	; (80015e0 <main+0x270>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe fffc 	bl	8000558 <__aeabi_f2d>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	4b1f      	ldr	r3, [pc, #124]	; (80015e4 <main+0x274>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7fe fff5 	bl	8000558 <__aeabi_f2d>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	f897 10d3 	ldrb.w	r1, [r7, #211]	; 0xd3
 8001576:	4638      	mov	r0, r7
 8001578:	9104      	str	r1, [sp, #16]
 800157a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800157e:	e9cd 4500 	strd	r4, r5, [sp]
 8001582:	4642      	mov	r2, r8
 8001584:	464b      	mov	r3, r9
 8001586:	491f      	ldr	r1, [pc, #124]	; (8001604 <main+0x294>)
 8001588:	f004 f82a 	bl	80055e0 <siprintf>
	  HAL_UART_Transmit(&huart2, &logger, strlen(logger), HAL_MAX_DELAY);
 800158c:	463b      	mov	r3, r7
 800158e:	4618      	mov	r0, r3
 8001590:	f7fe fe26 	bl	80001e0 <strlen>
 8001594:	4603      	mov	r3, r0
 8001596:	b29a      	uxth	r2, r3
 8001598:	4639      	mov	r1, r7
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	481a      	ldr	r0, [pc, #104]	; (8001608 <main+0x298>)
 80015a0:	f002 fdd1 	bl	8004146 <HAL_UART_Transmit>

	  HAL_Delay(10000);
 80015a4:	f242 7010 	movw	r0, #10000	; 0x2710
 80015a8:	f000 fcca 	bl	8001f40 <HAL_Delay>
  {
 80015ac:	e6f8      	b.n	80013a0 <main+0x30>
 80015ae:	bf00      	nop
 80015b0:	9999999a 	.word	0x9999999a
 80015b4:	405c1999 	.word	0x405c1999
 80015b8:	20000294 	.word	0x20000294
 80015bc:	20000328 	.word	0x20000328
 80015c0:	20000314 	.word	0x20000314
 80015c4:	20000315 	.word	0x20000315
 80015c8:	20000316 	.word	0x20000316
 80015cc:	20000317 	.word	0x20000317
 80015d0:	20000318 	.word	0x20000318
 80015d4:	2000031c 	.word	0x2000031c
 80015d8:	2000031a 	.word	0x2000031a
 80015dc:	40240000 	.word	0x40240000
 80015e0:	20000320 	.word	0x20000320
 80015e4:	20000324 	.word	0x20000324
 80015e8:	200001f8 	.word	0x200001f8
 80015ec:	000f4240 	.word	0x000f4240
 80015f0:	3ccf1801 	.word	0x3ccf1801
 80015f4:	42c80000 	.word	0x42c80000
 80015f8:	42c80000 	.word	0x42c80000
 80015fc:	08007ae8 	.word	0x08007ae8
 8001600:	20000240 	.word	0x20000240
 8001604:	08007af8 	.word	0x08007af8
 8001608:	200002d4 	.word	0x200002d4

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	; 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2230      	movs	r2, #48	; 0x30
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f003 fb6e 	bl	8004cfc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <SystemClock_Config+0xcc>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <SystemClock_Config+0xcc>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <SystemClock_Config+0xcc>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <SystemClock_Config+0xd0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <SystemClock_Config+0xd0>)
 8001656:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <SystemClock_Config+0xd0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001668:	2302      	movs	r3, #2
 800166a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800166c:	2301      	movs	r3, #1
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001670:	2310      	movs	r3, #16
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001674:	2302      	movs	r3, #2
 8001676:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001678:	2300      	movs	r3, #0
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800167c:	2310      	movs	r3, #16
 800167e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001680:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001686:	2304      	movs	r3, #4
 8001688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800168a:	2304      	movs	r3, #4
 800168c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	4618      	mov	r0, r3
 8001694:	f001 fde0 	bl	8003258 <HAL_RCC_OscConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800169e:	f000 f989 	bl	80019b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a2:	230f      	movs	r3, #15
 80016a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a6:	2302      	movs	r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016b8:	f107 030c 	add.w	r3, r7, #12
 80016bc:	2102      	movs	r1, #2
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 f838 	bl	8003734 <HAL_RCC_ClockConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80016ca:	f000 f973 	bl	80019b4 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3750      	adds	r7, #80	; 0x50
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_ADC1_Init+0x98>)
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <MX_ADC1_Init+0x9c>)
 80016f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_ADC1_Init+0x98>)
 80016fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_ADC1_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_ADC1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_ADC1_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_ADC1_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_ADC1_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_ADC1_Init+0x98>)
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <MX_ADC1_Init+0xa0>)
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_ADC1_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_ADC1_Init+0x98>)
 800172e:	2201      	movs	r2, #1
 8001730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_ADC1_Init+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_ADC1_Init+0x98>)
 800173c:	2201      	movs	r2, #1
 800173e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_ADC1_Init+0x98>)
 8001742:	f000 fc21 	bl	8001f88 <HAL_ADC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800174c:	f000 f932 	bl	80019b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001750:	2301      	movs	r3, #1
 8001752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_ADC1_Init+0x98>)
 8001762:	f000 fd8d 	bl	8002280 <HAL_ADC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800176c:	f000 f922 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	200001f8 	.word	0x200001f8
 800177c:	40012000 	.word	0x40012000
 8001780:	0f000001 	.word	0x0f000001

08001784 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001788:	4b12      	ldr	r3, [pc, #72]	; (80017d4 <MX_I2C1_Init+0x50>)
 800178a:	4a13      	ldr	r2, [pc, #76]	; (80017d8 <MX_I2C1_Init+0x54>)
 800178c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <MX_I2C1_Init+0x50>)
 8001790:	4a12      	ldr	r2, [pc, #72]	; (80017dc <MX_I2C1_Init+0x58>)
 8001792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001794:	4b0f      	ldr	r3, [pc, #60]	; (80017d4 <MX_I2C1_Init+0x50>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 16;
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <MX_I2C1_Init+0x50>)
 800179c:	2210      	movs	r2, #16
 800179e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80017a0:	4b0c      	ldr	r3, [pc, #48]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017a2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a8:	4b0a      	ldr	r3, [pc, #40]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80017ae:	4b09      	ldr	r3, [pc, #36]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b4:	4b07      	ldr	r3, [pc, #28]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017ba:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017bc:	2200      	movs	r2, #0
 80017be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	; (80017d4 <MX_I2C1_Init+0x50>)
 80017c2:	f001 fa27 	bl	8002c14 <HAL_I2C_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80017cc:	f000 f8f2 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20000240 	.word	0x20000240
 80017d8:	40005400 	.word	0x40005400
 80017dc:	000186a0 	.word	0x000186a0

080017e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b086      	sub	sp, #24
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
 80017f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017f4:	463b      	mov	r3, r7
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <MX_TIM1_Init+0x98>)
 80017fe:	4a1f      	ldr	r2, [pc, #124]	; (800187c <MX_TIM1_Init+0x9c>)
 8001800:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001802:	4b1d      	ldr	r3, [pc, #116]	; (8001878 <MX_TIM1_Init+0x98>)
 8001804:	2253      	movs	r2, #83	; 0x53
 8001806:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001808:	4b1b      	ldr	r3, [pc, #108]	; (8001878 <MX_TIM1_Init+0x98>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xfff-1;
 800180e:	4b1a      	ldr	r3, [pc, #104]	; (8001878 <MX_TIM1_Init+0x98>)
 8001810:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001814:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001816:	4b18      	ldr	r3, [pc, #96]	; (8001878 <MX_TIM1_Init+0x98>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800181c:	4b16      	ldr	r3, [pc, #88]	; (8001878 <MX_TIM1_Init+0x98>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001822:	4b15      	ldr	r3, [pc, #84]	; (8001878 <MX_TIM1_Init+0x98>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001828:	4813      	ldr	r0, [pc, #76]	; (8001878 <MX_TIM1_Init+0x98>)
 800182a:	f002 f9a3 	bl	8003b74 <HAL_TIM_Base_Init>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001834:	f000 f8be 	bl	80019b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001838:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800183c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4619      	mov	r1, r3
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <MX_TIM1_Init+0x98>)
 8001846:	f002 f9e4 	bl	8003c12 <HAL_TIM_ConfigClockSource>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001850:	f000 f8b0 	bl	80019b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800185c:	463b      	mov	r3, r7
 800185e:	4619      	mov	r1, r3
 8001860:	4805      	ldr	r0, [pc, #20]	; (8001878 <MX_TIM1_Init+0x98>)
 8001862:	f002 fbb5 	bl	8003fd0 <HAL_TIMEx_MasterConfigSynchronization>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800186c:	f000 f8a2 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000294 	.word	0x20000294
 800187c:	40010000 	.word	0x40010000

08001880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001884:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 8001886:	4a12      	ldr	r2, [pc, #72]	; (80018d0 <MX_USART2_UART_Init+0x50>)
 8001888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800188a:	4b10      	ldr	r3, [pc, #64]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 800188c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018a6:	220c      	movs	r2, #12
 80018a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART2_UART_Init+0x4c>)
 80018b8:	f002 fbf8 	bl	80040ac <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80018c2:	f000 f877 	bl	80019b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	200002d4 	.word	0x200002d4
 80018d0:	40004400 	.word	0x40004400

080018d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08a      	sub	sp, #40	; 0x28
 80018d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018da:	f107 0314 	add.w	r3, r7, #20
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
 80018e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <MX_GPIO_Init+0xd0>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <MX_GPIO_Init+0xd0>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <MX_GPIO_Init+0xd0>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	4b26      	ldr	r3, [pc, #152]	; (80019a4 <MX_GPIO_Init+0xd0>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4a25      	ldr	r2, [pc, #148]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001910:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4b23      	ldr	r3, [pc, #140]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	4b1f      	ldr	r3, [pc, #124]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192a:	4a1e      	ldr	r2, [pc, #120]	; (80019a4 <MX_GPIO_Init+0xd0>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6313      	str	r3, [r2, #48]	; 0x30
 8001932:	4b1c      	ldr	r3, [pc, #112]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800193e:	2300      	movs	r3, #0
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	4a17      	ldr	r2, [pc, #92]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001948:	f043 0302 	orr.w	r3, r3, #2
 800194c:	6313      	str	r3, [r2, #48]	; 0x30
 800194e:	4b15      	ldr	r3, [pc, #84]	; (80019a4 <MX_GPIO_Init+0xd0>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	f003 0302 	and.w	r3, r3, #2
 8001956:	607b      	str	r3, [r7, #4]
 8001958:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|LD2_Pin, GPIO_PIN_RESET);
 800195a:	2200      	movs	r2, #0
 800195c:	2130      	movs	r1, #48	; 0x30
 800195e:	4812      	ldr	r0, [pc, #72]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001960:	f001 f93e 	bl	8002be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001968:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800196a:	4b10      	ldr	r3, [pc, #64]	; (80019ac <MX_GPIO_Init+0xd8>)
 800196c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 0314 	add.w	r3, r7, #20
 8001976:	4619      	mov	r1, r3
 8001978:	480d      	ldr	r0, [pc, #52]	; (80019b0 <MX_GPIO_Init+0xdc>)
 800197a:	f000 ff95 	bl	80028a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 LD2_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_4|LD2_Pin;
 800197e:	2330      	movs	r3, #48	; 0x30
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001982:	2301      	movs	r3, #1
 8001984:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001986:	2300      	movs	r3, #0
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198a:	2300      	movs	r3, #0
 800198c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198e:	f107 0314 	add.w	r3, r7, #20
 8001992:	4619      	mov	r1, r3
 8001994:	4804      	ldr	r0, [pc, #16]	; (80019a8 <MX_GPIO_Init+0xd4>)
 8001996:	f000 ff87 	bl	80028a8 <HAL_GPIO_Init>

}
 800199a:	bf00      	nop
 800199c:	3728      	adds	r7, #40	; 0x28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023800 	.word	0x40023800
 80019a8:	40020000 	.word	0x40020000
 80019ac:	10210000 	.word	0x10210000
 80019b0:	40020800 	.word	0x40020800

080019b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019b8:	b672      	cpsid	i
}
 80019ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019bc:	e7fe      	b.n	80019bc <Error_Handler+0x8>
	...

080019c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b082      	sub	sp, #8
 80019c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	607b      	str	r3, [r7, #4]
 80019ca:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_MspInit+0x4c>)
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_MspInit+0x4c>)
 80019d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019d4:	6453      	str	r3, [r2, #68]	; 0x44
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_MspInit+0x4c>)
 80019d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019de:	607b      	str	r3, [r7, #4]
 80019e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	603b      	str	r3, [r7, #0]
 80019e6:	4b09      	ldr	r3, [pc, #36]	; (8001a0c <HAL_MspInit+0x4c>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ea:	4a08      	ldr	r2, [pc, #32]	; (8001a0c <HAL_MspInit+0x4c>)
 80019ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f0:	6413      	str	r3, [r2, #64]	; 0x40
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_MspInit+0x4c>)
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019fa:	603b      	str	r3, [r7, #0]
 80019fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019fe:	2007      	movs	r0, #7
 8001a00:	f000 ff1e 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40023800 	.word	0x40023800

08001a10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b08a      	sub	sp, #40	; 0x28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
 8001a26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a17      	ldr	r2, [pc, #92]	; (8001a8c <HAL_ADC_MspInit+0x7c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d127      	bne.n	8001a82 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001a32:	2300      	movs	r3, #0
 8001a34:	613b      	str	r3, [r7, #16]
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a15      	ldr	r2, [pc, #84]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4a:	613b      	str	r3, [r7, #16]
 8001a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60fb      	str	r3, [r7, #12]
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a56:	4a0e      	ldr	r2, [pc, #56]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_ADC_MspInit+0x80>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 0314 	add.w	r3, r7, #20
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4805      	ldr	r0, [pc, #20]	; (8001a94 <HAL_ADC_MspInit+0x84>)
 8001a7e:	f000 ff13 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001a82:	bf00      	nop
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40012000 	.word	0x40012000
 8001a90:	40023800 	.word	0x40023800
 8001a94:	40020000 	.word	0x40020000

08001a98 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b08a      	sub	sp, #40	; 0x28
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa0:	f107 0314 	add.w	r3, r7, #20
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a19      	ldr	r2, [pc, #100]	; (8001b1c <HAL_I2C_MspInit+0x84>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d12b      	bne.n	8001b12 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	613b      	str	r3, [r7, #16]
 8001abe:	4b18      	ldr	r3, [pc, #96]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	4a17      	ldr	r2, [pc, #92]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001ac4:	f043 0302 	orr.w	r3, r3, #2
 8001ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	613b      	str	r3, [r7, #16]
 8001ad4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ad6:	23c0      	movs	r3, #192	; 0xc0
 8001ad8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ada:	2312      	movs	r3, #18
 8001adc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ae6:	2304      	movs	r3, #4
 8001ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aea:	f107 0314 	add.w	r3, r7, #20
 8001aee:	4619      	mov	r1, r3
 8001af0:	480c      	ldr	r0, [pc, #48]	; (8001b24 <HAL_I2C_MspInit+0x8c>)
 8001af2:	f000 fed9 	bl	80028a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b09      	ldr	r3, [pc, #36]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a08      	ldr	r2, [pc, #32]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001b00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b06      	ldr	r3, [pc, #24]	; (8001b20 <HAL_I2C_MspInit+0x88>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001b12:	bf00      	nop
 8001b14:	3728      	adds	r7, #40	; 0x28
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	40005400 	.word	0x40005400
 8001b20:	40023800 	.word	0x40023800
 8001b24:	40020400 	.word	0x40020400

08001b28 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a0b      	ldr	r2, [pc, #44]	; (8001b64 <HAL_TIM_Base_MspInit+0x3c>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d10d      	bne.n	8001b56 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_TIM_Base_MspInit+0x40>)
 8001b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b42:	4a09      	ldr	r2, [pc, #36]	; (8001b68 <HAL_TIM_Base_MspInit+0x40>)
 8001b44:	f043 0301 	orr.w	r3, r3, #1
 8001b48:	6453      	str	r3, [r2, #68]	; 0x44
 8001b4a:	4b07      	ldr	r3, [pc, #28]	; (8001b68 <HAL_TIM_Base_MspInit+0x40>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	f003 0301 	and.w	r3, r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001b56:	bf00      	nop
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	40010000 	.word	0x40010000
 8001b68:	40023800 	.word	0x40023800

08001b6c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b74:	f107 0314 	add.w	r3, r7, #20
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	605a      	str	r2, [r3, #4]
 8001b7e:	609a      	str	r2, [r3, #8]
 8001b80:	60da      	str	r2, [r3, #12]
 8001b82:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a19      	ldr	r2, [pc, #100]	; (8001bf0 <HAL_UART_MspInit+0x84>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d12b      	bne.n	8001be6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b8e:	2300      	movs	r3, #0
 8001b90:	613b      	str	r3, [r7, #16]
 8001b92:	4b18      	ldr	r3, [pc, #96]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b96:	4a17      	ldr	r2, [pc, #92]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b9c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b9e:	4b15      	ldr	r3, [pc, #84]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	613b      	str	r3, [r7, #16]
 8001ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	2300      	movs	r3, #0
 8001bac:	60fb      	str	r3, [r7, #12]
 8001bae:	4b11      	ldr	r3, [pc, #68]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb2:	4a10      	ldr	r2, [pc, #64]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001bb4:	f043 0301 	orr.w	r3, r3, #1
 8001bb8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bba:	4b0e      	ldr	r3, [pc, #56]	; (8001bf4 <HAL_UART_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	60fb      	str	r3, [r7, #12]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bca:	2302      	movs	r3, #2
 8001bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bd6:	2307      	movs	r3, #7
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bda:	f107 0314 	add.w	r3, r7, #20
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	; (8001bf8 <HAL_UART_MspInit+0x8c>)
 8001be2:	f000 fe61 	bl	80028a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001be6:	bf00      	nop
 8001be8:	3728      	adds	r7, #40	; 0x28
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	40004400 	.word	0x40004400
 8001bf4:	40023800 	.word	0x40023800
 8001bf8:	40020000 	.word	0x40020000

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c00:	e7fe      	b.n	8001c00 <NMI_Handler+0x4>

08001c02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c06:	e7fe      	b.n	8001c06 <HardFault_Handler+0x4>

08001c08 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler+0x4>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c12:	e7fe      	b.n	8001c12 <BusFault_Handler+0x4>

08001c14 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c18:	e7fe      	b.n	8001c18 <UsageFault_Handler+0x4>

08001c1a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c48:	f000 f95a 	bl	8001f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c4c:	bf00      	nop
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
	return 1;
 8001c54:	2301      	movs	r3, #1
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <_kill>:

int _kill(int pid, int sig)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c6a:	f003 f81d 	bl	8004ca8 <__errno>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2216      	movs	r2, #22
 8001c72:	601a      	str	r2, [r3, #0]
	return -1;
 8001c74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <_exit>:

void _exit (int status)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c88:	f04f 31ff 	mov.w	r1, #4294967295
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ffe7 	bl	8001c60 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c92:	e7fe      	b.n	8001c92 <_exit+0x12>

08001c94 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b086      	sub	sp, #24
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	60f8      	str	r0, [r7, #12]
 8001c9c:	60b9      	str	r1, [r7, #8]
 8001c9e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
 8001ca4:	e00a      	b.n	8001cbc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ca6:	f3af 8000 	nop.w
 8001caa:	4601      	mov	r1, r0
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	60ba      	str	r2, [r7, #8]
 8001cb2:	b2ca      	uxtb	r2, r1
 8001cb4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	3301      	adds	r3, #1
 8001cba:	617b      	str	r3, [r7, #20]
 8001cbc:	697a      	ldr	r2, [r7, #20]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	dbf0      	blt.n	8001ca6 <_read+0x12>
	}

return len;
 8001cc4:	687b      	ldr	r3, [r7, #4]
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b086      	sub	sp, #24
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	60f8      	str	r0, [r7, #12]
 8001cd6:	60b9      	str	r1, [r7, #8]
 8001cd8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cda:	2300      	movs	r3, #0
 8001cdc:	617b      	str	r3, [r7, #20]
 8001cde:	e009      	b.n	8001cf4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	60ba      	str	r2, [r7, #8]
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbf1      	blt.n	8001ce0 <_write+0x12>
	}
	return len;
 8001cfc:	687b      	ldr	r3, [r7, #4]
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3718      	adds	r7, #24
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <_close>:

int _close(int file)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
	return -1;
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1c:	4770      	bx	lr

08001d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d1e:	b480      	push	{r7}
 8001d20:	b083      	sub	sp, #12
 8001d22:	af00      	add	r7, sp, #0
 8001d24:	6078      	str	r0, [r7, #4]
 8001d26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d2e:	605a      	str	r2, [r3, #4]
	return 0;
 8001d30:	2300      	movs	r3, #0
}
 8001d32:	4618      	mov	r0, r3
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <_isatty>:

int _isatty(int file)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
	return 1;
 8001d46:	2301      	movs	r3, #1
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	370c      	adds	r7, #12
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	60f8      	str	r0, [r7, #12]
 8001d5c:	60b9      	str	r1, [r7, #8]
 8001d5e:	607a      	str	r2, [r7, #4]
	return 0;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d78:	4a14      	ldr	r2, [pc, #80]	; (8001dcc <_sbrk+0x5c>)
 8001d7a:	4b15      	ldr	r3, [pc, #84]	; (8001dd0 <_sbrk+0x60>)
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d84:	4b13      	ldr	r3, [pc, #76]	; (8001dd4 <_sbrk+0x64>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d102      	bne.n	8001d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d8c:	4b11      	ldr	r3, [pc, #68]	; (8001dd4 <_sbrk+0x64>)
 8001d8e:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <_sbrk+0x68>)
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <_sbrk+0x64>)
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4413      	add	r3, r2
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d207      	bcs.n	8001db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001da0:	f002 ff82 	bl	8004ca8 <__errno>
 8001da4:	4603      	mov	r3, r0
 8001da6:	220c      	movs	r2, #12
 8001da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
 8001dae:	e009      	b.n	8001dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001db0:	4b08      	ldr	r3, [pc, #32]	; (8001dd4 <_sbrk+0x64>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001db6:	4b07      	ldr	r3, [pc, #28]	; (8001dd4 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	4a05      	ldr	r2, [pc, #20]	; (8001dd4 <_sbrk+0x64>)
 8001dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3718      	adds	r7, #24
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	20020000 	.word	0x20020000
 8001dd0:	00000400 	.word	0x00000400
 8001dd4:	2000032c 	.word	0x2000032c
 8001dd8:	20000348 	.word	0x20000348

08001ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001de0:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <SystemInit+0x28>)
 8001de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001de6:	4a07      	ldr	r2, [pc, #28]	; (8001e04 <SystemInit+0x28>)
 8001de8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001dec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001df0:	4b04      	ldr	r3, [pc, #16]	; (8001e04 <SystemInit+0x28>)
 8001df2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001df6:	609a      	str	r2, [r3, #8]
#endif
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	e000ed00 	.word	0xe000ed00

08001e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e40 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e0c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e0e:	e003      	b.n	8001e18 <LoopCopyDataInit>

08001e10 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e12:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e14:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e16:	3104      	adds	r1, #4

08001e18 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e18:	480b      	ldr	r0, [pc, #44]	; (8001e48 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e1c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e1e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e20:	d3f6      	bcc.n	8001e10 <CopyDataInit>
  ldr  r2, =_sbss
 8001e22:	4a0b      	ldr	r2, [pc, #44]	; (8001e50 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e24:	e002      	b.n	8001e2c <LoopFillZerobss>

08001e26 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e26:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e28:	f842 3b04 	str.w	r3, [r2], #4

08001e2c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e2c:	4b09      	ldr	r3, [pc, #36]	; (8001e54 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e2e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e30:	d3f9      	bcc.n	8001e26 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e32:	f7ff ffd3 	bl	8001ddc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e36:	f002 ff3d 	bl	8004cb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e3a:	f7ff fa99 	bl	8001370 <main>
  bx  lr    
 8001e3e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e40:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e44:	08007f34 	.word	0x08007f34
  ldr  r0, =_sdata
 8001e48:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e4c:	200001dc 	.word	0x200001dc
  ldr  r2, =_sbss
 8001e50:	200001dc 	.word	0x200001dc
  ldr  r3, = _ebss
 8001e54:	20000344 	.word	0x20000344

08001e58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e58:	e7fe      	b.n	8001e58 <ADC_IRQHandler>
	...

08001e5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e60:	4b0e      	ldr	r3, [pc, #56]	; (8001e9c <HAL_Init+0x40>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_Init+0x40>)
 8001e66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_Init+0x40>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_Init+0x40>)
 8001e72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e78:	4b08      	ldr	r3, [pc, #32]	; (8001e9c <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_Init+0x40>)
 8001e7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e84:	2003      	movs	r0, #3
 8001e86:	f000 fcdb 	bl	8002840 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e8a:	2000      	movs	r0, #0
 8001e8c:	f000 f808 	bl	8001ea0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e90:	f7ff fd96 	bl	80019c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40023c00 	.word	0x40023c00

08001ea0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ea8:	4b12      	ldr	r3, [pc, #72]	; (8001ef4 <HAL_InitTick+0x54>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b12      	ldr	r3, [pc, #72]	; (8001ef8 <HAL_InitTick+0x58>)
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001eb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 fce5 	bl	800288e <HAL_SYSTICK_Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d001      	beq.n	8001ece <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e00e      	b.n	8001eec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b0f      	cmp	r3, #15
 8001ed2:	d80a      	bhi.n	8001eea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8001edc:	f000 fcbb 	bl	8002856 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ee0:	4a06      	ldr	r2, [pc, #24]	; (8001efc <HAL_InitTick+0x5c>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	e000      	b.n	8001eec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	20000008 	.word	0x20000008
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <HAL_IncTick+0x20>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4b06      	ldr	r3, [pc, #24]	; (8001f24 <HAL_IncTick+0x24>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <HAL_IncTick+0x24>)
 8001f12:	6013      	str	r3, [r2, #0]
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	20000008 	.word	0x20000008
 8001f24:	20000330 	.word	0x20000330

08001f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f2c:	4b03      	ldr	r3, [pc, #12]	; (8001f3c <HAL_GetTick+0x14>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	46bd      	mov	sp, r7
 8001f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f38:	4770      	bx	lr
 8001f3a:	bf00      	nop
 8001f3c:	20000330 	.word	0x20000330

08001f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f48:	f7ff ffee 	bl	8001f28 <HAL_GetTick>
 8001f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f58:	d005      	beq.n	8001f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f5a:	4b0a      	ldr	r3, [pc, #40]	; (8001f84 <HAL_Delay+0x44>)
 8001f5c:	781b      	ldrb	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4413      	add	r3, r2
 8001f64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f66:	bf00      	nop
 8001f68:	f7ff ffde 	bl	8001f28 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d8f7      	bhi.n	8001f68 <HAL_Delay+0x28>
  {
  }
}
 8001f78:	bf00      	nop
 8001f7a:	bf00      	nop
 8001f7c:	3710      	adds	r7, #16
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000008 	.word	0x20000008

08001f88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e033      	b.n	8002006 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d109      	bne.n	8001fba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fd32 	bl	8001a10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbe:	f003 0310 	and.w	r3, r3, #16
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d118      	bne.n	8001ff8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001fce:	f023 0302 	bic.w	r3, r3, #2
 8001fd2:	f043 0202 	orr.w	r2, r3, #2
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 fa82 	bl	80024e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fea:	f023 0303 	bic.w	r3, r3, #3
 8001fee:	f043 0201 	orr.w	r2, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ff6:	e001      	b.n	8001ffc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2200      	movs	r2, #0
 8002000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002004:	7bfb      	ldrb	r3, [r7, #15]
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
	...

08002010 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002018:	2300      	movs	r3, #0
 800201a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_ADC_Start+0x1a>
 8002026:	2302      	movs	r3, #2
 8002028:	e08a      	b.n	8002140 <HAL_ADC_Start+0x130>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d018      	beq.n	8002072 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f042 0201 	orr.w	r2, r2, #1
 800204e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002050:	4b3e      	ldr	r3, [pc, #248]	; (800214c <HAL_ADC_Start+0x13c>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a3e      	ldr	r2, [pc, #248]	; (8002150 <HAL_ADC_Start+0x140>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0c9a      	lsrs	r2, r3, #18
 800205c:	4613      	mov	r3, r2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	4413      	add	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002064:	e002      	b.n	800206c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3b01      	subs	r3, #1
 800206a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d1f9      	bne.n	8002066 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b01      	cmp	r3, #1
 800207e:	d15e      	bne.n	800213e <HAL_ADC_Start+0x12e>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002084:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d007      	beq.n	80020b2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020aa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020be:	d106      	bne.n	80020ce <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f023 0206 	bic.w	r2, r3, #6
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	645a      	str	r2, [r3, #68]	; 0x44
 80020cc:	e002      	b.n	80020d4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_ADC_Start+0x144>)
 80020de:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80020e8:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d10f      	bne.n	8002116 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d11c      	bne.n	800213e <HAL_ADC_Start+0x12e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689a      	ldr	r2, [r3, #8]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	e013      	b.n	800213e <HAL_ADC_Start+0x12e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a0f      	ldr	r2, [pc, #60]	; (8002158 <HAL_ADC_Start+0x148>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d10e      	bne.n	800213e <HAL_ADC_Start+0x12e>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d107      	bne.n	800213e <HAL_ADC_Start+0x12e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800213c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	20000000 	.word	0x20000000
 8002150:	431bde83 	.word	0x431bde83
 8002154:	40012300 	.word	0x40012300
 8002158:	40012000 	.word	0x40012000

0800215c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	689b      	ldr	r3, [r3, #8]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002178:	d113      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002184:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002188:	d10b      	bne.n	80021a2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f043 0220 	orr.w	r2, r3, #32
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e05c      	b.n	800225c <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80021a2:	f7ff fec1 	bl	8001f28 <HAL_GetTick>
 80021a6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021a8:	e01a      	b.n	80021e0 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b0:	d016      	beq.n	80021e0 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_ADC_PollForConversion+0x6c>
 80021b8:	f7ff feb6 	bl	8001f28 <HAL_GetTick>
 80021bc:	4602      	mov	r2, r0
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d20b      	bcs.n	80021e0 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f043 0204 	orr.w	r2, r3, #4
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 80021dc:	2303      	movs	r3, #3
 80021de:	e03d      	b.n	800225c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0302 	and.w	r3, r3, #2
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d1dd      	bne.n	80021aa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f06f 0212 	mvn.w	r2, #18
 80021f6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d123      	bne.n	800225a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002216:	2b00      	cmp	r3, #0
 8002218:	d11f      	bne.n	800225a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002220:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002224:	2b00      	cmp	r3, #0
 8002226:	d006      	beq.n	8002236 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002232:	2b00      	cmp	r3, #0
 8002234:	d111      	bne.n	800225a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d105      	bne.n	800225a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	f043 0201 	orr.w	r2, r3, #1
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3710      	adds	r7, #16
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800228a:	2300      	movs	r3, #0
 800228c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002294:	2b01      	cmp	r3, #1
 8002296:	d101      	bne.n	800229c <HAL_ADC_ConfigChannel+0x1c>
 8002298:	2302      	movs	r3, #2
 800229a:	e113      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x244>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2b09      	cmp	r3, #9
 80022aa:	d925      	bls.n	80022f8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	68d9      	ldr	r1, [r3, #12]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	4613      	mov	r3, r2
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	4413      	add	r3, r2
 80022c0:	3b1e      	subs	r3, #30
 80022c2:	2207      	movs	r2, #7
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	43da      	mvns	r2, r3
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	400a      	ands	r2, r1
 80022d0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	68d9      	ldr	r1, [r3, #12]
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	4618      	mov	r0, r3
 80022e4:	4603      	mov	r3, r0
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4403      	add	r3, r0
 80022ea:	3b1e      	subs	r3, #30
 80022ec:	409a      	lsls	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	60da      	str	r2, [r3, #12]
 80022f6:	e022      	b.n	800233e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6919      	ldr	r1, [r3, #16]
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	b29b      	uxth	r3, r3
 8002304:	461a      	mov	r2, r3
 8002306:	4613      	mov	r3, r2
 8002308:	005b      	lsls	r3, r3, #1
 800230a:	4413      	add	r3, r2
 800230c:	2207      	movs	r2, #7
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43da      	mvns	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	400a      	ands	r2, r1
 800231a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	6919      	ldr	r1, [r3, #16]
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	689a      	ldr	r2, [r3, #8]
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	b29b      	uxth	r3, r3
 800232c:	4618      	mov	r0, r3
 800232e:	4603      	mov	r3, r0
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	4403      	add	r3, r0
 8002334:	409a      	lsls	r2, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800233e:	683b      	ldr	r3, [r7, #0]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	2b06      	cmp	r3, #6
 8002344:	d824      	bhi.n	8002390 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685a      	ldr	r2, [r3, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	3b05      	subs	r3, #5
 8002358:	221f      	movs	r2, #31
 800235a:	fa02 f303 	lsl.w	r3, r2, r3
 800235e:	43da      	mvns	r2, r3
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	400a      	ands	r2, r1
 8002366:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	685a      	ldr	r2, [r3, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4413      	add	r3, r2
 8002380:	3b05      	subs	r3, #5
 8002382:	fa00 f203 	lsl.w	r2, r0, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	635a      	str	r2, [r3, #52]	; 0x34
 800238e:	e04c      	b.n	800242a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b0c      	cmp	r3, #12
 8002396:	d824      	bhi.n	80023e2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	4613      	mov	r3, r2
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	3b23      	subs	r3, #35	; 0x23
 80023aa:	221f      	movs	r2, #31
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	43da      	mvns	r2, r3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	400a      	ands	r2, r1
 80023b8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	4618      	mov	r0, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	4613      	mov	r3, r2
 80023ce:	009b      	lsls	r3, r3, #2
 80023d0:	4413      	add	r3, r2
 80023d2:	3b23      	subs	r3, #35	; 0x23
 80023d4:	fa00 f203 	lsl.w	r2, r0, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	430a      	orrs	r2, r1
 80023de:	631a      	str	r2, [r3, #48]	; 0x30
 80023e0:	e023      	b.n	800242a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685a      	ldr	r2, [r3, #4]
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	3b41      	subs	r3, #65	; 0x41
 80023f4:	221f      	movs	r2, #31
 80023f6:	fa02 f303 	lsl.w	r3, r2, r3
 80023fa:	43da      	mvns	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	400a      	ands	r2, r1
 8002402:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	b29b      	uxth	r3, r3
 8002410:	4618      	mov	r0, r3
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b41      	subs	r3, #65	; 0x41
 800241e:	fa00 f203 	lsl.w	r2, r0, r3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	430a      	orrs	r2, r1
 8002428:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_ADC_ConfigChannel+0x250>)
 800242c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <HAL_ADC_ConfigChannel+0x254>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10f      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d8>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b12      	cmp	r3, #18
 800243e:	d10b      	bne.n	8002458 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a1d      	ldr	r2, [pc, #116]	; (80024d4 <HAL_ADC_ConfigChannel+0x254>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d12b      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x23a>
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <HAL_ADC_ConfigChannel+0x258>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d003      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x1f4>
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2b11      	cmp	r3, #17
 8002472:	d122      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a11      	ldr	r2, [pc, #68]	; (80024d8 <HAL_ADC_ConfigChannel+0x258>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d111      	bne.n	80024ba <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <HAL_ADC_ConfigChannel+0x25c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_ADC_ConfigChannel+0x260>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	0c9a      	lsrs	r2, r3, #18
 80024a2:	4613      	mov	r3, r2
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024ac:	e002      	b.n	80024b4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f9      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	40012300 	.word	0x40012300
 80024d4:	40012000 	.word	0x40012000
 80024d8:	10000012 	.word	0x10000012
 80024dc:	20000000 	.word	0x20000000
 80024e0:	431bde83 	.word	0x431bde83

080024e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ec:	4b79      	ldr	r3, [pc, #484]	; (80026d4 <ADC_Init+0x1f0>)
 80024ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	685a      	ldr	r2, [r3, #4]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	431a      	orrs	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	685a      	ldr	r2, [r3, #4]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002518:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	691b      	ldr	r3, [r3, #16]
 8002524:	021a      	lsls	r2, r3, #8
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	685a      	ldr	r2, [r3, #4]
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800253c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	6859      	ldr	r1, [r3, #4]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	689a      	ldr	r2, [r3, #8]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	430a      	orrs	r2, r1
 800254e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800255e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	6899      	ldr	r1, [r3, #8]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68da      	ldr	r2, [r3, #12]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	430a      	orrs	r2, r1
 8002570:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002576:	4a58      	ldr	r2, [pc, #352]	; (80026d8 <ADC_Init+0x1f4>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d022      	beq.n	80025c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689a      	ldr	r2, [r3, #8]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800258a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	6899      	ldr	r1, [r3, #8]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689a      	ldr	r2, [r3, #8]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	6899      	ldr	r1, [r3, #8]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	430a      	orrs	r2, r1
 80025be:	609a      	str	r2, [r3, #8]
 80025c0:	e00f      	b.n	80025e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80025d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	689a      	ldr	r2, [r3, #8]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80025e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f022 0202 	bic.w	r2, r2, #2
 80025f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6899      	ldr	r1, [r3, #8]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	7e1b      	ldrb	r3, [r3, #24]
 80025fc:	005a      	lsls	r2, r3, #1
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f893 3020 	ldrb.w	r3, [r3, #32]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01b      	beq.n	8002648 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800261e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	685a      	ldr	r2, [r3, #4]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800262e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	3b01      	subs	r3, #1
 800263c:	035a      	lsls	r2, r3, #13
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
 8002646:	e007      	b.n	8002658 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002656:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002666:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	3b01      	subs	r3, #1
 8002674:	051a      	lsls	r2, r3, #20
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800268c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800269a:	025a      	lsls	r2, r3, #9
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689a      	ldr	r2, [r3, #8]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6899      	ldr	r1, [r3, #8]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	029a      	lsls	r2, r3, #10
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	430a      	orrs	r2, r1
 80026c6:	609a      	str	r2, [r3, #8]
}
 80026c8:	bf00      	nop
 80026ca:	3714      	adds	r7, #20
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	40012300 	.word	0x40012300
 80026d8:	0f000001 	.word	0x0f000001

080026dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f003 0307 	and.w	r3, r3, #7
 80026ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 80026ee:	68db      	ldr	r3, [r3, #12]
 80026f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002704:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002708:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800270c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800270e:	4a04      	ldr	r2, [pc, #16]	; (8002720 <__NVIC_SetPriorityGrouping+0x44>)
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	60d3      	str	r3, [r2, #12]
}
 8002714:	bf00      	nop
 8002716:	3714      	adds	r7, #20
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000ed00 	.word	0xe000ed00

08002724 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002724:	b480      	push	{r7}
 8002726:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002728:	4b04      	ldr	r3, [pc, #16]	; (800273c <__NVIC_GetPriorityGrouping+0x18>)
 800272a:	68db      	ldr	r3, [r3, #12]
 800272c:	0a1b      	lsrs	r3, r3, #8
 800272e:	f003 0307 	and.w	r3, r3, #7
}
 8002732:	4618      	mov	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr
 800273c:	e000ed00 	.word	0xe000ed00

08002740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	4603      	mov	r3, r0
 8002748:	6039      	str	r1, [r7, #0]
 800274a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800274c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002750:	2b00      	cmp	r3, #0
 8002752:	db0a      	blt.n	800276a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	b2da      	uxtb	r2, r3
 8002758:	490c      	ldr	r1, [pc, #48]	; (800278c <__NVIC_SetPriority+0x4c>)
 800275a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800275e:	0112      	lsls	r2, r2, #4
 8002760:	b2d2      	uxtb	r2, r2
 8002762:	440b      	add	r3, r1
 8002764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002768:	e00a      	b.n	8002780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	4908      	ldr	r1, [pc, #32]	; (8002790 <__NVIC_SetPriority+0x50>)
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	3b04      	subs	r3, #4
 8002778:	0112      	lsls	r2, r2, #4
 800277a:	b2d2      	uxtb	r2, r2
 800277c:	440b      	add	r3, r1
 800277e:	761a      	strb	r2, [r3, #24]
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278a:	4770      	bx	lr
 800278c:	e000e100 	.word	0xe000e100
 8002790:	e000ed00 	.word	0xe000ed00

08002794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	60f8      	str	r0, [r7, #12]
 800279c:	60b9      	str	r1, [r7, #8]
 800279e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f1c3 0307 	rsb	r3, r3, #7
 80027ae:	2b04      	cmp	r3, #4
 80027b0:	bf28      	it	cs
 80027b2:	2304      	movcs	r3, #4
 80027b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	3304      	adds	r3, #4
 80027ba:	2b06      	cmp	r3, #6
 80027bc:	d902      	bls.n	80027c4 <NVIC_EncodePriority+0x30>
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	3b03      	subs	r3, #3
 80027c2:	e000      	b.n	80027c6 <NVIC_EncodePriority+0x32>
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027c8:	f04f 32ff 	mov.w	r2, #4294967295
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	43da      	mvns	r2, r3
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	401a      	ands	r2, r3
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027dc:	f04f 31ff 	mov.w	r1, #4294967295
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	fa01 f303 	lsl.w	r3, r1, r3
 80027e6:	43d9      	mvns	r1, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027ec:	4313      	orrs	r3, r2
         );
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3724      	adds	r7, #36	; 0x24
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3b01      	subs	r3, #1
 8002808:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800280c:	d301      	bcc.n	8002812 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800280e:	2301      	movs	r3, #1
 8002810:	e00f      	b.n	8002832 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002812:	4a0a      	ldr	r2, [pc, #40]	; (800283c <SysTick_Config+0x40>)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	3b01      	subs	r3, #1
 8002818:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800281a:	210f      	movs	r1, #15
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f7ff ff8e 	bl	8002740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <SysTick_Config+0x40>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <SysTick_Config+0x40>)
 800282c:	2207      	movs	r2, #7
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002830:	2300      	movs	r3, #0
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	e000e010 	.word	0xe000e010

08002840 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f7ff ff47 	bl	80026dc <__NVIC_SetPriorityGrouping>
}
 800284e:	bf00      	nop
 8002850:	3708      	adds	r7, #8
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}

08002856 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002856:	b580      	push	{r7, lr}
 8002858:	b086      	sub	sp, #24
 800285a:	af00      	add	r7, sp, #0
 800285c:	4603      	mov	r3, r0
 800285e:	60b9      	str	r1, [r7, #8]
 8002860:	607a      	str	r2, [r7, #4]
 8002862:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002864:	2300      	movs	r3, #0
 8002866:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002868:	f7ff ff5c 	bl	8002724 <__NVIC_GetPriorityGrouping>
 800286c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	68b9      	ldr	r1, [r7, #8]
 8002872:	6978      	ldr	r0, [r7, #20]
 8002874:	f7ff ff8e 	bl	8002794 <NVIC_EncodePriority>
 8002878:	4602      	mov	r2, r0
 800287a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800287e:	4611      	mov	r1, r2
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff ff5d 	bl	8002740 <__NVIC_SetPriority>
}
 8002886:	bf00      	nop
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b082      	sub	sp, #8
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f7ff ffb0 	bl	80027fc <SysTick_Config>
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3708      	adds	r7, #8
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
	...

080028a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b089      	sub	sp, #36	; 0x24
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028b6:	2300      	movs	r3, #0
 80028b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028be:	2300      	movs	r3, #0
 80028c0:	61fb      	str	r3, [r7, #28]
 80028c2:	e159      	b.n	8002b78 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028c4:	2201      	movs	r2, #1
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	fa02 f303 	lsl.w	r3, r2, r3
 80028cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	697a      	ldr	r2, [r7, #20]
 80028d4:	4013      	ands	r3, r2
 80028d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028d8:	693a      	ldr	r2, [r7, #16]
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	429a      	cmp	r2, r3
 80028de:	f040 8148 	bne.w	8002b72 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d00b      	beq.n	8002902 <HAL_GPIO_Init+0x5a>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d007      	beq.n	8002902 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028f6:	2b11      	cmp	r3, #17
 80028f8:	d003      	beq.n	8002902 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b12      	cmp	r3, #18
 8002900:	d130      	bne.n	8002964 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	2203      	movs	r2, #3
 800290e:	fa02 f303 	lsl.w	r3, r2, r3
 8002912:	43db      	mvns	r3, r3
 8002914:	69ba      	ldr	r2, [r7, #24]
 8002916:	4013      	ands	r3, r2
 8002918:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	68da      	ldr	r2, [r3, #12]
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fa02 f303 	lsl.w	r3, r2, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4313      	orrs	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002938:	2201      	movs	r2, #1
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	091b      	lsrs	r3, r3, #4
 800294e:	f003 0201 	and.w	r2, r3, #1
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	fa02 f303 	lsl.w	r3, r2, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4313      	orrs	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69ba      	ldr	r2, [r7, #24]
 8002962:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	68db      	ldr	r3, [r3, #12]
 8002968:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	2203      	movs	r2, #3
 8002970:	fa02 f303 	lsl.w	r3, r2, r3
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	689a      	ldr	r2, [r3, #8]
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4313      	orrs	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d003      	beq.n	80029a4 <HAL_GPIO_Init+0xfc>
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	2b12      	cmp	r3, #18
 80029a2:	d123      	bne.n	80029ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80029a4:	69fb      	ldr	r3, [r7, #28]
 80029a6:	08da      	lsrs	r2, r3, #3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	3208      	adds	r2, #8
 80029ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	220f      	movs	r2, #15
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	4013      	ands	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	691a      	ldr	r2, [r3, #16]
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	fa02 f303 	lsl.w	r3, r2, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	08da      	lsrs	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3208      	adds	r2, #8
 80029e6:	69b9      	ldr	r1, [r7, #24]
 80029e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	2203      	movs	r2, #3
 80029f8:	fa02 f303 	lsl.w	r3, r2, r3
 80029fc:	43db      	mvns	r3, r3
 80029fe:	69ba      	ldr	r2, [r7, #24]
 8002a00:	4013      	ands	r3, r2
 8002a02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 0203 	and.w	r2, r3, #3
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	f000 80a2 	beq.w	8002b72 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a2e:	2300      	movs	r3, #0
 8002a30:	60fb      	str	r3, [r7, #12]
 8002a32:	4b57      	ldr	r3, [pc, #348]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <HAL_GPIO_Init+0x2e8>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a4a:	4a52      	ldr	r2, [pc, #328]	; (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	089b      	lsrs	r3, r3, #2
 8002a50:	3302      	adds	r3, #2
 8002a52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	f003 0303 	and.w	r3, r3, #3
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	220f      	movs	r2, #15
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43db      	mvns	r3, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a49      	ldr	r2, [pc, #292]	; (8002b98 <HAL_GPIO_Init+0x2f0>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d019      	beq.n	8002aaa <HAL_GPIO_Init+0x202>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a48      	ldr	r2, [pc, #288]	; (8002b9c <HAL_GPIO_Init+0x2f4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d013      	beq.n	8002aa6 <HAL_GPIO_Init+0x1fe>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a47      	ldr	r2, [pc, #284]	; (8002ba0 <HAL_GPIO_Init+0x2f8>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d00d      	beq.n	8002aa2 <HAL_GPIO_Init+0x1fa>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a46      	ldr	r2, [pc, #280]	; (8002ba4 <HAL_GPIO_Init+0x2fc>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d007      	beq.n	8002a9e <HAL_GPIO_Init+0x1f6>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a45      	ldr	r2, [pc, #276]	; (8002ba8 <HAL_GPIO_Init+0x300>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d101      	bne.n	8002a9a <HAL_GPIO_Init+0x1f2>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e008      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002a9a:	2307      	movs	r3, #7
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x204>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f002 0203 	and.w	r2, r2, #3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002abc:	4935      	ldr	r1, [pc, #212]	; (8002b94 <HAL_GPIO_Init+0x2ec>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002aca:	4b38      	ldr	r3, [pc, #224]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002aee:	4a2f      	ldr	r2, [pc, #188]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002af4:	4b2d      	ldr	r3, [pc, #180]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b18:	4a24      	ldr	r2, [pc, #144]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b1e:	4b23      	ldr	r3, [pc, #140]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b42:	4a1a      	ldr	r2, [pc, #104]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b48:	4b18      	ldr	r3, [pc, #96]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b6c:	4a0f      	ldr	r2, [pc, #60]	; (8002bac <HAL_GPIO_Init+0x304>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	f67f aea2 	bls.w	80028c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40013c00 	.word	0x40013c00

08002bb0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
 8002bb8:	460b      	mov	r3, r1
 8002bba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	691a      	ldr	r2, [r3, #16]
 8002bc0:	887b      	ldrh	r3, [r7, #2]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	73fb      	strb	r3, [r7, #15]
 8002bcc:	e001      	b.n	8002bd2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3714      	adds	r7, #20
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	460b      	mov	r3, r1
 8002bea:	807b      	strh	r3, [r7, #2]
 8002bec:	4613      	mov	r3, r2
 8002bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bf0:	787b      	ldrb	r3, [r7, #1]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bf6:	887a      	ldrh	r2, [r7, #2]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bfc:	e003      	b.n	8002c06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bfe:	887b      	ldrh	r3, [r7, #2]
 8002c00:	041a      	lsls	r2, r3, #16
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	619a      	str	r2, [r3, #24]
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
	...

08002c14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d101      	bne.n	8002c26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e12b      	b.n	8002e7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d106      	bne.n	8002c40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe ff2c 	bl	8001a98 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2224      	movs	r2, #36	; 0x24
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	681a      	ldr	r2, [r3, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f022 0201 	bic.w	r2, r2, #1
 8002c56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002c76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c78:	f000 ff54 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8002c7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a81      	ldr	r2, [pc, #516]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d807      	bhi.n	8002c98 <HAL_I2C_Init+0x84>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4a80      	ldr	r2, [pc, #512]	; (8002e8c <HAL_I2C_Init+0x278>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	bf94      	ite	ls
 8002c90:	2301      	movls	r3, #1
 8002c92:	2300      	movhi	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	e006      	b.n	8002ca6 <HAL_I2C_Init+0x92>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4a7d      	ldr	r2, [pc, #500]	; (8002e90 <HAL_I2C_Init+0x27c>)
 8002c9c:	4293      	cmp	r3, r2
 8002c9e:	bf94      	ite	ls
 8002ca0:	2301      	movls	r3, #1
 8002ca2:	2300      	movhi	r3, #0
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e0e7      	b.n	8002e7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4a78      	ldr	r2, [pc, #480]	; (8002e94 <HAL_I2C_Init+0x280>)
 8002cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb6:	0c9b      	lsrs	r3, r3, #18
 8002cb8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	68ba      	ldr	r2, [r7, #8]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	4a6a      	ldr	r2, [pc, #424]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d802      	bhi.n	8002ce8 <HAL_I2C_Init+0xd4>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	e009      	b.n	8002cfc <HAL_I2C_Init+0xe8>
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	4a69      	ldr	r2, [pc, #420]	; (8002e98 <HAL_I2C_Init+0x284>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	6812      	ldr	r2, [r2, #0]
 8002d00:	430b      	orrs	r3, r1
 8002d02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	69db      	ldr	r3, [r3, #28]
 8002d0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002d0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	495c      	ldr	r1, [pc, #368]	; (8002e88 <HAL_I2C_Init+0x274>)
 8002d18:	428b      	cmp	r3, r1
 8002d1a:	d819      	bhi.n	8002d50 <HAL_I2C_Init+0x13c>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	1e59      	subs	r1, r3, #1
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	005b      	lsls	r3, r3, #1
 8002d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d2a:	1c59      	adds	r1, r3, #1
 8002d2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002d30:	400b      	ands	r3, r1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_I2C_Init+0x138>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	1e59      	subs	r1, r3, #1
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	685b      	ldr	r3, [r3, #4]
 8002d3e:	005b      	lsls	r3, r3, #1
 8002d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d44:	3301      	adds	r3, #1
 8002d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d4a:	e051      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002d4c:	2304      	movs	r3, #4
 8002d4e:	e04f      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d111      	bne.n	8002d7c <HAL_I2C_Init+0x168>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1e58      	subs	r0, r3, #1
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6859      	ldr	r1, [r3, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	005b      	lsls	r3, r3, #1
 8002d64:	440b      	add	r3, r1
 8002d66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	bf0c      	ite	eq
 8002d74:	2301      	moveq	r3, #1
 8002d76:	2300      	movne	r3, #0
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	e012      	b.n	8002da2 <HAL_I2C_Init+0x18e>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1e58      	subs	r0, r3, #1
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	0099      	lsls	r1, r3, #2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d92:	3301      	adds	r3, #1
 8002d94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	bf0c      	ite	eq
 8002d9c:	2301      	moveq	r3, #1
 8002d9e:	2300      	movne	r3, #0
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d001      	beq.n	8002daa <HAL_I2C_Init+0x196>
 8002da6:	2301      	movs	r3, #1
 8002da8:	e022      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d10e      	bne.n	8002dd0 <HAL_I2C_Init+0x1bc>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1e58      	subs	r0, r3, #1
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6859      	ldr	r1, [r3, #4]
 8002dba:	460b      	mov	r3, r1
 8002dbc:	005b      	lsls	r3, r3, #1
 8002dbe:	440b      	add	r3, r1
 8002dc0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dc4:	3301      	adds	r3, #1
 8002dc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dce:	e00f      	b.n	8002df0 <HAL_I2C_Init+0x1dc>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1e58      	subs	r0, r3, #1
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6859      	ldr	r1, [r3, #4]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	0099      	lsls	r1, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002de6:	3301      	adds	r3, #1
 8002de8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	6809      	ldr	r1, [r1, #0]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69da      	ldr	r2, [r3, #28]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002e1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6911      	ldr	r1, [r2, #16]
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	68d2      	ldr	r2, [r2, #12]
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	687a      	ldr	r2, [r7, #4]
 8002e2e:	6812      	ldr	r2, [r2, #0]
 8002e30:	430b      	orrs	r3, r1
 8002e32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	431a      	orrs	r2, r3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2200      	movs	r2, #0
 8002e64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2220      	movs	r2, #32
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	000186a0 	.word	0x000186a0
 8002e8c:	001e847f 	.word	0x001e847f
 8002e90:	003d08ff 	.word	0x003d08ff
 8002e94:	431bde83 	.word	0x431bde83
 8002e98:	10624dd3 	.word	0x10624dd3

08002e9c <HAL_I2C_Slave_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08a      	sub	sp, #40	; 0x28
 8002ea0:	af02      	add	r7, sp, #8
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	4613      	mov	r3, r2
 8002eaa:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eac:	f7ff f83c 	bl	8001f28 <HAL_GetTick>
 8002eb0:	61f8      	str	r0, [r7, #28]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b20      	cmp	r3, #32
 8002ebc:	f040 80fb 	bne.w	80030b6 <HAL_I2C_Slave_Transmit+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d002      	beq.n	8002ecc <HAL_I2C_Slave_Transmit+0x30>
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_I2C_Slave_Transmit+0x34>
    {
      return  HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0f3      	b.n	80030b8 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <HAL_I2C_Slave_Transmit+0x42>
 8002eda:	2302      	movs	r3, #2
 8002edc:	e0ec      	b.n	80030b8 <HAL_I2C_Slave_Transmit+0x21c>
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2201      	movs	r2, #1
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d007      	beq.n	8002f04 <HAL_I2C_Slave_Transmit+0x68>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f042 0201 	orr.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f12:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2221      	movs	r2, #33	; 0x21
 8002f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	68ba      	ldr	r2, [r7, #8]
 8002f2e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	88fa      	ldrh	r2, [r7, #6]
 8002f34:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f3a:	b29a      	uxth	r2, r3
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	4a5f      	ldr	r2, [pc, #380]	; (80030c0 <HAL_I2C_Slave_Transmit+0x224>)
 8002f44:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f54:	601a      	str	r2, [r3, #0]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4959      	ldr	r1, [pc, #356]	; (80030c4 <HAL_I2C_Slave_Transmit+0x228>)
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f8b1 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002f66:	4603      	mov	r3, r0
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d001      	beq.n	8002f70 <HAL_I2C_Slave_Transmit+0xd4>
    {
      return HAL_ERROR;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	e0a3      	b.n	80030b8 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f70:	2300      	movs	r3, #0
 8002f72:	61bb      	str	r3, [r7, #24]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	695b      	ldr	r3, [r3, #20]
 8002f7a:	61bb      	str	r3, [r7, #24]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699b      	ldr	r3, [r3, #24]
 8002f82:	61bb      	str	r3, [r7, #24]
 8002f84:	69bb      	ldr	r3, [r7, #24]

    /* If 10bit addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002f8e:	d165      	bne.n	800305c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until ADDR flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, RESET, Timeout, tickstart) != HAL_OK)
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	494a      	ldr	r1, [pc, #296]	; (80030c4 <HAL_I2C_Slave_Transmit+0x228>)
 8002f9a:	68f8      	ldr	r0, [r7, #12]
 8002f9c:	f000 f894 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d001      	beq.n	8002faa <HAL_I2C_Slave_Transmit+0x10e>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e086      	b.n	80030b8 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002faa:	2300      	movs	r3, #0
 8002fac:	617b      	str	r3, [r7, #20]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695b      	ldr	r3, [r3, #20]
 8002fb4:	617b      	str	r3, [r7, #20]
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	699b      	ldr	r3, [r3, #24]
 8002fbc:	617b      	str	r3, [r7, #20]
 8002fbe:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002fc0:	e04c      	b.n	800305c <HAL_I2C_Slave_Transmit+0x1c0>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fc2:	69fa      	ldr	r2, [r7, #28]
 8002fc4:	6839      	ldr	r1, [r7, #0]
 8002fc6:	68f8      	ldr	r0, [r7, #12]
 8002fc8:	f000 f8d5 	bl	8003176 <I2C_WaitOnTXEFlagUntilTimeout>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d009      	beq.n	8002fe6 <HAL_I2C_Slave_Transmit+0x14a>
      {
        /* Disable Address Acknowledge */
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fe0:	601a      	str	r2, [r3, #0]

        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e068      	b.n	80030b8 <HAL_I2C_Slave_Transmit+0x21c>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	781a      	ldrb	r2, [r3, #0]
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003000:	b29b      	uxth	r3, r3
 8003002:	3b01      	subs	r3, #1
 8003004:	b29a      	uxth	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800300e:	3b01      	subs	r3, #1
 8003010:	b29a      	uxth	r2, r3
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695b      	ldr	r3, [r3, #20]
 800301c:	f003 0304 	and.w	r3, r3, #4
 8003020:	2b04      	cmp	r3, #4
 8003022:	d11b      	bne.n	800305c <HAL_I2C_Slave_Transmit+0x1c0>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003028:	2b00      	cmp	r3, #0
 800302a:	d017      	beq.n	800305c <HAL_I2C_Slave_Transmit+0x1c0>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	781a      	ldrb	r2, [r3, #0]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003046:	b29b      	uxth	r3, r3
 8003048:	3b01      	subs	r3, #1
 800304a:	b29a      	uxth	r2, r3
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003054:	3b01      	subs	r3, #1
 8003056:	b29a      	uxth	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	851a      	strh	r2, [r3, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1ae      	bne.n	8002fc2 <HAL_I2C_Slave_Transmit+0x126>
      }
    }

    /* Wait until AF flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_AF, RESET, Timeout, tickstart) != HAL_OK)
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	2200      	movs	r2, #0
 800306c:	f44f 3182 	mov.w	r1, #66560	; 0x10400
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f000 f829 	bl	80030c8 <I2C_WaitOnFlagUntilTimeout>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d001      	beq.n	8003080 <HAL_I2C_Slave_Transmit+0x1e4>
    {
      return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e01b      	b.n	80030b8 <HAL_I2C_Slave_Transmit+0x21c>
    }

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003088:	615a      	str	r2, [r3, #20]

    /* Disable Address Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2220      	movs	r2, #32
 800309e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030b2:	2300      	movs	r3, #0
 80030b4:	e000      	b.n	80030b8 <HAL_I2C_Slave_Transmit+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80030b6:	2302      	movs	r3, #2
  }
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}
 80030c0:	ffff0000 	.word	0xffff0000
 80030c4:	00010002 	.word	0x00010002

080030c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	60b9      	str	r1, [r7, #8]
 80030d2:	603b      	str	r3, [r7, #0]
 80030d4:	4613      	mov	r3, r2
 80030d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80030d8:	e025      	b.n	8003126 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e0:	d021      	beq.n	8003126 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030e2:	f7fe ff21 	bl	8001f28 <HAL_GetTick>
 80030e6:	4602      	mov	r2, r0
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d302      	bcc.n	80030f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d116      	bne.n	8003126 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2220      	movs	r2, #32
 8003102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2200      	movs	r2, #0
 800310a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f043 0220 	orr.w	r2, r3, #32
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e023      	b.n	800316e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	0c1b      	lsrs	r3, r3, #16
 800312a:	b2db      	uxtb	r3, r3
 800312c:	2b01      	cmp	r3, #1
 800312e:	d10d      	bne.n	800314c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	43da      	mvns	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	4013      	ands	r3, r2
 800313c:	b29b      	uxth	r3, r3
 800313e:	2b00      	cmp	r3, #0
 8003140:	bf0c      	ite	eq
 8003142:	2301      	moveq	r3, #1
 8003144:	2300      	movne	r3, #0
 8003146:	b2db      	uxtb	r3, r3
 8003148:	461a      	mov	r2, r3
 800314a:	e00c      	b.n	8003166 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	43da      	mvns	r2, r3
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	4013      	ands	r3, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	bf0c      	ite	eq
 800315e:	2301      	moveq	r3, #1
 8003160:	2300      	movne	r3, #0
 8003162:	b2db      	uxtb	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	429a      	cmp	r2, r3
 800316a:	d0b6      	beq.n	80030da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003182:	e02d      	b.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f837 	bl	80031f8 <I2C_IsAcknowledgeFailed>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e02d      	b.n	80031f0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295
 800319a:	d021      	beq.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7fe fec4 	bl	8001f28 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ea:	2b80      	cmp	r3, #128	; 0x80
 80031ec:	d1ca      	bne.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d11b      	bne.n	8003248 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003218:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e25e      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d075      	beq.n	8003362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d00c      	beq.n	800329c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05b      	beq.n	8003360 <HAL_RCC_OscConfig+0x108>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d157      	bne.n	8003360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e239      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x74>
 80032be:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a75      	ldr	r2, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6f      	ldr	r2, [pc, #444]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6c      	ldr	r2, [pc, #432]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032f0:	4b69      	ldr	r3, [pc, #420]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a68      	ldr	r2, [pc, #416]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a65      	ldr	r2, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7fe fe0a 	bl	8001f28 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7fe fe06 	bl	8001f28 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e1fe      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xc0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fe fdf6 	bl	8001f28 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7fe fdf2 	bl	8001f28 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1ea      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0xe8>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1be      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4937      	ldr	r1, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_OscConfig+0x244>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe fdab 	bl	8001f28 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe fda7 	bl	8001f28 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e19f      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4925      	ldr	r1, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_OscConfig+0x244>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe fd8a 	bl	8001f28 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe fd86 	bl	8001f28 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e17e      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d036      	beq.n	80034b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe fd6a 	bl	8001f28 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe fd66 	bl	8001f28 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e15e      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x200>
 8003476:	e01b      	b.n	80034b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe fd53 	bl	8001f28 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	e00e      	b.n	80034a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003486:	f7fe fd4f 	bl	8001f28 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d907      	bls.n	80034a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e147      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
 8003498:	40023800 	.word	0x40023800
 800349c:	42470000 	.word	0x42470000
 80034a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ea      	bne.n	8003486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8097 	beq.w	80035ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b7d      	ldr	r3, [pc, #500]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a7c      	ldr	r2, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b7a      	ldr	r3, [pc, #488]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b77      	ldr	r3, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b74      	ldr	r3, [pc, #464]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fe fd0f 	bl	8001f28 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fe fd0b 	bl	8001f28 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e103      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x2ea>
 8003534:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a63      	ldr	r2, [pc, #396]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x30c>
 800354a:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003564:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a57      	ldr	r2, [pc, #348]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d015      	beq.n	80035b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe fcd0 	bl	8001f28 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fe fccc 	bl	8001f28 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0c2      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ee      	beq.n	800358c <HAL_RCC_OscConfig+0x334>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fe fcba 	bl	8001f28 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7fe fcb6 	bl	8001f28 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0ac      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ee      	bne.n	80035b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8098 	beq.w	8003726 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d05c      	beq.n	80036bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d141      	bne.n	800368e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fc8a 	bl	8001f28 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe fc86 	bl	8001f28 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e07e      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe fc5f 	bl	8001f28 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe fc5b 	bl	8001f28 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e053      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x416>
 800368c:	e04b      	b.n	8003726 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fc48 	bl	8001f28 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe fc44 	bl	8001f28 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e03c      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x444>
 80036ba:	e034      	b.n	8003726 <HAL_RCC_OscConfig+0x4ce>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e02f      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d4:	4b16      	ldr	r3, [pc, #88]	; (8003730 <HAL_RCC_OscConfig+0x4d8>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d11c      	bne.n	8003722 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d115      	bne.n	8003722 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036fc:	4013      	ands	r3, r2
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003702:	4293      	cmp	r3, r2
 8003704:	d10d      	bne.n	8003722 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003710:	429a      	cmp	r2, r3
 8003712:	d106      	bne.n	8003722 <HAL_RCC_OscConfig+0x4ca>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800371e:	429a      	cmp	r2, r3
 8003720:	d001      	beq.n	8003726 <HAL_RCC_OscConfig+0x4ce>
        {
          return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e000      	b.n	8003728 <HAL_RCC_OscConfig+0x4d0>
        }
      }
    }
  }
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	3718      	adds	r7, #24
 800372c:	46bd      	mov	sp, r7
 800372e:	bd80      	pop	{r7, pc}
 8003730:	40023800 	.word	0x40023800

08003734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e0cc      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003748:	4b68      	ldr	r3, [pc, #416]	; (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d90c      	bls.n	8003770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b65      	ldr	r3, [pc, #404]	; (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	b2d2      	uxtb	r2, r2
 800375c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800375e:	4b63      	ldr	r3, [pc, #396]	; (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d001      	beq.n	8003770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e0b8      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d020      	beq.n	80037be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003788:	4b59      	ldr	r3, [pc, #356]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	4a58      	ldr	r2, [pc, #352]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800378e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 0308 	and.w	r3, r3, #8
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037a0:	4b53      	ldr	r3, [pc, #332]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	4a52      	ldr	r2, [pc, #328]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037ac:	4b50      	ldr	r3, [pc, #320]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	494d      	ldr	r1, [pc, #308]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	4313      	orrs	r3, r2
 80037bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0301 	and.w	r3, r3, #1
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d044      	beq.n	8003854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037d2:	4b47      	ldr	r3, [pc, #284]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d119      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e07f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d003      	beq.n	80037f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037ee:	2b03      	cmp	r3, #3
 80037f0:	d107      	bne.n	8003802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f2:	4b3f      	ldr	r3, [pc, #252]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d109      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e06f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003802:	4b3b      	ldr	r3, [pc, #236]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0302 	and.w	r3, r3, #2
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e067      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003812:	4b37      	ldr	r3, [pc, #220]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f023 0203 	bic.w	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	4934      	ldr	r1, [pc, #208]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	4313      	orrs	r3, r2
 8003822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003824:	f7fe fb80 	bl	8001f28 <HAL_GetTick>
 8003828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800382a:	e00a      	b.n	8003842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800382c:	f7fe fb7c 	bl	8001f28 <HAL_GetTick>
 8003830:	4602      	mov	r2, r0
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	f241 3288 	movw	r2, #5000	; 0x1388
 800383a:	4293      	cmp	r3, r2
 800383c:	d901      	bls.n	8003842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800383e:	2303      	movs	r3, #3
 8003840:	e04f      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003842:	4b2b      	ldr	r3, [pc, #172]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 020c 	and.w	r2, r3, #12
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	429a      	cmp	r2, r3
 8003852:	d1eb      	bne.n	800382c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003854:	4b25      	ldr	r3, [pc, #148]	; (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 030f 	and.w	r3, r3, #15
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d20c      	bcs.n	800387c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003862:	4b22      	ldr	r3, [pc, #136]	; (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	b2d2      	uxtb	r2, r2
 8003868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_RCC_ClockConfig+0x1b8>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	683a      	ldr	r2, [r7, #0]
 8003874:	429a      	cmp	r2, r3
 8003876:	d001      	beq.n	800387c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e032      	b.n	80038e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0304 	and.w	r3, r3, #4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d008      	beq.n	800389a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003888:	4b19      	ldr	r3, [pc, #100]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4916      	ldr	r1, [pc, #88]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 8003896:	4313      	orrs	r3, r2
 8003898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0308 	and.w	r3, r3, #8
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d009      	beq.n	80038ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038a6:	4b12      	ldr	r3, [pc, #72]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	00db      	lsls	r3, r3, #3
 80038b4:	490e      	ldr	r1, [pc, #56]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ba:	f000 f821 	bl	8003900 <HAL_RCC_GetSysClockFreq>
 80038be:	4602      	mov	r2, r0
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_ClockConfig+0x1bc>)
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	091b      	lsrs	r3, r3, #4
 80038c6:	f003 030f 	and.w	r3, r3, #15
 80038ca:	490a      	ldr	r1, [pc, #40]	; (80038f4 <HAL_RCC_ClockConfig+0x1c0>)
 80038cc:	5ccb      	ldrb	r3, [r1, r3]
 80038ce:	fa22 f303 	lsr.w	r3, r2, r3
 80038d2:	4a09      	ldr	r2, [pc, #36]	; (80038f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038d6:	4b09      	ldr	r3, [pc, #36]	; (80038fc <HAL_RCC_ClockConfig+0x1c8>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fe fae0 	bl	8001ea0 <HAL_InitTick>

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023c00 	.word	0x40023c00
 80038f0:	40023800 	.word	0x40023800
 80038f4:	08007b34 	.word	0x08007b34
 80038f8:	20000000 	.word	0x20000000
 80038fc:	20000004 	.word	0x20000004

08003900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003904:	b094      	sub	sp, #80	; 0x50
 8003906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	647b      	str	r3, [r7, #68]	; 0x44
 800390c:	2300      	movs	r3, #0
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003910:	2300      	movs	r3, #0
 8003912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003918:	4b79      	ldr	r3, [pc, #484]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	f003 030c 	and.w	r3, r3, #12
 8003920:	2b08      	cmp	r3, #8
 8003922:	d00d      	beq.n	8003940 <HAL_RCC_GetSysClockFreq+0x40>
 8003924:	2b08      	cmp	r3, #8
 8003926:	f200 80e1 	bhi.w	8003aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800392a:	2b00      	cmp	r3, #0
 800392c:	d002      	beq.n	8003934 <HAL_RCC_GetSysClockFreq+0x34>
 800392e:	2b04      	cmp	r3, #4
 8003930:	d003      	beq.n	800393a <HAL_RCC_GetSysClockFreq+0x3a>
 8003932:	e0db      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b73      	ldr	r3, [pc, #460]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003936:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003938:	e0db      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800393a:	4b73      	ldr	r3, [pc, #460]	; (8003b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800393c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800393e:	e0d8      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003940:	4b6f      	ldr	r3, [pc, #444]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003948:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800394a:	4b6d      	ldr	r3, [pc, #436]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d063      	beq.n	8003a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003956:	4b6a      	ldr	r3, [pc, #424]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	099b      	lsrs	r3, r3, #6
 800395c:	2200      	movs	r2, #0
 800395e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003968:	633b      	str	r3, [r7, #48]	; 0x30
 800396a:	2300      	movs	r3, #0
 800396c:	637b      	str	r3, [r7, #52]	; 0x34
 800396e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003972:	4622      	mov	r2, r4
 8003974:	462b      	mov	r3, r5
 8003976:	f04f 0000 	mov.w	r0, #0
 800397a:	f04f 0100 	mov.w	r1, #0
 800397e:	0159      	lsls	r1, r3, #5
 8003980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003984:	0150      	lsls	r0, r2, #5
 8003986:	4602      	mov	r2, r0
 8003988:	460b      	mov	r3, r1
 800398a:	4621      	mov	r1, r4
 800398c:	1a51      	subs	r1, r2, r1
 800398e:	6139      	str	r1, [r7, #16]
 8003990:	4629      	mov	r1, r5
 8003992:	eb63 0301 	sbc.w	r3, r3, r1
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	f04f 0200 	mov.w	r2, #0
 800399c:	f04f 0300 	mov.w	r3, #0
 80039a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039a4:	4659      	mov	r1, fp
 80039a6:	018b      	lsls	r3, r1, #6
 80039a8:	4651      	mov	r1, sl
 80039aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039ae:	4651      	mov	r1, sl
 80039b0:	018a      	lsls	r2, r1, #6
 80039b2:	4651      	mov	r1, sl
 80039b4:	ebb2 0801 	subs.w	r8, r2, r1
 80039b8:	4659      	mov	r1, fp
 80039ba:	eb63 0901 	sbc.w	r9, r3, r1
 80039be:	f04f 0200 	mov.w	r2, #0
 80039c2:	f04f 0300 	mov.w	r3, #0
 80039c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039d2:	4690      	mov	r8, r2
 80039d4:	4699      	mov	r9, r3
 80039d6:	4623      	mov	r3, r4
 80039d8:	eb18 0303 	adds.w	r3, r8, r3
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	462b      	mov	r3, r5
 80039e0:	eb49 0303 	adc.w	r3, r9, r3
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80039f2:	4629      	mov	r1, r5
 80039f4:	024b      	lsls	r3, r1, #9
 80039f6:	4621      	mov	r1, r4
 80039f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039fc:	4621      	mov	r1, r4
 80039fe:	024a      	lsls	r2, r1, #9
 8003a00:	4610      	mov	r0, r2
 8003a02:	4619      	mov	r1, r3
 8003a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a06:	2200      	movs	r2, #0
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a10:	f7fd fa30 	bl	8000e74 <__aeabi_uldivmod>
 8003a14:	4602      	mov	r2, r0
 8003a16:	460b      	mov	r3, r1
 8003a18:	4613      	mov	r3, r2
 8003a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a1c:	e058      	b.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a1e:	4b38      	ldr	r3, [pc, #224]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	099b      	lsrs	r3, r3, #6
 8003a24:	2200      	movs	r2, #0
 8003a26:	4618      	mov	r0, r3
 8003a28:	4611      	mov	r1, r2
 8003a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a2e:	623b      	str	r3, [r7, #32]
 8003a30:	2300      	movs	r3, #0
 8003a32:	627b      	str	r3, [r7, #36]	; 0x24
 8003a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a38:	4642      	mov	r2, r8
 8003a3a:	464b      	mov	r3, r9
 8003a3c:	f04f 0000 	mov.w	r0, #0
 8003a40:	f04f 0100 	mov.w	r1, #0
 8003a44:	0159      	lsls	r1, r3, #5
 8003a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a4a:	0150      	lsls	r0, r2, #5
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4641      	mov	r1, r8
 8003a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a56:	4649      	mov	r1, r9
 8003a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a70:	ebb2 040a 	subs.w	r4, r2, sl
 8003a74:	eb63 050b 	sbc.w	r5, r3, fp
 8003a78:	f04f 0200 	mov.w	r2, #0
 8003a7c:	f04f 0300 	mov.w	r3, #0
 8003a80:	00eb      	lsls	r3, r5, #3
 8003a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a86:	00e2      	lsls	r2, r4, #3
 8003a88:	4614      	mov	r4, r2
 8003a8a:	461d      	mov	r5, r3
 8003a8c:	4643      	mov	r3, r8
 8003a8e:	18e3      	adds	r3, r4, r3
 8003a90:	603b      	str	r3, [r7, #0]
 8003a92:	464b      	mov	r3, r9
 8003a94:	eb45 0303 	adc.w	r3, r5, r3
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	f04f 0200 	mov.w	r2, #0
 8003a9e:	f04f 0300 	mov.w	r3, #0
 8003aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aa6:	4629      	mov	r1, r5
 8003aa8:	028b      	lsls	r3, r1, #10
 8003aaa:	4621      	mov	r1, r4
 8003aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	028a      	lsls	r2, r1, #10
 8003ab4:	4610      	mov	r0, r2
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aba:	2200      	movs	r2, #0
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	61fa      	str	r2, [r7, #28]
 8003ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ac4:	f7fd f9d6 	bl	8000e74 <__aeabi_uldivmod>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	460b      	mov	r3, r1
 8003acc:	4613      	mov	r3, r2
 8003ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ad0:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	0c1b      	lsrs	r3, r3, #16
 8003ad6:	f003 0303 	and.w	r3, r3, #3
 8003ada:	3301      	adds	r3, #1
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aea:	e002      	b.n	8003af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003aec:	4b05      	ldr	r3, [pc, #20]	; (8003b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8003aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3750      	adds	r7, #80	; 0x50
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afe:	bf00      	nop
 8003b00:	40023800 	.word	0x40023800
 8003b04:	00f42400 	.word	0x00f42400
 8003b08:	007a1200 	.word	0x007a1200

08003b0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b10:	4b03      	ldr	r3, [pc, #12]	; (8003b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b12:	681b      	ldr	r3, [r3, #0]
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000000 	.word	0x20000000

08003b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b28:	f7ff fff0 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	0a9b      	lsrs	r3, r3, #10
 8003b34:	f003 0307 	and.w	r3, r3, #7
 8003b38:	4903      	ldr	r1, [pc, #12]	; (8003b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b3a:	5ccb      	ldrb	r3, [r1, r3]
 8003b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40023800 	.word	0x40023800
 8003b48:	08007b44 	.word	0x08007b44

08003b4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b50:	f7ff ffdc 	bl	8003b0c <HAL_RCC_GetHCLKFreq>
 8003b54:	4602      	mov	r2, r0
 8003b56:	4b05      	ldr	r3, [pc, #20]	; (8003b6c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	0b5b      	lsrs	r3, r3, #13
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	4903      	ldr	r1, [pc, #12]	; (8003b70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b62:	5ccb      	ldrb	r3, [r1, r3]
 8003b64:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b68:	4618      	mov	r0, r3
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	08007b44 	.word	0x08007b44

08003b74 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	e01d      	b.n	8003bc2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d106      	bne.n	8003ba0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f7fd ffc4 	bl	8001b28 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2202      	movs	r2, #2
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	3304      	adds	r3, #4
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4610      	mov	r0, r2
 8003bb4:	f000 f8f2 	bl	8003d9c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3708      	adds	r7, #8
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}

08003bca <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003bca:	b480      	push	{r7}
 8003bcc:	b085      	sub	sp, #20
 8003bce:	af00      	add	r7, sp, #0
 8003bd0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	f003 0307 	and.w	r3, r3, #7
 8003be4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2b06      	cmp	r3, #6
 8003bea:	d007      	beq.n	8003bfc <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0201 	orr.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8003c04:	2300      	movs	r3, #0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3714      	adds	r7, #20
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c10:	4770      	bx	lr

08003c12 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
 8003c1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_TIM_ConfigClockSource+0x18>
 8003c26:	2302      	movs	r3, #2
 8003c28:	e0b3      	b.n	8003d92 <HAL_TIM_ConfigClockSource+0x180>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2202      	movs	r2, #2
 8003c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c50:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c62:	d03e      	beq.n	8003ce2 <HAL_TIM_ConfigClockSource+0xd0>
 8003c64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c68:	f200 8087 	bhi.w	8003d7a <HAL_TIM_ConfigClockSource+0x168>
 8003c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c70:	f000 8085 	beq.w	8003d7e <HAL_TIM_ConfigClockSource+0x16c>
 8003c74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c78:	d87f      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x168>
 8003c7a:	2b70      	cmp	r3, #112	; 0x70
 8003c7c:	d01a      	beq.n	8003cb4 <HAL_TIM_ConfigClockSource+0xa2>
 8003c7e:	2b70      	cmp	r3, #112	; 0x70
 8003c80:	d87b      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x168>
 8003c82:	2b60      	cmp	r3, #96	; 0x60
 8003c84:	d050      	beq.n	8003d28 <HAL_TIM_ConfigClockSource+0x116>
 8003c86:	2b60      	cmp	r3, #96	; 0x60
 8003c88:	d877      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x168>
 8003c8a:	2b50      	cmp	r3, #80	; 0x50
 8003c8c:	d03c      	beq.n	8003d08 <HAL_TIM_ConfigClockSource+0xf6>
 8003c8e:	2b50      	cmp	r3, #80	; 0x50
 8003c90:	d873      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x168>
 8003c92:	2b40      	cmp	r3, #64	; 0x40
 8003c94:	d058      	beq.n	8003d48 <HAL_TIM_ConfigClockSource+0x136>
 8003c96:	2b40      	cmp	r3, #64	; 0x40
 8003c98:	d86f      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x168>
 8003c9a:	2b30      	cmp	r3, #48	; 0x30
 8003c9c:	d064      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x156>
 8003c9e:	2b30      	cmp	r3, #48	; 0x30
 8003ca0:	d86b      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x168>
 8003ca2:	2b20      	cmp	r3, #32
 8003ca4:	d060      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x156>
 8003ca6:	2b20      	cmp	r3, #32
 8003ca8:	d867      	bhi.n	8003d7a <HAL_TIM_ConfigClockSource+0x168>
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d05c      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x156>
 8003cae:	2b10      	cmp	r3, #16
 8003cb0:	d05a      	beq.n	8003d68 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cb2:	e062      	b.n	8003d7a <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6818      	ldr	r0, [r3, #0]
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	6899      	ldr	r1, [r3, #8]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	68db      	ldr	r3, [r3, #12]
 8003cc4:	f000 f964 	bl	8003f90 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cd6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	609a      	str	r2, [r3, #8]
      break;
 8003ce0:	e04e      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6899      	ldr	r1, [r3, #8]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685a      	ldr	r2, [r3, #4]
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	68db      	ldr	r3, [r3, #12]
 8003cf2:	f000 f94d 	bl	8003f90 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d04:	609a      	str	r2, [r3, #8]
      break;
 8003d06:	e03b      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6818      	ldr	r0, [r3, #0]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	6859      	ldr	r1, [r3, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	461a      	mov	r2, r3
 8003d16:	f000 f8c1 	bl	8003e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2150      	movs	r1, #80	; 0x50
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 f91a 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003d26:	e02b      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6818      	ldr	r0, [r3, #0]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	6859      	ldr	r1, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	461a      	mov	r2, r3
 8003d36:	f000 f8e0 	bl	8003efa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2160      	movs	r1, #96	; 0x60
 8003d40:	4618      	mov	r0, r3
 8003d42:	f000 f90a 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003d46:	e01b      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6818      	ldr	r0, [r3, #0]
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	461a      	mov	r2, r3
 8003d56:	f000 f8a1 	bl	8003e9c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2140      	movs	r1, #64	; 0x40
 8003d60:	4618      	mov	r0, r3
 8003d62:	f000 f8fa 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003d66:	e00b      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4619      	mov	r1, r3
 8003d72:	4610      	mov	r0, r2
 8003d74:	f000 f8f1 	bl	8003f5a <TIM_ITRx_SetConfig>
      break;
 8003d78:	e002      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d7a:	bf00      	nop
 8003d7c:	e000      	b.n	8003d80 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003d7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d90:	2300      	movs	r3, #0
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
	...

08003d9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a34      	ldr	r2, [pc, #208]	; (8003e80 <TIM_Base_SetConfig+0xe4>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d00f      	beq.n	8003dd4 <TIM_Base_SetConfig+0x38>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dba:	d00b      	beq.n	8003dd4 <TIM_Base_SetConfig+0x38>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a31      	ldr	r2, [pc, #196]	; (8003e84 <TIM_Base_SetConfig+0xe8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d007      	beq.n	8003dd4 <TIM_Base_SetConfig+0x38>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a30      	ldr	r2, [pc, #192]	; (8003e88 <TIM_Base_SetConfig+0xec>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d003      	beq.n	8003dd4 <TIM_Base_SetConfig+0x38>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a2f      	ldr	r2, [pc, #188]	; (8003e8c <TIM_Base_SetConfig+0xf0>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d108      	bne.n	8003de6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	4a25      	ldr	r2, [pc, #148]	; (8003e80 <TIM_Base_SetConfig+0xe4>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d01b      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003df4:	d017      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a22      	ldr	r2, [pc, #136]	; (8003e84 <TIM_Base_SetConfig+0xe8>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d013      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4a21      	ldr	r2, [pc, #132]	; (8003e88 <TIM_Base_SetConfig+0xec>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d00f      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a20      	ldr	r2, [pc, #128]	; (8003e8c <TIM_Base_SetConfig+0xf0>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d00b      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a1f      	ldr	r2, [pc, #124]	; (8003e90 <TIM_Base_SetConfig+0xf4>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d007      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a1e      	ldr	r2, [pc, #120]	; (8003e94 <TIM_Base_SetConfig+0xf8>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d003      	beq.n	8003e26 <TIM_Base_SetConfig+0x8a>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <TIM_Base_SetConfig+0xfc>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d108      	bne.n	8003e38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	68fa      	ldr	r2, [r7, #12]
 8003e34:	4313      	orrs	r3, r2
 8003e36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a08      	ldr	r2, [pc, #32]	; (8003e80 <TIM_Base_SetConfig+0xe4>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d103      	bne.n	8003e6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	691a      	ldr	r2, [r3, #16]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	615a      	str	r2, [r3, #20]
}
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr
 8003e7e:	bf00      	nop
 8003e80:	40010000 	.word	0x40010000
 8003e84:	40000400 	.word	0x40000400
 8003e88:	40000800 	.word	0x40000800
 8003e8c:	40000c00 	.word	0x40000c00
 8003e90:	40014000 	.word	0x40014000
 8003e94:	40014400 	.word	0x40014400
 8003e98:	40014800 	.word	0x40014800

08003e9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b087      	sub	sp, #28
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a1b      	ldr	r3, [r3, #32]
 8003eac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6a1b      	ldr	r3, [r3, #32]
 8003eb2:	f023 0201 	bic.w	r2, r3, #1
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	699b      	ldr	r3, [r3, #24]
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	693a      	ldr	r2, [r7, #16]
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	f023 030a 	bic.w	r3, r3, #10
 8003ed8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	697a      	ldr	r2, [r7, #20]
 8003eec:	621a      	str	r2, [r3, #32]
}
 8003eee:	bf00      	nop
 8003ef0:	371c      	adds	r7, #28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr

08003efa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003efa:	b480      	push	{r7}
 8003efc:	b087      	sub	sp, #28
 8003efe:	af00      	add	r7, sp, #0
 8003f00:	60f8      	str	r0, [r7, #12]
 8003f02:	60b9      	str	r1, [r7, #8]
 8003f04:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	f023 0210 	bic.w	r2, r3, #16
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	699b      	ldr	r3, [r3, #24]
 8003f16:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003f24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	031b      	lsls	r3, r3, #12
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003f36:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	621a      	str	r2, [r3, #32]
}
 8003f4e:	bf00      	nop
 8003f50:	371c      	adds	r7, #28
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f043 0307 	orr.w	r3, r3, #7
 8003f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	609a      	str	r2, [r3, #8]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
 8003f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	021a      	lsls	r2, r3, #8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	609a      	str	r2, [r3, #8]
}
 8003fc4:	bf00      	nop
 8003fc6:	371c      	adds	r7, #28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d101      	bne.n	8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fe4:	2302      	movs	r3, #2
 8003fe6:	e050      	b.n	800408a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2201      	movs	r2, #1
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689b      	ldr	r3, [r3, #8]
 8004006:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800400e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68fa      	ldr	r2, [r7, #12]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1c      	ldr	r2, [pc, #112]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d013      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a18      	ldr	r2, [pc, #96]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a15      	ldr	r2, [pc, #84]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a13      	ldr	r2, [pc, #76]	; (80040a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d10c      	bne.n	8004078 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	4313      	orrs	r3, r2
 800406e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004088:	2300      	movs	r3, #0
}
 800408a:	4618      	mov	r0, r3
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40010000 	.word	0x40010000
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40014000 	.word	0x40014000

080040ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e03f      	b.n	800413e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd fd4a 	bl	8001b6c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f90b 	bl	800430c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}

08004146 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004146:	b580      	push	{r7, lr}
 8004148:	b088      	sub	sp, #32
 800414a:	af02      	add	r7, sp, #8
 800414c:	60f8      	str	r0, [r7, #12]
 800414e:	60b9      	str	r1, [r7, #8]
 8004150:	603b      	str	r3, [r7, #0]
 8004152:	4613      	mov	r3, r2
 8004154:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004156:	2300      	movs	r3, #0
 8004158:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b20      	cmp	r3, #32
 8004164:	f040 8083 	bne.w	800426e <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_UART_Transmit+0x2e>
 800416e:	88fb      	ldrh	r3, [r7, #6]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004174:	2301      	movs	r3, #1
 8004176:	e07b      	b.n	8004270 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <HAL_UART_Transmit+0x40>
 8004182:	2302      	movs	r3, #2
 8004184:	e074      	b.n	8004270 <HAL_UART_Transmit+0x12a>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2200      	movs	r2, #0
 8004192:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2221      	movs	r2, #33	; 0x21
 8004198:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800419c:	f7fd fec4 	bl	8001f28 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	88fa      	ldrh	r2, [r7, #6]
 80041a6:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	88fa      	ldrh	r2, [r7, #6]
 80041ac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80041b6:	e042      	b.n	800423e <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ce:	d122      	bne.n	8004216 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2180      	movs	r1, #128	; 0x80
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 f84c 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d001      	beq.n	80041ea <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 80041e6:	2303      	movs	r3, #3
 80041e8:	e042      	b.n	8004270 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	461a      	mov	r2, r3
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041fc:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d103      	bne.n	800420e <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	3302      	adds	r3, #2
 800420a:	60bb      	str	r3, [r7, #8]
 800420c:	e017      	b.n	800423e <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800420e:	68bb      	ldr	r3, [r7, #8]
 8004210:	3301      	adds	r3, #1
 8004212:	60bb      	str	r3, [r7, #8]
 8004214:	e013      	b.n	800423e <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	9300      	str	r3, [sp, #0]
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	2200      	movs	r2, #0
 800421e:	2180      	movs	r1, #128	; 0x80
 8004220:	68f8      	ldr	r0, [r7, #12]
 8004222:	f000 f829 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 8004226:	4603      	mov	r3, r0
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800422c:	2303      	movs	r3, #3
 800422e:	e01f      	b.n	8004270 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	60ba      	str	r2, [r7, #8]
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1b7      	bne.n	80041b8 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2200      	movs	r2, #0
 8004250:	2140      	movs	r1, #64	; 0x40
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f000 f810 	bl	8004278 <UART_WaitOnFlagUntilTimeout>
 8004258:	4603      	mov	r3, r0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d001      	beq.n	8004262 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e006      	b.n	8004270 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2220      	movs	r2, #32
 8004266:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	e000      	b.n	8004270 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800426e:	2302      	movs	r3, #2
  }
}
 8004270:	4618      	mov	r0, r3
 8004272:	3718      	adds	r7, #24
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b084      	sub	sp, #16
 800427c:	af00      	add	r7, sp, #0
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	603b      	str	r3, [r7, #0]
 8004284:	4613      	mov	r3, r2
 8004286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004288:	e02c      	b.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d028      	beq.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d007      	beq.n	80042a8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004298:	f7fd fe46 	bl	8001f28 <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d21d      	bcs.n	80042e4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68da      	ldr	r2, [r3, #12]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042b6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695a      	ldr	r2, [r3, #20]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f022 0201 	bic.w	r2, r2, #1
 80042c6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e00f      	b.n	8004304 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	4013      	ands	r3, r2
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	bf0c      	ite	eq
 80042f4:	2301      	moveq	r3, #1
 80042f6:	2300      	movne	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	461a      	mov	r2, r3
 80042fc:	79fb      	ldrb	r3, [r7, #7]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d0c3      	beq.n	800428a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800430c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004310:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8004314:	af00      	add	r7, sp, #0
 8004316:	f8c7 01fc 	str.w	r0, [r7, #508]	; 0x1fc
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800431a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	691b      	ldr	r3, [r3, #16]
 8004322:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004326:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800432a:	68d9      	ldr	r1, [r3, #12]
 800432c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	ea40 0301 	orr.w	r3, r0, r1
 8004336:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004338:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800433c:	689a      	ldr	r2, [r3, #8]
 800433e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004342:	691b      	ldr	r3, [r3, #16]
 8004344:	431a      	orrs	r2, r3
 8004346:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800434a:	695b      	ldr	r3, [r3, #20]
 800434c:	431a      	orrs	r2, r3
 800434e:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004352:	69db      	ldr	r3, [r3, #28]
 8004354:	4313      	orrs	r3, r2
 8004356:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  MODIFY_REG(huart->Instance->CR1,
 800435a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68db      	ldr	r3, [r3, #12]
 8004362:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004366:	f021 010c 	bic.w	r1, r1, #12
 800436a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8004374:	430b      	orrs	r3, r1
 8004376:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004378:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004384:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004388:	6999      	ldr	r1, [r3, #24]
 800438a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	ea40 0301 	orr.w	r3, r0, r1
 8004394:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004396:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043a0:	f040 824a 	bne.w	8004838 <UART_SetConfig+0x52c>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	4b96      	ldr	r3, [pc, #600]	; (8004604 <UART_SetConfig+0x2f8>)
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d006      	beq.n	80043be <UART_SetConfig+0xb2>
 80043b0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	4b94      	ldr	r3, [pc, #592]	; (8004608 <UART_SetConfig+0x2fc>)
 80043b8:	429a      	cmp	r2, r3
 80043ba:	f040 8129 	bne.w	8004610 <UART_SetConfig+0x304>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043be:	f7ff fbc5 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 80043c2:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043c6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 80043d0:	f8c7 21f4 	str.w	r2, [r7, #500]	; 0x1f4
 80043d4:	e9d7 457c 	ldrd	r4, r5, [r7, #496]	; 0x1f0
 80043d8:	4622      	mov	r2, r4
 80043da:	462b      	mov	r3, r5
 80043dc:	1891      	adds	r1, r2, r2
 80043de:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80043e2:	415b      	adcs	r3, r3
 80043e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80043e8:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80043ec:	4621      	mov	r1, r4
 80043ee:	1851      	adds	r1, r2, r1
 80043f0:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
 80043f4:	4629      	mov	r1, r5
 80043f6:	414b      	adcs	r3, r1
 80043f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	e9d7 8932 	ldrd	r8, r9, [r7, #200]	; 0xc8
 8004408:	4649      	mov	r1, r9
 800440a:	00cb      	lsls	r3, r1, #3
 800440c:	4641      	mov	r1, r8
 800440e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004412:	4641      	mov	r1, r8
 8004414:	00ca      	lsls	r2, r1, #3
 8004416:	4610      	mov	r0, r2
 8004418:	4619      	mov	r1, r3
 800441a:	4603      	mov	r3, r0
 800441c:	4622      	mov	r2, r4
 800441e:	189b      	adds	r3, r3, r2
 8004420:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8004424:	462b      	mov	r3, r5
 8004426:	460a      	mov	r2, r1
 8004428:	eb42 0303 	adc.w	r3, r2, r3
 800442c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8004430:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800443c:	f8c7 21e4 	str.w	r2, [r7, #484]	; 0x1e4
 8004440:	e9d7 1278 	ldrd	r1, r2, [r7, #480]	; 0x1e0
 8004444:	460b      	mov	r3, r1
 8004446:	18db      	adds	r3, r3, r3
 8004448:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800444c:	4613      	mov	r3, r2
 800444e:	eb42 0303 	adc.w	r3, r2, r3
 8004452:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004456:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 800445a:	e9d7 017a 	ldrd	r0, r1, [r7, #488]	; 0x1e8
 800445e:	f7fc fd09 	bl	8000e74 <__aeabi_uldivmod>
 8004462:	4602      	mov	r2, r0
 8004464:	460b      	mov	r3, r1
 8004466:	4b69      	ldr	r3, [pc, #420]	; (800460c <UART_SetConfig+0x300>)
 8004468:	fba3 2302 	umull	r2, r3, r3, r2
 800446c:	095b      	lsrs	r3, r3, #5
 800446e:	011c      	lsls	r4, r3, #4
 8004470:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004474:	2200      	movs	r2, #0
 8004476:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 800447a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800447e:	e9d7 8976 	ldrd	r8, r9, [r7, #472]	; 0x1d8
 8004482:	4642      	mov	r2, r8
 8004484:	464b      	mov	r3, r9
 8004486:	1891      	adds	r1, r2, r2
 8004488:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800448c:	415b      	adcs	r3, r3
 800448e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004492:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8004496:	4641      	mov	r1, r8
 8004498:	1851      	adds	r1, r2, r1
 800449a:	f8c7 10b0 	str.w	r1, [r7, #176]	; 0xb0
 800449e:	4649      	mov	r1, r9
 80044a0:	414b      	adcs	r3, r1
 80044a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 ab2c 	ldrd	sl, fp, [r7, #176]	; 0xb0
 80044b2:	4659      	mov	r1, fp
 80044b4:	00cb      	lsls	r3, r1, #3
 80044b6:	4651      	mov	r1, sl
 80044b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044bc:	4651      	mov	r1, sl
 80044be:	00ca      	lsls	r2, r1, #3
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	4603      	mov	r3, r0
 80044c6:	4642      	mov	r2, r8
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80044ce:	464b      	mov	r3, r9
 80044d0:	460a      	mov	r2, r1
 80044d2:	eb42 0303 	adc.w	r3, r2, r3
 80044d6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80044da:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80044de:	685b      	ldr	r3, [r3, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80044e6:	f8c7 21cc 	str.w	r2, [r7, #460]	; 0x1cc
 80044ea:	e9d7 1272 	ldrd	r1, r2, [r7, #456]	; 0x1c8
 80044ee:	460b      	mov	r3, r1
 80044f0:	18db      	adds	r3, r3, r3
 80044f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80044f6:	4613      	mov	r3, r2
 80044f8:	eb42 0303 	adc.w	r3, r2, r3
 80044fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004500:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 8004504:	e9d7 0174 	ldrd	r0, r1, [r7, #464]	; 0x1d0
 8004508:	f7fc fcb4 	bl	8000e74 <__aeabi_uldivmod>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4611      	mov	r1, r2
 8004512:	4b3e      	ldr	r3, [pc, #248]	; (800460c <UART_SetConfig+0x300>)
 8004514:	fba3 2301 	umull	r2, r3, r3, r1
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	2264      	movs	r2, #100	; 0x64
 800451c:	fb02 f303 	mul.w	r3, r2, r3
 8004520:	1acb      	subs	r3, r1, r3
 8004522:	00db      	lsls	r3, r3, #3
 8004524:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004528:	4b38      	ldr	r3, [pc, #224]	; (800460c <UART_SetConfig+0x300>)
 800452a:	fba3 2302 	umull	r2, r3, r3, r2
 800452e:	095b      	lsrs	r3, r3, #5
 8004530:	005b      	lsls	r3, r3, #1
 8004532:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004536:	441c      	add	r4, r3
 8004538:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800453c:	2200      	movs	r2, #0
 800453e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8004542:	f8c7 21c4 	str.w	r2, [r7, #452]	; 0x1c4
 8004546:	e9d7 8970 	ldrd	r8, r9, [r7, #448]	; 0x1c0
 800454a:	4642      	mov	r2, r8
 800454c:	464b      	mov	r3, r9
 800454e:	1891      	adds	r1, r2, r2
 8004550:	f8c7 10a0 	str.w	r1, [r7, #160]	; 0xa0
 8004554:	415b      	adcs	r3, r3
 8004556:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800455a:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 800455e:	4641      	mov	r1, r8
 8004560:	1851      	adds	r1, r2, r1
 8004562:	f8c7 1098 	str.w	r1, [r7, #152]	; 0x98
 8004566:	4649      	mov	r1, r9
 8004568:	414b      	adcs	r3, r1
 800456a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800456e:	f04f 0200 	mov.w	r2, #0
 8004572:	f04f 0300 	mov.w	r3, #0
 8004576:	e9d7 ab26 	ldrd	sl, fp, [r7, #152]	; 0x98
 800457a:	4659      	mov	r1, fp
 800457c:	00cb      	lsls	r3, r1, #3
 800457e:	4651      	mov	r1, sl
 8004580:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004584:	4651      	mov	r1, sl
 8004586:	00ca      	lsls	r2, r1, #3
 8004588:	4610      	mov	r0, r2
 800458a:	4619      	mov	r1, r3
 800458c:	4603      	mov	r3, r0
 800458e:	4642      	mov	r2, r8
 8004590:	189b      	adds	r3, r3, r2
 8004592:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8004596:	464b      	mov	r3, r9
 8004598:	460a      	mov	r2, r1
 800459a:	eb42 0303 	adc.w	r3, r2, r3
 800459e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80045a2:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 80045ae:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
 80045b2:	e9d7 126c 	ldrd	r1, r2, [r7, #432]	; 0x1b0
 80045b6:	460b      	mov	r3, r1
 80045b8:	18db      	adds	r3, r3, r3
 80045ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045be:	4613      	mov	r3, r2
 80045c0:	eb42 0303 	adc.w	r3, r2, r3
 80045c4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80045c8:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80045cc:	e9d7 016e 	ldrd	r0, r1, [r7, #440]	; 0x1b8
 80045d0:	f7fc fc50 	bl	8000e74 <__aeabi_uldivmod>
 80045d4:	4602      	mov	r2, r0
 80045d6:	460b      	mov	r3, r1
 80045d8:	4b0c      	ldr	r3, [pc, #48]	; (800460c <UART_SetConfig+0x300>)
 80045da:	fba3 1302 	umull	r1, r3, r3, r2
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2164      	movs	r1, #100	; 0x64
 80045e2:	fb01 f303 	mul.w	r3, r1, r3
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	3332      	adds	r3, #50	; 0x32
 80045ec:	4a07      	ldr	r2, [pc, #28]	; (800460c <UART_SetConfig+0x300>)
 80045ee:	fba2 2303 	umull	r2, r3, r2, r3
 80045f2:	095b      	lsrs	r3, r3, #5
 80045f4:	f003 0207 	and.w	r2, r3, #7
 80045f8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4422      	add	r2, r4
 8004600:	609a      	str	r2, [r3, #8]
 8004602:	e349      	b.n	8004c98 <UART_SetConfig+0x98c>
 8004604:	40011000 	.word	0x40011000
 8004608:	40011400 	.word	0x40011400
 800460c:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004610:	f7ff fa88 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8004614:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004618:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800461c:	2200      	movs	r2, #0
 800461e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8004622:	f8c7 21ac 	str.w	r2, [r7, #428]	; 0x1ac
 8004626:	e9d7 456a 	ldrd	r4, r5, [r7, #424]	; 0x1a8
 800462a:	4622      	mov	r2, r4
 800462c:	462b      	mov	r3, r5
 800462e:	1891      	adds	r1, r2, r2
 8004630:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8004634:	415b      	adcs	r3, r3
 8004636:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800463a:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800463e:	4621      	mov	r1, r4
 8004640:	eb12 0a01 	adds.w	sl, r2, r1
 8004644:	4629      	mov	r1, r5
 8004646:	eb43 0b01 	adc.w	fp, r3, r1
 800464a:	f04f 0200 	mov.w	r2, #0
 800464e:	f04f 0300 	mov.w	r3, #0
 8004652:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004656:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800465a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800465e:	4692      	mov	sl, r2
 8004660:	469b      	mov	fp, r3
 8004662:	4623      	mov	r3, r4
 8004664:	eb1a 0303 	adds.w	r3, sl, r3
 8004668:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800466c:	462b      	mov	r3, r5
 800466e:	eb4b 0303 	adc.w	r3, fp, r3
 8004672:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8004676:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8004682:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8004686:	e9d7 1266 	ldrd	r1, r2, [r7, #408]	; 0x198
 800468a:	460b      	mov	r3, r1
 800468c:	18db      	adds	r3, r3, r3
 800468e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004692:	4613      	mov	r3, r2
 8004694:	eb42 0303 	adc.w	r3, r2, r3
 8004698:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800469c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80046a0:	e9d7 0168 	ldrd	r0, r1, [r7, #416]	; 0x1a0
 80046a4:	f7fc fbe6 	bl	8000e74 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b61      	ldr	r3, [pc, #388]	; (8004834 <UART_SetConfig+0x528>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 80046c0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
 80046c4:	e9d7 8964 	ldrd	r8, r9, [r7, #400]	; 0x190
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	67b9      	str	r1, [r7, #120]	; 0x78
 80046d0:	415b      	adcs	r3, r3
 80046d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80046d4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80046d8:	4641      	mov	r1, r8
 80046da:	1851      	adds	r1, r2, r1
 80046dc:	6739      	str	r1, [r7, #112]	; 0x70
 80046de:	4649      	mov	r1, r9
 80046e0:	414b      	adcs	r3, r1
 80046e2:	677b      	str	r3, [r7, #116]	; 0x74
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 ab1c 	ldrd	sl, fp, [r7, #112]	; 0x70
 80046f0:	4659      	mov	r1, fp
 80046f2:	00cb      	lsls	r3, r1, #3
 80046f4:	4651      	mov	r1, sl
 80046f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fa:	4651      	mov	r1, sl
 80046fc:	00ca      	lsls	r2, r1, #3
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	4603      	mov	r3, r0
 8004704:	4642      	mov	r2, r8
 8004706:	189b      	adds	r3, r3, r2
 8004708:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800470c:	464b      	mov	r3, r9
 800470e:	460a      	mov	r2, r1
 8004710:	eb42 0303 	adc.w	r3, r2, r3
 8004714:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8004718:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8004724:	f8c7 2184 	str.w	r2, [r7, #388]	; 0x184
 8004728:	e9d7 1260 	ldrd	r1, r2, [r7, #384]	; 0x180
 800472c:	460b      	mov	r3, r1
 800472e:	18db      	adds	r3, r3, r3
 8004730:	66bb      	str	r3, [r7, #104]	; 0x68
 8004732:	4613      	mov	r3, r2
 8004734:	eb42 0303 	adc.w	r3, r2, r3
 8004738:	66fb      	str	r3, [r7, #108]	; 0x6c
 800473a:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 800473e:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8004742:	f7fc fb97 	bl	8000e74 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4611      	mov	r1, r2
 800474c:	4b39      	ldr	r3, [pc, #228]	; (8004834 <UART_SetConfig+0x528>)
 800474e:	fba3 2301 	umull	r2, r3, r3, r1
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2264      	movs	r2, #100	; 0x64
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	1acb      	subs	r3, r1, r3
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004762:	4b34      	ldr	r3, [pc, #208]	; (8004834 <UART_SetConfig+0x528>)
 8004764:	fba3 2302 	umull	r2, r3, r3, r2
 8004768:	095b      	lsrs	r3, r3, #5
 800476a:	005b      	lsls	r3, r3, #1
 800476c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004770:	441c      	add	r4, r3
 8004772:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004776:	2200      	movs	r2, #0
 8004778:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 800477c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8004780:	e9d7 895e 	ldrd	r8, r9, [r7, #376]	; 0x178
 8004784:	4642      	mov	r2, r8
 8004786:	464b      	mov	r3, r9
 8004788:	1891      	adds	r1, r2, r2
 800478a:	6639      	str	r1, [r7, #96]	; 0x60
 800478c:	415b      	adcs	r3, r3
 800478e:	667b      	str	r3, [r7, #100]	; 0x64
 8004790:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004794:	4641      	mov	r1, r8
 8004796:	1851      	adds	r1, r2, r1
 8004798:	65b9      	str	r1, [r7, #88]	; 0x58
 800479a:	4649      	mov	r1, r9
 800479c:	414b      	adcs	r3, r1
 800479e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	; 0x58
 80047ac:	4659      	mov	r1, fp
 80047ae:	00cb      	lsls	r3, r1, #3
 80047b0:	4651      	mov	r1, sl
 80047b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047b6:	4651      	mov	r1, sl
 80047b8:	00ca      	lsls	r2, r1, #3
 80047ba:	4610      	mov	r0, r2
 80047bc:	4619      	mov	r1, r3
 80047be:	4603      	mov	r3, r0
 80047c0:	4642      	mov	r2, r8
 80047c2:	189b      	adds	r3, r3, r2
 80047c4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80047c8:	464b      	mov	r3, r9
 80047ca:	460a      	mov	r2, r1
 80047cc:	eb42 0303 	adc.w	r3, r2, r3
 80047d0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 80047d4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	2200      	movs	r2, #0
 80047dc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 80047e0:	f8c7 216c 	str.w	r2, [r7, #364]	; 0x16c
 80047e4:	e9d7 125a 	ldrd	r1, r2, [r7, #360]	; 0x168
 80047e8:	460b      	mov	r3, r1
 80047ea:	18db      	adds	r3, r3, r3
 80047ec:	653b      	str	r3, [r7, #80]	; 0x50
 80047ee:	4613      	mov	r3, r2
 80047f0:	eb42 0303 	adc.w	r3, r2, r3
 80047f4:	657b      	str	r3, [r7, #84]	; 0x54
 80047f6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047fa:	e9d7 015c 	ldrd	r0, r1, [r7, #368]	; 0x170
 80047fe:	f7fc fb39 	bl	8000e74 <__aeabi_uldivmod>
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	4b0b      	ldr	r3, [pc, #44]	; (8004834 <UART_SetConfig+0x528>)
 8004808:	fba3 1302 	umull	r1, r3, r3, r2
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	2164      	movs	r1, #100	; 0x64
 8004810:	fb01 f303 	mul.w	r3, r1, r3
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	00db      	lsls	r3, r3, #3
 8004818:	3332      	adds	r3, #50	; 0x32
 800481a:	4a06      	ldr	r2, [pc, #24]	; (8004834 <UART_SetConfig+0x528>)
 800481c:	fba2 2303 	umull	r2, r3, r2, r3
 8004820:	095b      	lsrs	r3, r3, #5
 8004822:	f003 0207 	and.w	r2, r3, #7
 8004826:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4422      	add	r2, r4
 800482e:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004830:	e232      	b.n	8004c98 <UART_SetConfig+0x98c>
 8004832:	bf00      	nop
 8004834:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004838:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	4b8d      	ldr	r3, [pc, #564]	; (8004a74 <UART_SetConfig+0x768>)
 8004840:	429a      	cmp	r2, r3
 8004842:	d006      	beq.n	8004852 <UART_SetConfig+0x546>
 8004844:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004848:	681a      	ldr	r2, [r3, #0]
 800484a:	4b8b      	ldr	r3, [pc, #556]	; (8004a78 <UART_SetConfig+0x76c>)
 800484c:	429a      	cmp	r2, r3
 800484e:	f040 8117 	bne.w	8004a80 <UART_SetConfig+0x774>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004852:	f7ff f97b 	bl	8003b4c <HAL_RCC_GetPCLK2Freq>
 8004856:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800485a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 8004864:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 8004868:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 800486c:	4622      	mov	r2, r4
 800486e:	462b      	mov	r3, r5
 8004870:	1891      	adds	r1, r2, r2
 8004872:	64b9      	str	r1, [r7, #72]	; 0x48
 8004874:	415b      	adcs	r3, r3
 8004876:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004878:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800487c:	4621      	mov	r1, r4
 800487e:	eb12 0801 	adds.w	r8, r2, r1
 8004882:	4629      	mov	r1, r5
 8004884:	eb43 0901 	adc.w	r9, r3, r1
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004894:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004898:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800489c:	4690      	mov	r8, r2
 800489e:	4699      	mov	r9, r3
 80048a0:	4623      	mov	r3, r4
 80048a2:	eb18 0303 	adds.w	r3, r8, r3
 80048a6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80048aa:	462b      	mov	r3, r5
 80048ac:	eb49 0303 	adc.w	r3, r9, r3
 80048b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 80048b4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80048c0:	f8c7 2154 	str.w	r2, [r7, #340]	; 0x154
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	e9d7 4554 	ldrd	r4, r5, [r7, #336]	; 0x150
 80048d0:	4629      	mov	r1, r5
 80048d2:	008b      	lsls	r3, r1, #2
 80048d4:	4621      	mov	r1, r4
 80048d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048da:	4621      	mov	r1, r4
 80048dc:	008a      	lsls	r2, r1, #2
 80048de:	e9d7 0156 	ldrd	r0, r1, [r7, #344]	; 0x158
 80048e2:	f7fc fac7 	bl	8000e74 <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4b64      	ldr	r3, [pc, #400]	; (8004a7c <UART_SetConfig+0x770>)
 80048ec:	fba3 2302 	umull	r2, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	011c      	lsls	r4, r3, #4
 80048f4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80048f8:	2200      	movs	r2, #0
 80048fa:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 80048fe:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8004902:	e9d7 8952 	ldrd	r8, r9, [r7, #328]	; 0x148
 8004906:	4642      	mov	r2, r8
 8004908:	464b      	mov	r3, r9
 800490a:	1891      	adds	r1, r2, r2
 800490c:	6439      	str	r1, [r7, #64]	; 0x40
 800490e:	415b      	adcs	r3, r3
 8004910:	647b      	str	r3, [r7, #68]	; 0x44
 8004912:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004916:	4641      	mov	r1, r8
 8004918:	1851      	adds	r1, r2, r1
 800491a:	63b9      	str	r1, [r7, #56]	; 0x38
 800491c:	4649      	mov	r1, r9
 800491e:	414b      	adcs	r3, r1
 8004920:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004922:	f04f 0200 	mov.w	r2, #0
 8004926:	f04f 0300 	mov.w	r3, #0
 800492a:	e9d7 ab0e 	ldrd	sl, fp, [r7, #56]	; 0x38
 800492e:	4659      	mov	r1, fp
 8004930:	00cb      	lsls	r3, r1, #3
 8004932:	4651      	mov	r1, sl
 8004934:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004938:	4651      	mov	r1, sl
 800493a:	00ca      	lsls	r2, r1, #3
 800493c:	4610      	mov	r0, r2
 800493e:	4619      	mov	r1, r3
 8004940:	4603      	mov	r3, r0
 8004942:	4642      	mov	r2, r8
 8004944:	189b      	adds	r3, r3, r2
 8004946:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800494a:	464b      	mov	r3, r9
 800494c:	460a      	mov	r2, r1
 800494e:	eb42 0303 	adc.w	r3, r2, r3
 8004952:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8004956:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8004962:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	e9d7 894e 	ldrd	r8, r9, [r7, #312]	; 0x138
 8004972:	4649      	mov	r1, r9
 8004974:	008b      	lsls	r3, r1, #2
 8004976:	4641      	mov	r1, r8
 8004978:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800497c:	4641      	mov	r1, r8
 800497e:	008a      	lsls	r2, r1, #2
 8004980:	e9d7 0150 	ldrd	r0, r1, [r7, #320]	; 0x140
 8004984:	f7fc fa76 	bl	8000e74 <__aeabi_uldivmod>
 8004988:	4602      	mov	r2, r0
 800498a:	460b      	mov	r3, r1
 800498c:	4b3b      	ldr	r3, [pc, #236]	; (8004a7c <UART_SetConfig+0x770>)
 800498e:	fba3 1302 	umull	r1, r3, r3, r2
 8004992:	095b      	lsrs	r3, r3, #5
 8004994:	2164      	movs	r1, #100	; 0x64
 8004996:	fb01 f303 	mul.w	r3, r1, r3
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	3332      	adds	r3, #50	; 0x32
 80049a0:	4a36      	ldr	r2, [pc, #216]	; (8004a7c <UART_SetConfig+0x770>)
 80049a2:	fba2 2303 	umull	r2, r3, r2, r3
 80049a6:	095b      	lsrs	r3, r3, #5
 80049a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049ac:	441c      	add	r4, r3
 80049ae:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 80049b8:	f8c7 2134 	str.w	r2, [r7, #308]	; 0x134
 80049bc:	e9d7 894c 	ldrd	r8, r9, [r7, #304]	; 0x130
 80049c0:	4642      	mov	r2, r8
 80049c2:	464b      	mov	r3, r9
 80049c4:	1891      	adds	r1, r2, r2
 80049c6:	6339      	str	r1, [r7, #48]	; 0x30
 80049c8:	415b      	adcs	r3, r3
 80049ca:	637b      	str	r3, [r7, #52]	; 0x34
 80049cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80049d0:	4641      	mov	r1, r8
 80049d2:	1851      	adds	r1, r2, r1
 80049d4:	62b9      	str	r1, [r7, #40]	; 0x28
 80049d6:	4649      	mov	r1, r9
 80049d8:	414b      	adcs	r3, r1
 80049da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80049dc:	f04f 0200 	mov.w	r2, #0
 80049e0:	f04f 0300 	mov.w	r3, #0
 80049e4:	e9d7 ab0a 	ldrd	sl, fp, [r7, #40]	; 0x28
 80049e8:	4659      	mov	r1, fp
 80049ea:	00cb      	lsls	r3, r1, #3
 80049ec:	4651      	mov	r1, sl
 80049ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049f2:	4651      	mov	r1, sl
 80049f4:	00ca      	lsls	r2, r1, #3
 80049f6:	4610      	mov	r0, r2
 80049f8:	4619      	mov	r1, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	4642      	mov	r2, r8
 80049fe:	189b      	adds	r3, r3, r2
 8004a00:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004a04:	464b      	mov	r3, r9
 8004a06:	460a      	mov	r2, r1
 8004a08:	eb42 0303 	adc.w	r3, r2, r3
 8004a0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004a10:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	2200      	movs	r2, #0
 8004a18:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a1c:	f8c7 2124 	str.w	r2, [r7, #292]	; 0x124
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	e9d7 8948 	ldrd	r8, r9, [r7, #288]	; 0x120
 8004a2c:	4649      	mov	r1, r9
 8004a2e:	008b      	lsls	r3, r1, #2
 8004a30:	4641      	mov	r1, r8
 8004a32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a36:	4641      	mov	r1, r8
 8004a38:	008a      	lsls	r2, r1, #2
 8004a3a:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8004a3e:	f7fc fa19 	bl	8000e74 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4b0d      	ldr	r3, [pc, #52]	; (8004a7c <UART_SetConfig+0x770>)
 8004a48:	fba3 1302 	umull	r1, r3, r3, r2
 8004a4c:	095b      	lsrs	r3, r3, #5
 8004a4e:	2164      	movs	r1, #100	; 0x64
 8004a50:	fb01 f303 	mul.w	r3, r1, r3
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	011b      	lsls	r3, r3, #4
 8004a58:	3332      	adds	r3, #50	; 0x32
 8004a5a:	4a08      	ldr	r2, [pc, #32]	; (8004a7c <UART_SetConfig+0x770>)
 8004a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004a60:	095b      	lsrs	r3, r3, #5
 8004a62:	f003 020f 	and.w	r2, r3, #15
 8004a66:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4422      	add	r2, r4
 8004a6e:	609a      	str	r2, [r3, #8]
 8004a70:	e112      	b.n	8004c98 <UART_SetConfig+0x98c>
 8004a72:	bf00      	nop
 8004a74:	40011000 	.word	0x40011000
 8004a78:	40011400 	.word	0x40011400
 8004a7c:	51eb851f 	.word	0x51eb851f
      pclk = HAL_RCC_GetPCLK1Freq();
 8004a80:	f7ff f850 	bl	8003b24 <HAL_RCC_GetPCLK1Freq>
 8004a84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a88:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004a92:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8004a96:	e9d7 8946 	ldrd	r8, r9, [r7, #280]	; 0x118
 8004a9a:	4642      	mov	r2, r8
 8004a9c:	464b      	mov	r3, r9
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	6239      	str	r1, [r7, #32]
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aaa:	4641      	mov	r1, r8
 8004aac:	1854      	adds	r4, r2, r1
 8004aae:	4649      	mov	r1, r9
 8004ab0:	eb43 0501 	adc.w	r5, r3, r1
 8004ab4:	f04f 0200 	mov.w	r2, #0
 8004ab8:	f04f 0300 	mov.w	r3, #0
 8004abc:	00eb      	lsls	r3, r5, #3
 8004abe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ac2:	00e2      	lsls	r2, r4, #3
 8004ac4:	4614      	mov	r4, r2
 8004ac6:	461d      	mov	r5, r3
 8004ac8:	4643      	mov	r3, r8
 8004aca:	18e3      	adds	r3, r4, r3
 8004acc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	eb45 0303 	adc.w	r3, r5, r3
 8004ad6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004ada:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8004ae6:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8004aea:	f04f 0200 	mov.w	r2, #0
 8004aee:	f04f 0300 	mov.w	r3, #0
 8004af2:	e9d7 4542 	ldrd	r4, r5, [r7, #264]	; 0x108
 8004af6:	4629      	mov	r1, r5
 8004af8:	008b      	lsls	r3, r1, #2
 8004afa:	4621      	mov	r1, r4
 8004afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b00:	4621      	mov	r1, r4
 8004b02:	008a      	lsls	r2, r1, #2
 8004b04:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8004b08:	f7fc f9b4 	bl	8000e74 <__aeabi_uldivmod>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	460b      	mov	r3, r1
 8004b10:	4b64      	ldr	r3, [pc, #400]	; (8004ca4 <UART_SetConfig+0x998>)
 8004b12:	fba3 2302 	umull	r2, r3, r3, r2
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	011c      	lsls	r4, r3, #4
 8004b1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8004b24:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8004b28:	e9d7 8940 	ldrd	r8, r9, [r7, #256]	; 0x100
 8004b2c:	4642      	mov	r2, r8
 8004b2e:	464b      	mov	r3, r9
 8004b30:	1891      	adds	r1, r2, r2
 8004b32:	61b9      	str	r1, [r7, #24]
 8004b34:	415b      	adcs	r3, r3
 8004b36:	61fb      	str	r3, [r7, #28]
 8004b38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b3c:	4641      	mov	r1, r8
 8004b3e:	1851      	adds	r1, r2, r1
 8004b40:	6139      	str	r1, [r7, #16]
 8004b42:	4649      	mov	r1, r9
 8004b44:	414b      	adcs	r3, r1
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	f04f 0200 	mov.w	r2, #0
 8004b4c:	f04f 0300 	mov.w	r3, #0
 8004b50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b54:	4659      	mov	r1, fp
 8004b56:	00cb      	lsls	r3, r1, #3
 8004b58:	4651      	mov	r1, sl
 8004b5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b5e:	4651      	mov	r1, sl
 8004b60:	00ca      	lsls	r2, r1, #3
 8004b62:	4610      	mov	r0, r2
 8004b64:	4619      	mov	r1, r3
 8004b66:	4603      	mov	r3, r0
 8004b68:	4642      	mov	r2, r8
 8004b6a:	189b      	adds	r3, r3, r2
 8004b6c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004b70:	464b      	mov	r3, r9
 8004b72:	460a      	mov	r2, r1
 8004b74:	eb42 0303 	adc.w	r3, r2, r3
 8004b78:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8004b7c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004b88:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	; 0xf0
 8004b98:	4649      	mov	r1, r9
 8004b9a:	008b      	lsls	r3, r1, #2
 8004b9c:	4641      	mov	r1, r8
 8004b9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ba2:	4641      	mov	r1, r8
 8004ba4:	008a      	lsls	r2, r1, #2
 8004ba6:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8004baa:	f7fc f963 	bl	8000e74 <__aeabi_uldivmod>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	4b3c      	ldr	r3, [pc, #240]	; (8004ca4 <UART_SetConfig+0x998>)
 8004bb4:	fba3 1302 	umull	r1, r3, r3, r2
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	2164      	movs	r1, #100	; 0x64
 8004bbc:	fb01 f303 	mul.w	r3, r1, r3
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	011b      	lsls	r3, r3, #4
 8004bc4:	3332      	adds	r3, #50	; 0x32
 8004bc6:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <UART_SetConfig+0x998>)
 8004bc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bcc:	095b      	lsrs	r3, r3, #5
 8004bce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd2:	441c      	add	r4, r3
 8004bd4:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bde:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004be2:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8004be6:	4642      	mov	r2, r8
 8004be8:	464b      	mov	r3, r9
 8004bea:	1891      	adds	r1, r2, r2
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	415b      	adcs	r3, r3
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bf6:	4641      	mov	r1, r8
 8004bf8:	1851      	adds	r1, r2, r1
 8004bfa:	6039      	str	r1, [r7, #0]
 8004bfc:	4649      	mov	r1, r9
 8004bfe:	414b      	adcs	r3, r1
 8004c00:	607b      	str	r3, [r7, #4]
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c0e:	4659      	mov	r1, fp
 8004c10:	00cb      	lsls	r3, r1, #3
 8004c12:	4651      	mov	r1, sl
 8004c14:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c18:	4651      	mov	r1, sl
 8004c1a:	00ca      	lsls	r2, r1, #3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	4619      	mov	r1, r3
 8004c20:	4603      	mov	r3, r0
 8004c22:	4642      	mov	r2, r8
 8004c24:	189b      	adds	r3, r3, r2
 8004c26:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c2a:	464b      	mov	r3, r9
 8004c2c:	460a      	mov	r2, r1
 8004c2e:	eb42 0303 	adc.w	r3, r2, r3
 8004c32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c36:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c46:	f04f 0200 	mov.w	r2, #0
 8004c4a:	f04f 0300 	mov.w	r3, #0
 8004c4e:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 8004c52:	4649      	mov	r1, r9
 8004c54:	008b      	lsls	r3, r1, #2
 8004c56:	4641      	mov	r1, r8
 8004c58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c5c:	4641      	mov	r1, r8
 8004c5e:	008a      	lsls	r2, r1, #2
 8004c60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c64:	f7fc f906 	bl	8000e74 <__aeabi_uldivmod>
 8004c68:	4602      	mov	r2, r0
 8004c6a:	460b      	mov	r3, r1
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <UART_SetConfig+0x998>)
 8004c6e:	fba3 1302 	umull	r1, r3, r3, r2
 8004c72:	095b      	lsrs	r3, r3, #5
 8004c74:	2164      	movs	r1, #100	; 0x64
 8004c76:	fb01 f303 	mul.w	r3, r1, r3
 8004c7a:	1ad3      	subs	r3, r2, r3
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	3332      	adds	r3, #50	; 0x32
 8004c80:	4a08      	ldr	r2, [pc, #32]	; (8004ca4 <UART_SetConfig+0x998>)
 8004c82:	fba2 2303 	umull	r2, r3, r2, r3
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	f003 020f 	and.w	r2, r3, #15
 8004c8c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4422      	add	r2, r4
 8004c94:	609a      	str	r2, [r3, #8]
}
 8004c96:	e7ff      	b.n	8004c98 <UART_SetConfig+0x98c>
 8004c98:	bf00      	nop
 8004c9a:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ca4:	51eb851f 	.word	0x51eb851f

08004ca8 <__errno>:
 8004ca8:	4b01      	ldr	r3, [pc, #4]	; (8004cb0 <__errno+0x8>)
 8004caa:	6818      	ldr	r0, [r3, #0]
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	2000000c 	.word	0x2000000c

08004cb4 <__libc_init_array>:
 8004cb4:	b570      	push	{r4, r5, r6, lr}
 8004cb6:	4d0d      	ldr	r5, [pc, #52]	; (8004cec <__libc_init_array+0x38>)
 8004cb8:	4c0d      	ldr	r4, [pc, #52]	; (8004cf0 <__libc_init_array+0x3c>)
 8004cba:	1b64      	subs	r4, r4, r5
 8004cbc:	10a4      	asrs	r4, r4, #2
 8004cbe:	2600      	movs	r6, #0
 8004cc0:	42a6      	cmp	r6, r4
 8004cc2:	d109      	bne.n	8004cd8 <__libc_init_array+0x24>
 8004cc4:	4d0b      	ldr	r5, [pc, #44]	; (8004cf4 <__libc_init_array+0x40>)
 8004cc6:	4c0c      	ldr	r4, [pc, #48]	; (8004cf8 <__libc_init_array+0x44>)
 8004cc8:	f002 ff02 	bl	8007ad0 <_init>
 8004ccc:	1b64      	subs	r4, r4, r5
 8004cce:	10a4      	asrs	r4, r4, #2
 8004cd0:	2600      	movs	r6, #0
 8004cd2:	42a6      	cmp	r6, r4
 8004cd4:	d105      	bne.n	8004ce2 <__libc_init_array+0x2e>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cdc:	4798      	blx	r3
 8004cde:	3601      	adds	r6, #1
 8004ce0:	e7ee      	b.n	8004cc0 <__libc_init_array+0xc>
 8004ce2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ce6:	4798      	blx	r3
 8004ce8:	3601      	adds	r6, #1
 8004cea:	e7f2      	b.n	8004cd2 <__libc_init_array+0x1e>
 8004cec:	08007f2c 	.word	0x08007f2c
 8004cf0:	08007f2c 	.word	0x08007f2c
 8004cf4:	08007f2c 	.word	0x08007f2c
 8004cf8:	08007f30 	.word	0x08007f30

08004cfc <memset>:
 8004cfc:	4402      	add	r2, r0
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d100      	bne.n	8004d06 <memset+0xa>
 8004d04:	4770      	bx	lr
 8004d06:	f803 1b01 	strb.w	r1, [r3], #1
 8004d0a:	e7f9      	b.n	8004d00 <memset+0x4>

08004d0c <__cvt>:
 8004d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d10:	ec55 4b10 	vmov	r4, r5, d0
 8004d14:	2d00      	cmp	r5, #0
 8004d16:	460e      	mov	r6, r1
 8004d18:	4619      	mov	r1, r3
 8004d1a:	462b      	mov	r3, r5
 8004d1c:	bfbb      	ittet	lt
 8004d1e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d22:	461d      	movlt	r5, r3
 8004d24:	2300      	movge	r3, #0
 8004d26:	232d      	movlt	r3, #45	; 0x2d
 8004d28:	700b      	strb	r3, [r1, #0]
 8004d2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d2c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d30:	4691      	mov	r9, r2
 8004d32:	f023 0820 	bic.w	r8, r3, #32
 8004d36:	bfbc      	itt	lt
 8004d38:	4622      	movlt	r2, r4
 8004d3a:	4614      	movlt	r4, r2
 8004d3c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d40:	d005      	beq.n	8004d4e <__cvt+0x42>
 8004d42:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d46:	d100      	bne.n	8004d4a <__cvt+0x3e>
 8004d48:	3601      	adds	r6, #1
 8004d4a:	2102      	movs	r1, #2
 8004d4c:	e000      	b.n	8004d50 <__cvt+0x44>
 8004d4e:	2103      	movs	r1, #3
 8004d50:	ab03      	add	r3, sp, #12
 8004d52:	9301      	str	r3, [sp, #4]
 8004d54:	ab02      	add	r3, sp, #8
 8004d56:	9300      	str	r3, [sp, #0]
 8004d58:	ec45 4b10 	vmov	d0, r4, r5
 8004d5c:	4653      	mov	r3, sl
 8004d5e:	4632      	mov	r2, r6
 8004d60:	f000 fcea 	bl	8005738 <_dtoa_r>
 8004d64:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d68:	4607      	mov	r7, r0
 8004d6a:	d102      	bne.n	8004d72 <__cvt+0x66>
 8004d6c:	f019 0f01 	tst.w	r9, #1
 8004d70:	d022      	beq.n	8004db8 <__cvt+0xac>
 8004d72:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d76:	eb07 0906 	add.w	r9, r7, r6
 8004d7a:	d110      	bne.n	8004d9e <__cvt+0x92>
 8004d7c:	783b      	ldrb	r3, [r7, #0]
 8004d7e:	2b30      	cmp	r3, #48	; 0x30
 8004d80:	d10a      	bne.n	8004d98 <__cvt+0x8c>
 8004d82:	2200      	movs	r2, #0
 8004d84:	2300      	movs	r3, #0
 8004d86:	4620      	mov	r0, r4
 8004d88:	4629      	mov	r1, r5
 8004d8a:	f7fb fea5 	bl	8000ad8 <__aeabi_dcmpeq>
 8004d8e:	b918      	cbnz	r0, 8004d98 <__cvt+0x8c>
 8004d90:	f1c6 0601 	rsb	r6, r6, #1
 8004d94:	f8ca 6000 	str.w	r6, [sl]
 8004d98:	f8da 3000 	ldr.w	r3, [sl]
 8004d9c:	4499      	add	r9, r3
 8004d9e:	2200      	movs	r2, #0
 8004da0:	2300      	movs	r3, #0
 8004da2:	4620      	mov	r0, r4
 8004da4:	4629      	mov	r1, r5
 8004da6:	f7fb fe97 	bl	8000ad8 <__aeabi_dcmpeq>
 8004daa:	b108      	cbz	r0, 8004db0 <__cvt+0xa4>
 8004dac:	f8cd 900c 	str.w	r9, [sp, #12]
 8004db0:	2230      	movs	r2, #48	; 0x30
 8004db2:	9b03      	ldr	r3, [sp, #12]
 8004db4:	454b      	cmp	r3, r9
 8004db6:	d307      	bcc.n	8004dc8 <__cvt+0xbc>
 8004db8:	9b03      	ldr	r3, [sp, #12]
 8004dba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004dbc:	1bdb      	subs	r3, r3, r7
 8004dbe:	4638      	mov	r0, r7
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	b004      	add	sp, #16
 8004dc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc8:	1c59      	adds	r1, r3, #1
 8004dca:	9103      	str	r1, [sp, #12]
 8004dcc:	701a      	strb	r2, [r3, #0]
 8004dce:	e7f0      	b.n	8004db2 <__cvt+0xa6>

08004dd0 <__exponent>:
 8004dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	bfb8      	it	lt
 8004dd8:	4249      	neglt	r1, r1
 8004dda:	f803 2b02 	strb.w	r2, [r3], #2
 8004dde:	bfb4      	ite	lt
 8004de0:	222d      	movlt	r2, #45	; 0x2d
 8004de2:	222b      	movge	r2, #43	; 0x2b
 8004de4:	2909      	cmp	r1, #9
 8004de6:	7042      	strb	r2, [r0, #1]
 8004de8:	dd2a      	ble.n	8004e40 <__exponent+0x70>
 8004dea:	f10d 0407 	add.w	r4, sp, #7
 8004dee:	46a4      	mov	ip, r4
 8004df0:	270a      	movs	r7, #10
 8004df2:	46a6      	mov	lr, r4
 8004df4:	460a      	mov	r2, r1
 8004df6:	fb91 f6f7 	sdiv	r6, r1, r7
 8004dfa:	fb07 1516 	mls	r5, r7, r6, r1
 8004dfe:	3530      	adds	r5, #48	; 0x30
 8004e00:	2a63      	cmp	r2, #99	; 0x63
 8004e02:	f104 34ff 	add.w	r4, r4, #4294967295
 8004e06:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004e0a:	4631      	mov	r1, r6
 8004e0c:	dcf1      	bgt.n	8004df2 <__exponent+0x22>
 8004e0e:	3130      	adds	r1, #48	; 0x30
 8004e10:	f1ae 0502 	sub.w	r5, lr, #2
 8004e14:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004e18:	1c44      	adds	r4, r0, #1
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	4561      	cmp	r1, ip
 8004e1e:	d30a      	bcc.n	8004e36 <__exponent+0x66>
 8004e20:	f10d 0209 	add.w	r2, sp, #9
 8004e24:	eba2 020e 	sub.w	r2, r2, lr
 8004e28:	4565      	cmp	r5, ip
 8004e2a:	bf88      	it	hi
 8004e2c:	2200      	movhi	r2, #0
 8004e2e:	4413      	add	r3, r2
 8004e30:	1a18      	subs	r0, r3, r0
 8004e32:	b003      	add	sp, #12
 8004e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e36:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e3a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004e3e:	e7ed      	b.n	8004e1c <__exponent+0x4c>
 8004e40:	2330      	movs	r3, #48	; 0x30
 8004e42:	3130      	adds	r1, #48	; 0x30
 8004e44:	7083      	strb	r3, [r0, #2]
 8004e46:	70c1      	strb	r1, [r0, #3]
 8004e48:	1d03      	adds	r3, r0, #4
 8004e4a:	e7f1      	b.n	8004e30 <__exponent+0x60>

08004e4c <_printf_float>:
 8004e4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e50:	ed2d 8b02 	vpush	{d8}
 8004e54:	b08d      	sub	sp, #52	; 0x34
 8004e56:	460c      	mov	r4, r1
 8004e58:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e5c:	4616      	mov	r6, r2
 8004e5e:	461f      	mov	r7, r3
 8004e60:	4605      	mov	r5, r0
 8004e62:	f001 fa57 	bl	8006314 <_localeconv_r>
 8004e66:	f8d0 a000 	ldr.w	sl, [r0]
 8004e6a:	4650      	mov	r0, sl
 8004e6c:	f7fb f9b8 	bl	80001e0 <strlen>
 8004e70:	2300      	movs	r3, #0
 8004e72:	930a      	str	r3, [sp, #40]	; 0x28
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	9305      	str	r3, [sp, #20]
 8004e78:	f8d8 3000 	ldr.w	r3, [r8]
 8004e7c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004e80:	3307      	adds	r3, #7
 8004e82:	f023 0307 	bic.w	r3, r3, #7
 8004e86:	f103 0208 	add.w	r2, r3, #8
 8004e8a:	f8c8 2000 	str.w	r2, [r8]
 8004e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e92:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004e96:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004e9a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004e9e:	9307      	str	r3, [sp, #28]
 8004ea0:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ea4:	ee08 0a10 	vmov	s16, r0
 8004ea8:	4b9f      	ldr	r3, [pc, #636]	; (8005128 <_printf_float+0x2dc>)
 8004eaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004eae:	f04f 32ff 	mov.w	r2, #4294967295
 8004eb2:	f7fb fe43 	bl	8000b3c <__aeabi_dcmpun>
 8004eb6:	bb88      	cbnz	r0, 8004f1c <_printf_float+0xd0>
 8004eb8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ebc:	4b9a      	ldr	r3, [pc, #616]	; (8005128 <_printf_float+0x2dc>)
 8004ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ec2:	f7fb fe1d 	bl	8000b00 <__aeabi_dcmple>
 8004ec6:	bb48      	cbnz	r0, 8004f1c <_printf_float+0xd0>
 8004ec8:	2200      	movs	r2, #0
 8004eca:	2300      	movs	r3, #0
 8004ecc:	4640      	mov	r0, r8
 8004ece:	4649      	mov	r1, r9
 8004ed0:	f7fb fe0c 	bl	8000aec <__aeabi_dcmplt>
 8004ed4:	b110      	cbz	r0, 8004edc <_printf_float+0x90>
 8004ed6:	232d      	movs	r3, #45	; 0x2d
 8004ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004edc:	4b93      	ldr	r3, [pc, #588]	; (800512c <_printf_float+0x2e0>)
 8004ede:	4894      	ldr	r0, [pc, #592]	; (8005130 <_printf_float+0x2e4>)
 8004ee0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ee4:	bf94      	ite	ls
 8004ee6:	4698      	movls	r8, r3
 8004ee8:	4680      	movhi	r8, r0
 8004eea:	2303      	movs	r3, #3
 8004eec:	6123      	str	r3, [r4, #16]
 8004eee:	9b05      	ldr	r3, [sp, #20]
 8004ef0:	f023 0204 	bic.w	r2, r3, #4
 8004ef4:	6022      	str	r2, [r4, #0]
 8004ef6:	f04f 0900 	mov.w	r9, #0
 8004efa:	9700      	str	r7, [sp, #0]
 8004efc:	4633      	mov	r3, r6
 8004efe:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f00:	4621      	mov	r1, r4
 8004f02:	4628      	mov	r0, r5
 8004f04:	f000 f9d8 	bl	80052b8 <_printf_common>
 8004f08:	3001      	adds	r0, #1
 8004f0a:	f040 8090 	bne.w	800502e <_printf_float+0x1e2>
 8004f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004f12:	b00d      	add	sp, #52	; 0x34
 8004f14:	ecbd 8b02 	vpop	{d8}
 8004f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	464b      	mov	r3, r9
 8004f20:	4640      	mov	r0, r8
 8004f22:	4649      	mov	r1, r9
 8004f24:	f7fb fe0a 	bl	8000b3c <__aeabi_dcmpun>
 8004f28:	b140      	cbz	r0, 8004f3c <_printf_float+0xf0>
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfbc      	itt	lt
 8004f30:	232d      	movlt	r3, #45	; 0x2d
 8004f32:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f36:	487f      	ldr	r0, [pc, #508]	; (8005134 <_printf_float+0x2e8>)
 8004f38:	4b7f      	ldr	r3, [pc, #508]	; (8005138 <_printf_float+0x2ec>)
 8004f3a:	e7d1      	b.n	8004ee0 <_printf_float+0x94>
 8004f3c:	6863      	ldr	r3, [r4, #4]
 8004f3e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f42:	9206      	str	r2, [sp, #24]
 8004f44:	1c5a      	adds	r2, r3, #1
 8004f46:	d13f      	bne.n	8004fc8 <_printf_float+0x17c>
 8004f48:	2306      	movs	r3, #6
 8004f4a:	6063      	str	r3, [r4, #4]
 8004f4c:	9b05      	ldr	r3, [sp, #20]
 8004f4e:	6861      	ldr	r1, [r4, #4]
 8004f50:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f54:	2300      	movs	r3, #0
 8004f56:	9303      	str	r3, [sp, #12]
 8004f58:	ab0a      	add	r3, sp, #40	; 0x28
 8004f5a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f5e:	ab09      	add	r3, sp, #36	; 0x24
 8004f60:	ec49 8b10 	vmov	d0, r8, r9
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	6022      	str	r2, [r4, #0]
 8004f68:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004f6c:	4628      	mov	r0, r5
 8004f6e:	f7ff fecd 	bl	8004d0c <__cvt>
 8004f72:	9b06      	ldr	r3, [sp, #24]
 8004f74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f76:	2b47      	cmp	r3, #71	; 0x47
 8004f78:	4680      	mov	r8, r0
 8004f7a:	d108      	bne.n	8004f8e <_printf_float+0x142>
 8004f7c:	1cc8      	adds	r0, r1, #3
 8004f7e:	db02      	blt.n	8004f86 <_printf_float+0x13a>
 8004f80:	6863      	ldr	r3, [r4, #4]
 8004f82:	4299      	cmp	r1, r3
 8004f84:	dd41      	ble.n	800500a <_printf_float+0x1be>
 8004f86:	f1ab 0b02 	sub.w	fp, fp, #2
 8004f8a:	fa5f fb8b 	uxtb.w	fp, fp
 8004f8e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f92:	d820      	bhi.n	8004fd6 <_printf_float+0x18a>
 8004f94:	3901      	subs	r1, #1
 8004f96:	465a      	mov	r2, fp
 8004f98:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004f9c:	9109      	str	r1, [sp, #36]	; 0x24
 8004f9e:	f7ff ff17 	bl	8004dd0 <__exponent>
 8004fa2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fa4:	1813      	adds	r3, r2, r0
 8004fa6:	2a01      	cmp	r2, #1
 8004fa8:	4681      	mov	r9, r0
 8004faa:	6123      	str	r3, [r4, #16]
 8004fac:	dc02      	bgt.n	8004fb4 <_printf_float+0x168>
 8004fae:	6822      	ldr	r2, [r4, #0]
 8004fb0:	07d2      	lsls	r2, r2, #31
 8004fb2:	d501      	bpl.n	8004fb8 <_printf_float+0x16c>
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	6123      	str	r3, [r4, #16]
 8004fb8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d09c      	beq.n	8004efa <_printf_float+0xae>
 8004fc0:	232d      	movs	r3, #45	; 0x2d
 8004fc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fc6:	e798      	b.n	8004efa <_printf_float+0xae>
 8004fc8:	9a06      	ldr	r2, [sp, #24]
 8004fca:	2a47      	cmp	r2, #71	; 0x47
 8004fcc:	d1be      	bne.n	8004f4c <_printf_float+0x100>
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1bc      	bne.n	8004f4c <_printf_float+0x100>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e7b9      	b.n	8004f4a <_printf_float+0xfe>
 8004fd6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004fda:	d118      	bne.n	800500e <_printf_float+0x1c2>
 8004fdc:	2900      	cmp	r1, #0
 8004fde:	6863      	ldr	r3, [r4, #4]
 8004fe0:	dd0b      	ble.n	8004ffa <_printf_float+0x1ae>
 8004fe2:	6121      	str	r1, [r4, #16]
 8004fe4:	b913      	cbnz	r3, 8004fec <_printf_float+0x1a0>
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	07d0      	lsls	r0, r2, #31
 8004fea:	d502      	bpl.n	8004ff2 <_printf_float+0x1a6>
 8004fec:	3301      	adds	r3, #1
 8004fee:	440b      	add	r3, r1
 8004ff0:	6123      	str	r3, [r4, #16]
 8004ff2:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ff4:	f04f 0900 	mov.w	r9, #0
 8004ff8:	e7de      	b.n	8004fb8 <_printf_float+0x16c>
 8004ffa:	b913      	cbnz	r3, 8005002 <_printf_float+0x1b6>
 8004ffc:	6822      	ldr	r2, [r4, #0]
 8004ffe:	07d2      	lsls	r2, r2, #31
 8005000:	d501      	bpl.n	8005006 <_printf_float+0x1ba>
 8005002:	3302      	adds	r3, #2
 8005004:	e7f4      	b.n	8004ff0 <_printf_float+0x1a4>
 8005006:	2301      	movs	r3, #1
 8005008:	e7f2      	b.n	8004ff0 <_printf_float+0x1a4>
 800500a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800500e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005010:	4299      	cmp	r1, r3
 8005012:	db05      	blt.n	8005020 <_printf_float+0x1d4>
 8005014:	6823      	ldr	r3, [r4, #0]
 8005016:	6121      	str	r1, [r4, #16]
 8005018:	07d8      	lsls	r0, r3, #31
 800501a:	d5ea      	bpl.n	8004ff2 <_printf_float+0x1a6>
 800501c:	1c4b      	adds	r3, r1, #1
 800501e:	e7e7      	b.n	8004ff0 <_printf_float+0x1a4>
 8005020:	2900      	cmp	r1, #0
 8005022:	bfd4      	ite	le
 8005024:	f1c1 0202 	rsble	r2, r1, #2
 8005028:	2201      	movgt	r2, #1
 800502a:	4413      	add	r3, r2
 800502c:	e7e0      	b.n	8004ff0 <_printf_float+0x1a4>
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	055a      	lsls	r2, r3, #21
 8005032:	d407      	bmi.n	8005044 <_printf_float+0x1f8>
 8005034:	6923      	ldr	r3, [r4, #16]
 8005036:	4642      	mov	r2, r8
 8005038:	4631      	mov	r1, r6
 800503a:	4628      	mov	r0, r5
 800503c:	47b8      	blx	r7
 800503e:	3001      	adds	r0, #1
 8005040:	d12c      	bne.n	800509c <_printf_float+0x250>
 8005042:	e764      	b.n	8004f0e <_printf_float+0xc2>
 8005044:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005048:	f240 80e0 	bls.w	800520c <_printf_float+0x3c0>
 800504c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005050:	2200      	movs	r2, #0
 8005052:	2300      	movs	r3, #0
 8005054:	f7fb fd40 	bl	8000ad8 <__aeabi_dcmpeq>
 8005058:	2800      	cmp	r0, #0
 800505a:	d034      	beq.n	80050c6 <_printf_float+0x27a>
 800505c:	4a37      	ldr	r2, [pc, #220]	; (800513c <_printf_float+0x2f0>)
 800505e:	2301      	movs	r3, #1
 8005060:	4631      	mov	r1, r6
 8005062:	4628      	mov	r0, r5
 8005064:	47b8      	blx	r7
 8005066:	3001      	adds	r0, #1
 8005068:	f43f af51 	beq.w	8004f0e <_printf_float+0xc2>
 800506c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005070:	429a      	cmp	r2, r3
 8005072:	db02      	blt.n	800507a <_printf_float+0x22e>
 8005074:	6823      	ldr	r3, [r4, #0]
 8005076:	07d8      	lsls	r0, r3, #31
 8005078:	d510      	bpl.n	800509c <_printf_float+0x250>
 800507a:	ee18 3a10 	vmov	r3, s16
 800507e:	4652      	mov	r2, sl
 8005080:	4631      	mov	r1, r6
 8005082:	4628      	mov	r0, r5
 8005084:	47b8      	blx	r7
 8005086:	3001      	adds	r0, #1
 8005088:	f43f af41 	beq.w	8004f0e <_printf_float+0xc2>
 800508c:	f04f 0800 	mov.w	r8, #0
 8005090:	f104 091a 	add.w	r9, r4, #26
 8005094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005096:	3b01      	subs	r3, #1
 8005098:	4543      	cmp	r3, r8
 800509a:	dc09      	bgt.n	80050b0 <_printf_float+0x264>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	079b      	lsls	r3, r3, #30
 80050a0:	f100 8105 	bmi.w	80052ae <_printf_float+0x462>
 80050a4:	68e0      	ldr	r0, [r4, #12]
 80050a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050a8:	4298      	cmp	r0, r3
 80050aa:	bfb8      	it	lt
 80050ac:	4618      	movlt	r0, r3
 80050ae:	e730      	b.n	8004f12 <_printf_float+0xc6>
 80050b0:	2301      	movs	r3, #1
 80050b2:	464a      	mov	r2, r9
 80050b4:	4631      	mov	r1, r6
 80050b6:	4628      	mov	r0, r5
 80050b8:	47b8      	blx	r7
 80050ba:	3001      	adds	r0, #1
 80050bc:	f43f af27 	beq.w	8004f0e <_printf_float+0xc2>
 80050c0:	f108 0801 	add.w	r8, r8, #1
 80050c4:	e7e6      	b.n	8005094 <_printf_float+0x248>
 80050c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	dc39      	bgt.n	8005140 <_printf_float+0x2f4>
 80050cc:	4a1b      	ldr	r2, [pc, #108]	; (800513c <_printf_float+0x2f0>)
 80050ce:	2301      	movs	r3, #1
 80050d0:	4631      	mov	r1, r6
 80050d2:	4628      	mov	r0, r5
 80050d4:	47b8      	blx	r7
 80050d6:	3001      	adds	r0, #1
 80050d8:	f43f af19 	beq.w	8004f0e <_printf_float+0xc2>
 80050dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050e0:	4313      	orrs	r3, r2
 80050e2:	d102      	bne.n	80050ea <_printf_float+0x29e>
 80050e4:	6823      	ldr	r3, [r4, #0]
 80050e6:	07d9      	lsls	r1, r3, #31
 80050e8:	d5d8      	bpl.n	800509c <_printf_float+0x250>
 80050ea:	ee18 3a10 	vmov	r3, s16
 80050ee:	4652      	mov	r2, sl
 80050f0:	4631      	mov	r1, r6
 80050f2:	4628      	mov	r0, r5
 80050f4:	47b8      	blx	r7
 80050f6:	3001      	adds	r0, #1
 80050f8:	f43f af09 	beq.w	8004f0e <_printf_float+0xc2>
 80050fc:	f04f 0900 	mov.w	r9, #0
 8005100:	f104 0a1a 	add.w	sl, r4, #26
 8005104:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005106:	425b      	negs	r3, r3
 8005108:	454b      	cmp	r3, r9
 800510a:	dc01      	bgt.n	8005110 <_printf_float+0x2c4>
 800510c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800510e:	e792      	b.n	8005036 <_printf_float+0x1ea>
 8005110:	2301      	movs	r3, #1
 8005112:	4652      	mov	r2, sl
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	f43f aef7 	beq.w	8004f0e <_printf_float+0xc2>
 8005120:	f109 0901 	add.w	r9, r9, #1
 8005124:	e7ee      	b.n	8005104 <_printf_float+0x2b8>
 8005126:	bf00      	nop
 8005128:	7fefffff 	.word	0x7fefffff
 800512c:	08007b50 	.word	0x08007b50
 8005130:	08007b54 	.word	0x08007b54
 8005134:	08007b5c 	.word	0x08007b5c
 8005138:	08007b58 	.word	0x08007b58
 800513c:	08007b60 	.word	0x08007b60
 8005140:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005142:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005144:	429a      	cmp	r2, r3
 8005146:	bfa8      	it	ge
 8005148:	461a      	movge	r2, r3
 800514a:	2a00      	cmp	r2, #0
 800514c:	4691      	mov	r9, r2
 800514e:	dc37      	bgt.n	80051c0 <_printf_float+0x374>
 8005150:	f04f 0b00 	mov.w	fp, #0
 8005154:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005158:	f104 021a 	add.w	r2, r4, #26
 800515c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800515e:	9305      	str	r3, [sp, #20]
 8005160:	eba3 0309 	sub.w	r3, r3, r9
 8005164:	455b      	cmp	r3, fp
 8005166:	dc33      	bgt.n	80051d0 <_printf_float+0x384>
 8005168:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800516c:	429a      	cmp	r2, r3
 800516e:	db3b      	blt.n	80051e8 <_printf_float+0x39c>
 8005170:	6823      	ldr	r3, [r4, #0]
 8005172:	07da      	lsls	r2, r3, #31
 8005174:	d438      	bmi.n	80051e8 <_printf_float+0x39c>
 8005176:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005178:	9a05      	ldr	r2, [sp, #20]
 800517a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800517c:	1a9a      	subs	r2, r3, r2
 800517e:	eba3 0901 	sub.w	r9, r3, r1
 8005182:	4591      	cmp	r9, r2
 8005184:	bfa8      	it	ge
 8005186:	4691      	movge	r9, r2
 8005188:	f1b9 0f00 	cmp.w	r9, #0
 800518c:	dc35      	bgt.n	80051fa <_printf_float+0x3ae>
 800518e:	f04f 0800 	mov.w	r8, #0
 8005192:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005196:	f104 0a1a 	add.w	sl, r4, #26
 800519a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800519e:	1a9b      	subs	r3, r3, r2
 80051a0:	eba3 0309 	sub.w	r3, r3, r9
 80051a4:	4543      	cmp	r3, r8
 80051a6:	f77f af79 	ble.w	800509c <_printf_float+0x250>
 80051aa:	2301      	movs	r3, #1
 80051ac:	4652      	mov	r2, sl
 80051ae:	4631      	mov	r1, r6
 80051b0:	4628      	mov	r0, r5
 80051b2:	47b8      	blx	r7
 80051b4:	3001      	adds	r0, #1
 80051b6:	f43f aeaa 	beq.w	8004f0e <_printf_float+0xc2>
 80051ba:	f108 0801 	add.w	r8, r8, #1
 80051be:	e7ec      	b.n	800519a <_printf_float+0x34e>
 80051c0:	4613      	mov	r3, r2
 80051c2:	4631      	mov	r1, r6
 80051c4:	4642      	mov	r2, r8
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	d1c0      	bne.n	8005150 <_printf_float+0x304>
 80051ce:	e69e      	b.n	8004f0e <_printf_float+0xc2>
 80051d0:	2301      	movs	r3, #1
 80051d2:	4631      	mov	r1, r6
 80051d4:	4628      	mov	r0, r5
 80051d6:	9205      	str	r2, [sp, #20]
 80051d8:	47b8      	blx	r7
 80051da:	3001      	adds	r0, #1
 80051dc:	f43f ae97 	beq.w	8004f0e <_printf_float+0xc2>
 80051e0:	9a05      	ldr	r2, [sp, #20]
 80051e2:	f10b 0b01 	add.w	fp, fp, #1
 80051e6:	e7b9      	b.n	800515c <_printf_float+0x310>
 80051e8:	ee18 3a10 	vmov	r3, s16
 80051ec:	4652      	mov	r2, sl
 80051ee:	4631      	mov	r1, r6
 80051f0:	4628      	mov	r0, r5
 80051f2:	47b8      	blx	r7
 80051f4:	3001      	adds	r0, #1
 80051f6:	d1be      	bne.n	8005176 <_printf_float+0x32a>
 80051f8:	e689      	b.n	8004f0e <_printf_float+0xc2>
 80051fa:	9a05      	ldr	r2, [sp, #20]
 80051fc:	464b      	mov	r3, r9
 80051fe:	4442      	add	r2, r8
 8005200:	4631      	mov	r1, r6
 8005202:	4628      	mov	r0, r5
 8005204:	47b8      	blx	r7
 8005206:	3001      	adds	r0, #1
 8005208:	d1c1      	bne.n	800518e <_printf_float+0x342>
 800520a:	e680      	b.n	8004f0e <_printf_float+0xc2>
 800520c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800520e:	2a01      	cmp	r2, #1
 8005210:	dc01      	bgt.n	8005216 <_printf_float+0x3ca>
 8005212:	07db      	lsls	r3, r3, #31
 8005214:	d538      	bpl.n	8005288 <_printf_float+0x43c>
 8005216:	2301      	movs	r3, #1
 8005218:	4642      	mov	r2, r8
 800521a:	4631      	mov	r1, r6
 800521c:	4628      	mov	r0, r5
 800521e:	47b8      	blx	r7
 8005220:	3001      	adds	r0, #1
 8005222:	f43f ae74 	beq.w	8004f0e <_printf_float+0xc2>
 8005226:	ee18 3a10 	vmov	r3, s16
 800522a:	4652      	mov	r2, sl
 800522c:	4631      	mov	r1, r6
 800522e:	4628      	mov	r0, r5
 8005230:	47b8      	blx	r7
 8005232:	3001      	adds	r0, #1
 8005234:	f43f ae6b 	beq.w	8004f0e <_printf_float+0xc2>
 8005238:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800523c:	2200      	movs	r2, #0
 800523e:	2300      	movs	r3, #0
 8005240:	f7fb fc4a 	bl	8000ad8 <__aeabi_dcmpeq>
 8005244:	b9d8      	cbnz	r0, 800527e <_printf_float+0x432>
 8005246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005248:	f108 0201 	add.w	r2, r8, #1
 800524c:	3b01      	subs	r3, #1
 800524e:	4631      	mov	r1, r6
 8005250:	4628      	mov	r0, r5
 8005252:	47b8      	blx	r7
 8005254:	3001      	adds	r0, #1
 8005256:	d10e      	bne.n	8005276 <_printf_float+0x42a>
 8005258:	e659      	b.n	8004f0e <_printf_float+0xc2>
 800525a:	2301      	movs	r3, #1
 800525c:	4652      	mov	r2, sl
 800525e:	4631      	mov	r1, r6
 8005260:	4628      	mov	r0, r5
 8005262:	47b8      	blx	r7
 8005264:	3001      	adds	r0, #1
 8005266:	f43f ae52 	beq.w	8004f0e <_printf_float+0xc2>
 800526a:	f108 0801 	add.w	r8, r8, #1
 800526e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005270:	3b01      	subs	r3, #1
 8005272:	4543      	cmp	r3, r8
 8005274:	dcf1      	bgt.n	800525a <_printf_float+0x40e>
 8005276:	464b      	mov	r3, r9
 8005278:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800527c:	e6dc      	b.n	8005038 <_printf_float+0x1ec>
 800527e:	f04f 0800 	mov.w	r8, #0
 8005282:	f104 0a1a 	add.w	sl, r4, #26
 8005286:	e7f2      	b.n	800526e <_printf_float+0x422>
 8005288:	2301      	movs	r3, #1
 800528a:	4642      	mov	r2, r8
 800528c:	e7df      	b.n	800524e <_printf_float+0x402>
 800528e:	2301      	movs	r3, #1
 8005290:	464a      	mov	r2, r9
 8005292:	4631      	mov	r1, r6
 8005294:	4628      	mov	r0, r5
 8005296:	47b8      	blx	r7
 8005298:	3001      	adds	r0, #1
 800529a:	f43f ae38 	beq.w	8004f0e <_printf_float+0xc2>
 800529e:	f108 0801 	add.w	r8, r8, #1
 80052a2:	68e3      	ldr	r3, [r4, #12]
 80052a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052a6:	1a5b      	subs	r3, r3, r1
 80052a8:	4543      	cmp	r3, r8
 80052aa:	dcf0      	bgt.n	800528e <_printf_float+0x442>
 80052ac:	e6fa      	b.n	80050a4 <_printf_float+0x258>
 80052ae:	f04f 0800 	mov.w	r8, #0
 80052b2:	f104 0919 	add.w	r9, r4, #25
 80052b6:	e7f4      	b.n	80052a2 <_printf_float+0x456>

080052b8 <_printf_common>:
 80052b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052bc:	4616      	mov	r6, r2
 80052be:	4699      	mov	r9, r3
 80052c0:	688a      	ldr	r2, [r1, #8]
 80052c2:	690b      	ldr	r3, [r1, #16]
 80052c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80052c8:	4293      	cmp	r3, r2
 80052ca:	bfb8      	it	lt
 80052cc:	4613      	movlt	r3, r2
 80052ce:	6033      	str	r3, [r6, #0]
 80052d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80052d4:	4607      	mov	r7, r0
 80052d6:	460c      	mov	r4, r1
 80052d8:	b10a      	cbz	r2, 80052de <_printf_common+0x26>
 80052da:	3301      	adds	r3, #1
 80052dc:	6033      	str	r3, [r6, #0]
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	0699      	lsls	r1, r3, #26
 80052e2:	bf42      	ittt	mi
 80052e4:	6833      	ldrmi	r3, [r6, #0]
 80052e6:	3302      	addmi	r3, #2
 80052e8:	6033      	strmi	r3, [r6, #0]
 80052ea:	6825      	ldr	r5, [r4, #0]
 80052ec:	f015 0506 	ands.w	r5, r5, #6
 80052f0:	d106      	bne.n	8005300 <_printf_common+0x48>
 80052f2:	f104 0a19 	add.w	sl, r4, #25
 80052f6:	68e3      	ldr	r3, [r4, #12]
 80052f8:	6832      	ldr	r2, [r6, #0]
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	42ab      	cmp	r3, r5
 80052fe:	dc26      	bgt.n	800534e <_printf_common+0x96>
 8005300:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005304:	1e13      	subs	r3, r2, #0
 8005306:	6822      	ldr	r2, [r4, #0]
 8005308:	bf18      	it	ne
 800530a:	2301      	movne	r3, #1
 800530c:	0692      	lsls	r2, r2, #26
 800530e:	d42b      	bmi.n	8005368 <_printf_common+0xb0>
 8005310:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005314:	4649      	mov	r1, r9
 8005316:	4638      	mov	r0, r7
 8005318:	47c0      	blx	r8
 800531a:	3001      	adds	r0, #1
 800531c:	d01e      	beq.n	800535c <_printf_common+0xa4>
 800531e:	6823      	ldr	r3, [r4, #0]
 8005320:	68e5      	ldr	r5, [r4, #12]
 8005322:	6832      	ldr	r2, [r6, #0]
 8005324:	f003 0306 	and.w	r3, r3, #6
 8005328:	2b04      	cmp	r3, #4
 800532a:	bf08      	it	eq
 800532c:	1aad      	subeq	r5, r5, r2
 800532e:	68a3      	ldr	r3, [r4, #8]
 8005330:	6922      	ldr	r2, [r4, #16]
 8005332:	bf0c      	ite	eq
 8005334:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005338:	2500      	movne	r5, #0
 800533a:	4293      	cmp	r3, r2
 800533c:	bfc4      	itt	gt
 800533e:	1a9b      	subgt	r3, r3, r2
 8005340:	18ed      	addgt	r5, r5, r3
 8005342:	2600      	movs	r6, #0
 8005344:	341a      	adds	r4, #26
 8005346:	42b5      	cmp	r5, r6
 8005348:	d11a      	bne.n	8005380 <_printf_common+0xc8>
 800534a:	2000      	movs	r0, #0
 800534c:	e008      	b.n	8005360 <_printf_common+0xa8>
 800534e:	2301      	movs	r3, #1
 8005350:	4652      	mov	r2, sl
 8005352:	4649      	mov	r1, r9
 8005354:	4638      	mov	r0, r7
 8005356:	47c0      	blx	r8
 8005358:	3001      	adds	r0, #1
 800535a:	d103      	bne.n	8005364 <_printf_common+0xac>
 800535c:	f04f 30ff 	mov.w	r0, #4294967295
 8005360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005364:	3501      	adds	r5, #1
 8005366:	e7c6      	b.n	80052f6 <_printf_common+0x3e>
 8005368:	18e1      	adds	r1, r4, r3
 800536a:	1c5a      	adds	r2, r3, #1
 800536c:	2030      	movs	r0, #48	; 0x30
 800536e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005372:	4422      	add	r2, r4
 8005374:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005378:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800537c:	3302      	adds	r3, #2
 800537e:	e7c7      	b.n	8005310 <_printf_common+0x58>
 8005380:	2301      	movs	r3, #1
 8005382:	4622      	mov	r2, r4
 8005384:	4649      	mov	r1, r9
 8005386:	4638      	mov	r0, r7
 8005388:	47c0      	blx	r8
 800538a:	3001      	adds	r0, #1
 800538c:	d0e6      	beq.n	800535c <_printf_common+0xa4>
 800538e:	3601      	adds	r6, #1
 8005390:	e7d9      	b.n	8005346 <_printf_common+0x8e>
	...

08005394 <_printf_i>:
 8005394:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005398:	7e0f      	ldrb	r7, [r1, #24]
 800539a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800539c:	2f78      	cmp	r7, #120	; 0x78
 800539e:	4691      	mov	r9, r2
 80053a0:	4680      	mov	r8, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	469a      	mov	sl, r3
 80053a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053aa:	d807      	bhi.n	80053bc <_printf_i+0x28>
 80053ac:	2f62      	cmp	r7, #98	; 0x62
 80053ae:	d80a      	bhi.n	80053c6 <_printf_i+0x32>
 80053b0:	2f00      	cmp	r7, #0
 80053b2:	f000 80d8 	beq.w	8005566 <_printf_i+0x1d2>
 80053b6:	2f58      	cmp	r7, #88	; 0x58
 80053b8:	f000 80a3 	beq.w	8005502 <_printf_i+0x16e>
 80053bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053c4:	e03a      	b.n	800543c <_printf_i+0xa8>
 80053c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80053ca:	2b15      	cmp	r3, #21
 80053cc:	d8f6      	bhi.n	80053bc <_printf_i+0x28>
 80053ce:	a101      	add	r1, pc, #4	; (adr r1, 80053d4 <_printf_i+0x40>)
 80053d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80053d4:	0800542d 	.word	0x0800542d
 80053d8:	08005441 	.word	0x08005441
 80053dc:	080053bd 	.word	0x080053bd
 80053e0:	080053bd 	.word	0x080053bd
 80053e4:	080053bd 	.word	0x080053bd
 80053e8:	080053bd 	.word	0x080053bd
 80053ec:	08005441 	.word	0x08005441
 80053f0:	080053bd 	.word	0x080053bd
 80053f4:	080053bd 	.word	0x080053bd
 80053f8:	080053bd 	.word	0x080053bd
 80053fc:	080053bd 	.word	0x080053bd
 8005400:	0800554d 	.word	0x0800554d
 8005404:	08005471 	.word	0x08005471
 8005408:	0800552f 	.word	0x0800552f
 800540c:	080053bd 	.word	0x080053bd
 8005410:	080053bd 	.word	0x080053bd
 8005414:	0800556f 	.word	0x0800556f
 8005418:	080053bd 	.word	0x080053bd
 800541c:	08005471 	.word	0x08005471
 8005420:	080053bd 	.word	0x080053bd
 8005424:	080053bd 	.word	0x080053bd
 8005428:	08005537 	.word	0x08005537
 800542c:	682b      	ldr	r3, [r5, #0]
 800542e:	1d1a      	adds	r2, r3, #4
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	602a      	str	r2, [r5, #0]
 8005434:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005438:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800543c:	2301      	movs	r3, #1
 800543e:	e0a3      	b.n	8005588 <_printf_i+0x1f4>
 8005440:	6820      	ldr	r0, [r4, #0]
 8005442:	6829      	ldr	r1, [r5, #0]
 8005444:	0606      	lsls	r6, r0, #24
 8005446:	f101 0304 	add.w	r3, r1, #4
 800544a:	d50a      	bpl.n	8005462 <_printf_i+0xce>
 800544c:	680e      	ldr	r6, [r1, #0]
 800544e:	602b      	str	r3, [r5, #0]
 8005450:	2e00      	cmp	r6, #0
 8005452:	da03      	bge.n	800545c <_printf_i+0xc8>
 8005454:	232d      	movs	r3, #45	; 0x2d
 8005456:	4276      	negs	r6, r6
 8005458:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800545c:	485e      	ldr	r0, [pc, #376]	; (80055d8 <_printf_i+0x244>)
 800545e:	230a      	movs	r3, #10
 8005460:	e019      	b.n	8005496 <_printf_i+0x102>
 8005462:	680e      	ldr	r6, [r1, #0]
 8005464:	602b      	str	r3, [r5, #0]
 8005466:	f010 0f40 	tst.w	r0, #64	; 0x40
 800546a:	bf18      	it	ne
 800546c:	b236      	sxthne	r6, r6
 800546e:	e7ef      	b.n	8005450 <_printf_i+0xbc>
 8005470:	682b      	ldr	r3, [r5, #0]
 8005472:	6820      	ldr	r0, [r4, #0]
 8005474:	1d19      	adds	r1, r3, #4
 8005476:	6029      	str	r1, [r5, #0]
 8005478:	0601      	lsls	r1, r0, #24
 800547a:	d501      	bpl.n	8005480 <_printf_i+0xec>
 800547c:	681e      	ldr	r6, [r3, #0]
 800547e:	e002      	b.n	8005486 <_printf_i+0xf2>
 8005480:	0646      	lsls	r6, r0, #25
 8005482:	d5fb      	bpl.n	800547c <_printf_i+0xe8>
 8005484:	881e      	ldrh	r6, [r3, #0]
 8005486:	4854      	ldr	r0, [pc, #336]	; (80055d8 <_printf_i+0x244>)
 8005488:	2f6f      	cmp	r7, #111	; 0x6f
 800548a:	bf0c      	ite	eq
 800548c:	2308      	moveq	r3, #8
 800548e:	230a      	movne	r3, #10
 8005490:	2100      	movs	r1, #0
 8005492:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005496:	6865      	ldr	r5, [r4, #4]
 8005498:	60a5      	str	r5, [r4, #8]
 800549a:	2d00      	cmp	r5, #0
 800549c:	bfa2      	ittt	ge
 800549e:	6821      	ldrge	r1, [r4, #0]
 80054a0:	f021 0104 	bicge.w	r1, r1, #4
 80054a4:	6021      	strge	r1, [r4, #0]
 80054a6:	b90e      	cbnz	r6, 80054ac <_printf_i+0x118>
 80054a8:	2d00      	cmp	r5, #0
 80054aa:	d04d      	beq.n	8005548 <_printf_i+0x1b4>
 80054ac:	4615      	mov	r5, r2
 80054ae:	fbb6 f1f3 	udiv	r1, r6, r3
 80054b2:	fb03 6711 	mls	r7, r3, r1, r6
 80054b6:	5dc7      	ldrb	r7, [r0, r7]
 80054b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054bc:	4637      	mov	r7, r6
 80054be:	42bb      	cmp	r3, r7
 80054c0:	460e      	mov	r6, r1
 80054c2:	d9f4      	bls.n	80054ae <_printf_i+0x11a>
 80054c4:	2b08      	cmp	r3, #8
 80054c6:	d10b      	bne.n	80054e0 <_printf_i+0x14c>
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	07de      	lsls	r6, r3, #31
 80054cc:	d508      	bpl.n	80054e0 <_printf_i+0x14c>
 80054ce:	6923      	ldr	r3, [r4, #16]
 80054d0:	6861      	ldr	r1, [r4, #4]
 80054d2:	4299      	cmp	r1, r3
 80054d4:	bfde      	ittt	le
 80054d6:	2330      	movle	r3, #48	; 0x30
 80054d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80054dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80054e0:	1b52      	subs	r2, r2, r5
 80054e2:	6122      	str	r2, [r4, #16]
 80054e4:	f8cd a000 	str.w	sl, [sp]
 80054e8:	464b      	mov	r3, r9
 80054ea:	aa03      	add	r2, sp, #12
 80054ec:	4621      	mov	r1, r4
 80054ee:	4640      	mov	r0, r8
 80054f0:	f7ff fee2 	bl	80052b8 <_printf_common>
 80054f4:	3001      	adds	r0, #1
 80054f6:	d14c      	bne.n	8005592 <_printf_i+0x1fe>
 80054f8:	f04f 30ff 	mov.w	r0, #4294967295
 80054fc:	b004      	add	sp, #16
 80054fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005502:	4835      	ldr	r0, [pc, #212]	; (80055d8 <_printf_i+0x244>)
 8005504:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005508:	6829      	ldr	r1, [r5, #0]
 800550a:	6823      	ldr	r3, [r4, #0]
 800550c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005510:	6029      	str	r1, [r5, #0]
 8005512:	061d      	lsls	r5, r3, #24
 8005514:	d514      	bpl.n	8005540 <_printf_i+0x1ac>
 8005516:	07df      	lsls	r7, r3, #31
 8005518:	bf44      	itt	mi
 800551a:	f043 0320 	orrmi.w	r3, r3, #32
 800551e:	6023      	strmi	r3, [r4, #0]
 8005520:	b91e      	cbnz	r6, 800552a <_printf_i+0x196>
 8005522:	6823      	ldr	r3, [r4, #0]
 8005524:	f023 0320 	bic.w	r3, r3, #32
 8005528:	6023      	str	r3, [r4, #0]
 800552a:	2310      	movs	r3, #16
 800552c:	e7b0      	b.n	8005490 <_printf_i+0xfc>
 800552e:	6823      	ldr	r3, [r4, #0]
 8005530:	f043 0320 	orr.w	r3, r3, #32
 8005534:	6023      	str	r3, [r4, #0]
 8005536:	2378      	movs	r3, #120	; 0x78
 8005538:	4828      	ldr	r0, [pc, #160]	; (80055dc <_printf_i+0x248>)
 800553a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800553e:	e7e3      	b.n	8005508 <_printf_i+0x174>
 8005540:	0659      	lsls	r1, r3, #25
 8005542:	bf48      	it	mi
 8005544:	b2b6      	uxthmi	r6, r6
 8005546:	e7e6      	b.n	8005516 <_printf_i+0x182>
 8005548:	4615      	mov	r5, r2
 800554a:	e7bb      	b.n	80054c4 <_printf_i+0x130>
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	6826      	ldr	r6, [r4, #0]
 8005550:	6961      	ldr	r1, [r4, #20]
 8005552:	1d18      	adds	r0, r3, #4
 8005554:	6028      	str	r0, [r5, #0]
 8005556:	0635      	lsls	r5, r6, #24
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	d501      	bpl.n	8005560 <_printf_i+0x1cc>
 800555c:	6019      	str	r1, [r3, #0]
 800555e:	e002      	b.n	8005566 <_printf_i+0x1d2>
 8005560:	0670      	lsls	r0, r6, #25
 8005562:	d5fb      	bpl.n	800555c <_printf_i+0x1c8>
 8005564:	8019      	strh	r1, [r3, #0]
 8005566:	2300      	movs	r3, #0
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	4615      	mov	r5, r2
 800556c:	e7ba      	b.n	80054e4 <_printf_i+0x150>
 800556e:	682b      	ldr	r3, [r5, #0]
 8005570:	1d1a      	adds	r2, r3, #4
 8005572:	602a      	str	r2, [r5, #0]
 8005574:	681d      	ldr	r5, [r3, #0]
 8005576:	6862      	ldr	r2, [r4, #4]
 8005578:	2100      	movs	r1, #0
 800557a:	4628      	mov	r0, r5
 800557c:	f7fa fe38 	bl	80001f0 <memchr>
 8005580:	b108      	cbz	r0, 8005586 <_printf_i+0x1f2>
 8005582:	1b40      	subs	r0, r0, r5
 8005584:	6060      	str	r0, [r4, #4]
 8005586:	6863      	ldr	r3, [r4, #4]
 8005588:	6123      	str	r3, [r4, #16]
 800558a:	2300      	movs	r3, #0
 800558c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005590:	e7a8      	b.n	80054e4 <_printf_i+0x150>
 8005592:	6923      	ldr	r3, [r4, #16]
 8005594:	462a      	mov	r2, r5
 8005596:	4649      	mov	r1, r9
 8005598:	4640      	mov	r0, r8
 800559a:	47d0      	blx	sl
 800559c:	3001      	adds	r0, #1
 800559e:	d0ab      	beq.n	80054f8 <_printf_i+0x164>
 80055a0:	6823      	ldr	r3, [r4, #0]
 80055a2:	079b      	lsls	r3, r3, #30
 80055a4:	d413      	bmi.n	80055ce <_printf_i+0x23a>
 80055a6:	68e0      	ldr	r0, [r4, #12]
 80055a8:	9b03      	ldr	r3, [sp, #12]
 80055aa:	4298      	cmp	r0, r3
 80055ac:	bfb8      	it	lt
 80055ae:	4618      	movlt	r0, r3
 80055b0:	e7a4      	b.n	80054fc <_printf_i+0x168>
 80055b2:	2301      	movs	r3, #1
 80055b4:	4632      	mov	r2, r6
 80055b6:	4649      	mov	r1, r9
 80055b8:	4640      	mov	r0, r8
 80055ba:	47d0      	blx	sl
 80055bc:	3001      	adds	r0, #1
 80055be:	d09b      	beq.n	80054f8 <_printf_i+0x164>
 80055c0:	3501      	adds	r5, #1
 80055c2:	68e3      	ldr	r3, [r4, #12]
 80055c4:	9903      	ldr	r1, [sp, #12]
 80055c6:	1a5b      	subs	r3, r3, r1
 80055c8:	42ab      	cmp	r3, r5
 80055ca:	dcf2      	bgt.n	80055b2 <_printf_i+0x21e>
 80055cc:	e7eb      	b.n	80055a6 <_printf_i+0x212>
 80055ce:	2500      	movs	r5, #0
 80055d0:	f104 0619 	add.w	r6, r4, #25
 80055d4:	e7f5      	b.n	80055c2 <_printf_i+0x22e>
 80055d6:	bf00      	nop
 80055d8:	08007b62 	.word	0x08007b62
 80055dc:	08007b73 	.word	0x08007b73

080055e0 <siprintf>:
 80055e0:	b40e      	push	{r1, r2, r3}
 80055e2:	b500      	push	{lr}
 80055e4:	b09c      	sub	sp, #112	; 0x70
 80055e6:	ab1d      	add	r3, sp, #116	; 0x74
 80055e8:	9002      	str	r0, [sp, #8]
 80055ea:	9006      	str	r0, [sp, #24]
 80055ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80055f0:	4809      	ldr	r0, [pc, #36]	; (8005618 <siprintf+0x38>)
 80055f2:	9107      	str	r1, [sp, #28]
 80055f4:	9104      	str	r1, [sp, #16]
 80055f6:	4909      	ldr	r1, [pc, #36]	; (800561c <siprintf+0x3c>)
 80055f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80055fc:	9105      	str	r1, [sp, #20]
 80055fe:	6800      	ldr	r0, [r0, #0]
 8005600:	9301      	str	r3, [sp, #4]
 8005602:	a902      	add	r1, sp, #8
 8005604:	f001 fb76 	bl	8006cf4 <_svfiprintf_r>
 8005608:	9b02      	ldr	r3, [sp, #8]
 800560a:	2200      	movs	r2, #0
 800560c:	701a      	strb	r2, [r3, #0]
 800560e:	b01c      	add	sp, #112	; 0x70
 8005610:	f85d eb04 	ldr.w	lr, [sp], #4
 8005614:	b003      	add	sp, #12
 8005616:	4770      	bx	lr
 8005618:	2000000c 	.word	0x2000000c
 800561c:	ffff0208 	.word	0xffff0208

08005620 <quorem>:
 8005620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005624:	6903      	ldr	r3, [r0, #16]
 8005626:	690c      	ldr	r4, [r1, #16]
 8005628:	42a3      	cmp	r3, r4
 800562a:	4607      	mov	r7, r0
 800562c:	f2c0 8081 	blt.w	8005732 <quorem+0x112>
 8005630:	3c01      	subs	r4, #1
 8005632:	f101 0814 	add.w	r8, r1, #20
 8005636:	f100 0514 	add.w	r5, r0, #20
 800563a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005644:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005648:	3301      	adds	r3, #1
 800564a:	429a      	cmp	r2, r3
 800564c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005650:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005654:	fbb2 f6f3 	udiv	r6, r2, r3
 8005658:	d331      	bcc.n	80056be <quorem+0x9e>
 800565a:	f04f 0e00 	mov.w	lr, #0
 800565e:	4640      	mov	r0, r8
 8005660:	46ac      	mov	ip, r5
 8005662:	46f2      	mov	sl, lr
 8005664:	f850 2b04 	ldr.w	r2, [r0], #4
 8005668:	b293      	uxth	r3, r2
 800566a:	fb06 e303 	mla	r3, r6, r3, lr
 800566e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005672:	b29b      	uxth	r3, r3
 8005674:	ebaa 0303 	sub.w	r3, sl, r3
 8005678:	f8dc a000 	ldr.w	sl, [ip]
 800567c:	0c12      	lsrs	r2, r2, #16
 800567e:	fa13 f38a 	uxtah	r3, r3, sl
 8005682:	fb06 e202 	mla	r2, r6, r2, lr
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	9b00      	ldr	r3, [sp, #0]
 800568a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800568e:	b292      	uxth	r2, r2
 8005690:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005694:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005698:	f8bd 3000 	ldrh.w	r3, [sp]
 800569c:	4581      	cmp	r9, r0
 800569e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056a2:	f84c 3b04 	str.w	r3, [ip], #4
 80056a6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80056aa:	d2db      	bcs.n	8005664 <quorem+0x44>
 80056ac:	f855 300b 	ldr.w	r3, [r5, fp]
 80056b0:	b92b      	cbnz	r3, 80056be <quorem+0x9e>
 80056b2:	9b01      	ldr	r3, [sp, #4]
 80056b4:	3b04      	subs	r3, #4
 80056b6:	429d      	cmp	r5, r3
 80056b8:	461a      	mov	r2, r3
 80056ba:	d32e      	bcc.n	800571a <quorem+0xfa>
 80056bc:	613c      	str	r4, [r7, #16]
 80056be:	4638      	mov	r0, r7
 80056c0:	f001 f8c4 	bl	800684c <__mcmp>
 80056c4:	2800      	cmp	r0, #0
 80056c6:	db24      	blt.n	8005712 <quorem+0xf2>
 80056c8:	3601      	adds	r6, #1
 80056ca:	4628      	mov	r0, r5
 80056cc:	f04f 0c00 	mov.w	ip, #0
 80056d0:	f858 2b04 	ldr.w	r2, [r8], #4
 80056d4:	f8d0 e000 	ldr.w	lr, [r0]
 80056d8:	b293      	uxth	r3, r2
 80056da:	ebac 0303 	sub.w	r3, ip, r3
 80056de:	0c12      	lsrs	r2, r2, #16
 80056e0:	fa13 f38e 	uxtah	r3, r3, lr
 80056e4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80056e8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80056f2:	45c1      	cmp	r9, r8
 80056f4:	f840 3b04 	str.w	r3, [r0], #4
 80056f8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80056fc:	d2e8      	bcs.n	80056d0 <quorem+0xb0>
 80056fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005702:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005706:	b922      	cbnz	r2, 8005712 <quorem+0xf2>
 8005708:	3b04      	subs	r3, #4
 800570a:	429d      	cmp	r5, r3
 800570c:	461a      	mov	r2, r3
 800570e:	d30a      	bcc.n	8005726 <quorem+0x106>
 8005710:	613c      	str	r4, [r7, #16]
 8005712:	4630      	mov	r0, r6
 8005714:	b003      	add	sp, #12
 8005716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800571a:	6812      	ldr	r2, [r2, #0]
 800571c:	3b04      	subs	r3, #4
 800571e:	2a00      	cmp	r2, #0
 8005720:	d1cc      	bne.n	80056bc <quorem+0x9c>
 8005722:	3c01      	subs	r4, #1
 8005724:	e7c7      	b.n	80056b6 <quorem+0x96>
 8005726:	6812      	ldr	r2, [r2, #0]
 8005728:	3b04      	subs	r3, #4
 800572a:	2a00      	cmp	r2, #0
 800572c:	d1f0      	bne.n	8005710 <quorem+0xf0>
 800572e:	3c01      	subs	r4, #1
 8005730:	e7eb      	b.n	800570a <quorem+0xea>
 8005732:	2000      	movs	r0, #0
 8005734:	e7ee      	b.n	8005714 <quorem+0xf4>
	...

08005738 <_dtoa_r>:
 8005738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800573c:	ed2d 8b04 	vpush	{d8-d9}
 8005740:	ec57 6b10 	vmov	r6, r7, d0
 8005744:	b093      	sub	sp, #76	; 0x4c
 8005746:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005748:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800574c:	9106      	str	r1, [sp, #24]
 800574e:	ee10 aa10 	vmov	sl, s0
 8005752:	4604      	mov	r4, r0
 8005754:	9209      	str	r2, [sp, #36]	; 0x24
 8005756:	930c      	str	r3, [sp, #48]	; 0x30
 8005758:	46bb      	mov	fp, r7
 800575a:	b975      	cbnz	r5, 800577a <_dtoa_r+0x42>
 800575c:	2010      	movs	r0, #16
 800575e:	f000 fddd 	bl	800631c <malloc>
 8005762:	4602      	mov	r2, r0
 8005764:	6260      	str	r0, [r4, #36]	; 0x24
 8005766:	b920      	cbnz	r0, 8005772 <_dtoa_r+0x3a>
 8005768:	4ba7      	ldr	r3, [pc, #668]	; (8005a08 <_dtoa_r+0x2d0>)
 800576a:	21ea      	movs	r1, #234	; 0xea
 800576c:	48a7      	ldr	r0, [pc, #668]	; (8005a0c <_dtoa_r+0x2d4>)
 800576e:	f001 fbd1 	bl	8006f14 <__assert_func>
 8005772:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005776:	6005      	str	r5, [r0, #0]
 8005778:	60c5      	str	r5, [r0, #12]
 800577a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800577c:	6819      	ldr	r1, [r3, #0]
 800577e:	b151      	cbz	r1, 8005796 <_dtoa_r+0x5e>
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	604a      	str	r2, [r1, #4]
 8005784:	2301      	movs	r3, #1
 8005786:	4093      	lsls	r3, r2
 8005788:	608b      	str	r3, [r1, #8]
 800578a:	4620      	mov	r0, r4
 800578c:	f000 fe1c 	bl	80063c8 <_Bfree>
 8005790:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	1e3b      	subs	r3, r7, #0
 8005798:	bfaa      	itet	ge
 800579a:	2300      	movge	r3, #0
 800579c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80057a0:	f8c8 3000 	strge.w	r3, [r8]
 80057a4:	4b9a      	ldr	r3, [pc, #616]	; (8005a10 <_dtoa_r+0x2d8>)
 80057a6:	bfbc      	itt	lt
 80057a8:	2201      	movlt	r2, #1
 80057aa:	f8c8 2000 	strlt.w	r2, [r8]
 80057ae:	ea33 030b 	bics.w	r3, r3, fp
 80057b2:	d11b      	bne.n	80057ec <_dtoa_r+0xb4>
 80057b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057b6:	f242 730f 	movw	r3, #9999	; 0x270f
 80057ba:	6013      	str	r3, [r2, #0]
 80057bc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80057c0:	4333      	orrs	r3, r6
 80057c2:	f000 8592 	beq.w	80062ea <_dtoa_r+0xbb2>
 80057c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80057c8:	b963      	cbnz	r3, 80057e4 <_dtoa_r+0xac>
 80057ca:	4b92      	ldr	r3, [pc, #584]	; (8005a14 <_dtoa_r+0x2dc>)
 80057cc:	e022      	b.n	8005814 <_dtoa_r+0xdc>
 80057ce:	4b92      	ldr	r3, [pc, #584]	; (8005a18 <_dtoa_r+0x2e0>)
 80057d0:	9301      	str	r3, [sp, #4]
 80057d2:	3308      	adds	r3, #8
 80057d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80057d6:	6013      	str	r3, [r2, #0]
 80057d8:	9801      	ldr	r0, [sp, #4]
 80057da:	b013      	add	sp, #76	; 0x4c
 80057dc:	ecbd 8b04 	vpop	{d8-d9}
 80057e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057e4:	4b8b      	ldr	r3, [pc, #556]	; (8005a14 <_dtoa_r+0x2dc>)
 80057e6:	9301      	str	r3, [sp, #4]
 80057e8:	3303      	adds	r3, #3
 80057ea:	e7f3      	b.n	80057d4 <_dtoa_r+0x9c>
 80057ec:	2200      	movs	r2, #0
 80057ee:	2300      	movs	r3, #0
 80057f0:	4650      	mov	r0, sl
 80057f2:	4659      	mov	r1, fp
 80057f4:	f7fb f970 	bl	8000ad8 <__aeabi_dcmpeq>
 80057f8:	ec4b ab19 	vmov	d9, sl, fp
 80057fc:	4680      	mov	r8, r0
 80057fe:	b158      	cbz	r0, 8005818 <_dtoa_r+0xe0>
 8005800:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005802:	2301      	movs	r3, #1
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005808:	2b00      	cmp	r3, #0
 800580a:	f000 856b 	beq.w	80062e4 <_dtoa_r+0xbac>
 800580e:	4883      	ldr	r0, [pc, #524]	; (8005a1c <_dtoa_r+0x2e4>)
 8005810:	6018      	str	r0, [r3, #0]
 8005812:	1e43      	subs	r3, r0, #1
 8005814:	9301      	str	r3, [sp, #4]
 8005816:	e7df      	b.n	80057d8 <_dtoa_r+0xa0>
 8005818:	ec4b ab10 	vmov	d0, sl, fp
 800581c:	aa10      	add	r2, sp, #64	; 0x40
 800581e:	a911      	add	r1, sp, #68	; 0x44
 8005820:	4620      	mov	r0, r4
 8005822:	f001 f8b9 	bl	8006998 <__d2b>
 8005826:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800582a:	ee08 0a10 	vmov	s16, r0
 800582e:	2d00      	cmp	r5, #0
 8005830:	f000 8084 	beq.w	800593c <_dtoa_r+0x204>
 8005834:	ee19 3a90 	vmov	r3, s19
 8005838:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800583c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005840:	4656      	mov	r6, sl
 8005842:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8005846:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800584a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800584e:	4b74      	ldr	r3, [pc, #464]	; (8005a20 <_dtoa_r+0x2e8>)
 8005850:	2200      	movs	r2, #0
 8005852:	4630      	mov	r0, r6
 8005854:	4639      	mov	r1, r7
 8005856:	f7fa fd1f 	bl	8000298 <__aeabi_dsub>
 800585a:	a365      	add	r3, pc, #404	; (adr r3, 80059f0 <_dtoa_r+0x2b8>)
 800585c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005860:	f7fa fed2 	bl	8000608 <__aeabi_dmul>
 8005864:	a364      	add	r3, pc, #400	; (adr r3, 80059f8 <_dtoa_r+0x2c0>)
 8005866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800586a:	f7fa fd17 	bl	800029c <__adddf3>
 800586e:	4606      	mov	r6, r0
 8005870:	4628      	mov	r0, r5
 8005872:	460f      	mov	r7, r1
 8005874:	f7fa fe5e 	bl	8000534 <__aeabi_i2d>
 8005878:	a361      	add	r3, pc, #388	; (adr r3, 8005a00 <_dtoa_r+0x2c8>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	f7fa fec3 	bl	8000608 <__aeabi_dmul>
 8005882:	4602      	mov	r2, r0
 8005884:	460b      	mov	r3, r1
 8005886:	4630      	mov	r0, r6
 8005888:	4639      	mov	r1, r7
 800588a:	f7fa fd07 	bl	800029c <__adddf3>
 800588e:	4606      	mov	r6, r0
 8005890:	460f      	mov	r7, r1
 8005892:	f7fb f969 	bl	8000b68 <__aeabi_d2iz>
 8005896:	2200      	movs	r2, #0
 8005898:	9000      	str	r0, [sp, #0]
 800589a:	2300      	movs	r3, #0
 800589c:	4630      	mov	r0, r6
 800589e:	4639      	mov	r1, r7
 80058a0:	f7fb f924 	bl	8000aec <__aeabi_dcmplt>
 80058a4:	b150      	cbz	r0, 80058bc <_dtoa_r+0x184>
 80058a6:	9800      	ldr	r0, [sp, #0]
 80058a8:	f7fa fe44 	bl	8000534 <__aeabi_i2d>
 80058ac:	4632      	mov	r2, r6
 80058ae:	463b      	mov	r3, r7
 80058b0:	f7fb f912 	bl	8000ad8 <__aeabi_dcmpeq>
 80058b4:	b910      	cbnz	r0, 80058bc <_dtoa_r+0x184>
 80058b6:	9b00      	ldr	r3, [sp, #0]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	9b00      	ldr	r3, [sp, #0]
 80058be:	2b16      	cmp	r3, #22
 80058c0:	d85a      	bhi.n	8005978 <_dtoa_r+0x240>
 80058c2:	9a00      	ldr	r2, [sp, #0]
 80058c4:	4b57      	ldr	r3, [pc, #348]	; (8005a24 <_dtoa_r+0x2ec>)
 80058c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80058ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058ce:	ec51 0b19 	vmov	r0, r1, d9
 80058d2:	f7fb f90b 	bl	8000aec <__aeabi_dcmplt>
 80058d6:	2800      	cmp	r0, #0
 80058d8:	d050      	beq.n	800597c <_dtoa_r+0x244>
 80058da:	9b00      	ldr	r3, [sp, #0]
 80058dc:	3b01      	subs	r3, #1
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2300      	movs	r3, #0
 80058e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80058e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80058e6:	1b5d      	subs	r5, r3, r5
 80058e8:	1e6b      	subs	r3, r5, #1
 80058ea:	9305      	str	r3, [sp, #20]
 80058ec:	bf45      	ittet	mi
 80058ee:	f1c5 0301 	rsbmi	r3, r5, #1
 80058f2:	9304      	strmi	r3, [sp, #16]
 80058f4:	2300      	movpl	r3, #0
 80058f6:	2300      	movmi	r3, #0
 80058f8:	bf4c      	ite	mi
 80058fa:	9305      	strmi	r3, [sp, #20]
 80058fc:	9304      	strpl	r3, [sp, #16]
 80058fe:	9b00      	ldr	r3, [sp, #0]
 8005900:	2b00      	cmp	r3, #0
 8005902:	db3d      	blt.n	8005980 <_dtoa_r+0x248>
 8005904:	9b05      	ldr	r3, [sp, #20]
 8005906:	9a00      	ldr	r2, [sp, #0]
 8005908:	920a      	str	r2, [sp, #40]	; 0x28
 800590a:	4413      	add	r3, r2
 800590c:	9305      	str	r3, [sp, #20]
 800590e:	2300      	movs	r3, #0
 8005910:	9307      	str	r3, [sp, #28]
 8005912:	9b06      	ldr	r3, [sp, #24]
 8005914:	2b09      	cmp	r3, #9
 8005916:	f200 8089 	bhi.w	8005a2c <_dtoa_r+0x2f4>
 800591a:	2b05      	cmp	r3, #5
 800591c:	bfc4      	itt	gt
 800591e:	3b04      	subgt	r3, #4
 8005920:	9306      	strgt	r3, [sp, #24]
 8005922:	9b06      	ldr	r3, [sp, #24]
 8005924:	f1a3 0302 	sub.w	r3, r3, #2
 8005928:	bfcc      	ite	gt
 800592a:	2500      	movgt	r5, #0
 800592c:	2501      	movle	r5, #1
 800592e:	2b03      	cmp	r3, #3
 8005930:	f200 8087 	bhi.w	8005a42 <_dtoa_r+0x30a>
 8005934:	e8df f003 	tbb	[pc, r3]
 8005938:	59383a2d 	.word	0x59383a2d
 800593c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005940:	441d      	add	r5, r3
 8005942:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005946:	2b20      	cmp	r3, #32
 8005948:	bfc1      	itttt	gt
 800594a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800594e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005952:	fa0b f303 	lslgt.w	r3, fp, r3
 8005956:	fa26 f000 	lsrgt.w	r0, r6, r0
 800595a:	bfda      	itte	le
 800595c:	f1c3 0320 	rsble	r3, r3, #32
 8005960:	fa06 f003 	lslle.w	r0, r6, r3
 8005964:	4318      	orrgt	r0, r3
 8005966:	f7fa fdd5 	bl	8000514 <__aeabi_ui2d>
 800596a:	2301      	movs	r3, #1
 800596c:	4606      	mov	r6, r0
 800596e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005972:	3d01      	subs	r5, #1
 8005974:	930e      	str	r3, [sp, #56]	; 0x38
 8005976:	e76a      	b.n	800584e <_dtoa_r+0x116>
 8005978:	2301      	movs	r3, #1
 800597a:	e7b2      	b.n	80058e2 <_dtoa_r+0x1aa>
 800597c:	900b      	str	r0, [sp, #44]	; 0x2c
 800597e:	e7b1      	b.n	80058e4 <_dtoa_r+0x1ac>
 8005980:	9b04      	ldr	r3, [sp, #16]
 8005982:	9a00      	ldr	r2, [sp, #0]
 8005984:	1a9b      	subs	r3, r3, r2
 8005986:	9304      	str	r3, [sp, #16]
 8005988:	4253      	negs	r3, r2
 800598a:	9307      	str	r3, [sp, #28]
 800598c:	2300      	movs	r3, #0
 800598e:	930a      	str	r3, [sp, #40]	; 0x28
 8005990:	e7bf      	b.n	8005912 <_dtoa_r+0x1da>
 8005992:	2300      	movs	r3, #0
 8005994:	9308      	str	r3, [sp, #32]
 8005996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005998:	2b00      	cmp	r3, #0
 800599a:	dc55      	bgt.n	8005a48 <_dtoa_r+0x310>
 800599c:	2301      	movs	r3, #1
 800599e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80059a2:	461a      	mov	r2, r3
 80059a4:	9209      	str	r2, [sp, #36]	; 0x24
 80059a6:	e00c      	b.n	80059c2 <_dtoa_r+0x28a>
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7f3      	b.n	8005994 <_dtoa_r+0x25c>
 80059ac:	2300      	movs	r3, #0
 80059ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80059b0:	9308      	str	r3, [sp, #32]
 80059b2:	9b00      	ldr	r3, [sp, #0]
 80059b4:	4413      	add	r3, r2
 80059b6:	9302      	str	r3, [sp, #8]
 80059b8:	3301      	adds	r3, #1
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	9303      	str	r3, [sp, #12]
 80059be:	bfb8      	it	lt
 80059c0:	2301      	movlt	r3, #1
 80059c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80059c4:	2200      	movs	r2, #0
 80059c6:	6042      	str	r2, [r0, #4]
 80059c8:	2204      	movs	r2, #4
 80059ca:	f102 0614 	add.w	r6, r2, #20
 80059ce:	429e      	cmp	r6, r3
 80059d0:	6841      	ldr	r1, [r0, #4]
 80059d2:	d93d      	bls.n	8005a50 <_dtoa_r+0x318>
 80059d4:	4620      	mov	r0, r4
 80059d6:	f000 fcb7 	bl	8006348 <_Balloc>
 80059da:	9001      	str	r0, [sp, #4]
 80059dc:	2800      	cmp	r0, #0
 80059de:	d13b      	bne.n	8005a58 <_dtoa_r+0x320>
 80059e0:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <_dtoa_r+0x2f0>)
 80059e2:	4602      	mov	r2, r0
 80059e4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80059e8:	e6c0      	b.n	800576c <_dtoa_r+0x34>
 80059ea:	2301      	movs	r3, #1
 80059ec:	e7df      	b.n	80059ae <_dtoa_r+0x276>
 80059ee:	bf00      	nop
 80059f0:	636f4361 	.word	0x636f4361
 80059f4:	3fd287a7 	.word	0x3fd287a7
 80059f8:	8b60c8b3 	.word	0x8b60c8b3
 80059fc:	3fc68a28 	.word	0x3fc68a28
 8005a00:	509f79fb 	.word	0x509f79fb
 8005a04:	3fd34413 	.word	0x3fd34413
 8005a08:	08007b91 	.word	0x08007b91
 8005a0c:	08007ba8 	.word	0x08007ba8
 8005a10:	7ff00000 	.word	0x7ff00000
 8005a14:	08007b8d 	.word	0x08007b8d
 8005a18:	08007b84 	.word	0x08007b84
 8005a1c:	08007b61 	.word	0x08007b61
 8005a20:	3ff80000 	.word	0x3ff80000
 8005a24:	08007c98 	.word	0x08007c98
 8005a28:	08007c03 	.word	0x08007c03
 8005a2c:	2501      	movs	r5, #1
 8005a2e:	2300      	movs	r3, #0
 8005a30:	9306      	str	r3, [sp, #24]
 8005a32:	9508      	str	r5, [sp, #32]
 8005a34:	f04f 33ff 	mov.w	r3, #4294967295
 8005a38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2312      	movs	r3, #18
 8005a40:	e7b0      	b.n	80059a4 <_dtoa_r+0x26c>
 8005a42:	2301      	movs	r3, #1
 8005a44:	9308      	str	r3, [sp, #32]
 8005a46:	e7f5      	b.n	8005a34 <_dtoa_r+0x2fc>
 8005a48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005a4e:	e7b8      	b.n	80059c2 <_dtoa_r+0x28a>
 8005a50:	3101      	adds	r1, #1
 8005a52:	6041      	str	r1, [r0, #4]
 8005a54:	0052      	lsls	r2, r2, #1
 8005a56:	e7b8      	b.n	80059ca <_dtoa_r+0x292>
 8005a58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a5a:	9a01      	ldr	r2, [sp, #4]
 8005a5c:	601a      	str	r2, [r3, #0]
 8005a5e:	9b03      	ldr	r3, [sp, #12]
 8005a60:	2b0e      	cmp	r3, #14
 8005a62:	f200 809d 	bhi.w	8005ba0 <_dtoa_r+0x468>
 8005a66:	2d00      	cmp	r5, #0
 8005a68:	f000 809a 	beq.w	8005ba0 <_dtoa_r+0x468>
 8005a6c:	9b00      	ldr	r3, [sp, #0]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	dd32      	ble.n	8005ad8 <_dtoa_r+0x3a0>
 8005a72:	4ab7      	ldr	r2, [pc, #732]	; (8005d50 <_dtoa_r+0x618>)
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005a7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a80:	9b00      	ldr	r3, [sp, #0]
 8005a82:	05d8      	lsls	r0, r3, #23
 8005a84:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005a88:	d516      	bpl.n	8005ab8 <_dtoa_r+0x380>
 8005a8a:	4bb2      	ldr	r3, [pc, #712]	; (8005d54 <_dtoa_r+0x61c>)
 8005a8c:	ec51 0b19 	vmov	r0, r1, d9
 8005a90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005a94:	f7fa fee2 	bl	800085c <__aeabi_ddiv>
 8005a98:	f007 070f 	and.w	r7, r7, #15
 8005a9c:	4682      	mov	sl, r0
 8005a9e:	468b      	mov	fp, r1
 8005aa0:	2503      	movs	r5, #3
 8005aa2:	4eac      	ldr	r6, [pc, #688]	; (8005d54 <_dtoa_r+0x61c>)
 8005aa4:	b957      	cbnz	r7, 8005abc <_dtoa_r+0x384>
 8005aa6:	4642      	mov	r2, r8
 8005aa8:	464b      	mov	r3, r9
 8005aaa:	4650      	mov	r0, sl
 8005aac:	4659      	mov	r1, fp
 8005aae:	f7fa fed5 	bl	800085c <__aeabi_ddiv>
 8005ab2:	4682      	mov	sl, r0
 8005ab4:	468b      	mov	fp, r1
 8005ab6:	e028      	b.n	8005b0a <_dtoa_r+0x3d2>
 8005ab8:	2502      	movs	r5, #2
 8005aba:	e7f2      	b.n	8005aa2 <_dtoa_r+0x36a>
 8005abc:	07f9      	lsls	r1, r7, #31
 8005abe:	d508      	bpl.n	8005ad2 <_dtoa_r+0x39a>
 8005ac0:	4640      	mov	r0, r8
 8005ac2:	4649      	mov	r1, r9
 8005ac4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005ac8:	f7fa fd9e 	bl	8000608 <__aeabi_dmul>
 8005acc:	3501      	adds	r5, #1
 8005ace:	4680      	mov	r8, r0
 8005ad0:	4689      	mov	r9, r1
 8005ad2:	107f      	asrs	r7, r7, #1
 8005ad4:	3608      	adds	r6, #8
 8005ad6:	e7e5      	b.n	8005aa4 <_dtoa_r+0x36c>
 8005ad8:	f000 809b 	beq.w	8005c12 <_dtoa_r+0x4da>
 8005adc:	9b00      	ldr	r3, [sp, #0]
 8005ade:	4f9d      	ldr	r7, [pc, #628]	; (8005d54 <_dtoa_r+0x61c>)
 8005ae0:	425e      	negs	r6, r3
 8005ae2:	4b9b      	ldr	r3, [pc, #620]	; (8005d50 <_dtoa_r+0x618>)
 8005ae4:	f006 020f 	and.w	r2, r6, #15
 8005ae8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005af0:	ec51 0b19 	vmov	r0, r1, d9
 8005af4:	f7fa fd88 	bl	8000608 <__aeabi_dmul>
 8005af8:	1136      	asrs	r6, r6, #4
 8005afa:	4682      	mov	sl, r0
 8005afc:	468b      	mov	fp, r1
 8005afe:	2300      	movs	r3, #0
 8005b00:	2502      	movs	r5, #2
 8005b02:	2e00      	cmp	r6, #0
 8005b04:	d17a      	bne.n	8005bfc <_dtoa_r+0x4c4>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1d3      	bne.n	8005ab2 <_dtoa_r+0x37a>
 8005b0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 8082 	beq.w	8005c16 <_dtoa_r+0x4de>
 8005b12:	4b91      	ldr	r3, [pc, #580]	; (8005d58 <_dtoa_r+0x620>)
 8005b14:	2200      	movs	r2, #0
 8005b16:	4650      	mov	r0, sl
 8005b18:	4659      	mov	r1, fp
 8005b1a:	f7fa ffe7 	bl	8000aec <__aeabi_dcmplt>
 8005b1e:	2800      	cmp	r0, #0
 8005b20:	d079      	beq.n	8005c16 <_dtoa_r+0x4de>
 8005b22:	9b03      	ldr	r3, [sp, #12]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d076      	beq.n	8005c16 <_dtoa_r+0x4de>
 8005b28:	9b02      	ldr	r3, [sp, #8]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	dd36      	ble.n	8005b9c <_dtoa_r+0x464>
 8005b2e:	9b00      	ldr	r3, [sp, #0]
 8005b30:	4650      	mov	r0, sl
 8005b32:	4659      	mov	r1, fp
 8005b34:	1e5f      	subs	r7, r3, #1
 8005b36:	2200      	movs	r2, #0
 8005b38:	4b88      	ldr	r3, [pc, #544]	; (8005d5c <_dtoa_r+0x624>)
 8005b3a:	f7fa fd65 	bl	8000608 <__aeabi_dmul>
 8005b3e:	9e02      	ldr	r6, [sp, #8]
 8005b40:	4682      	mov	sl, r0
 8005b42:	468b      	mov	fp, r1
 8005b44:	3501      	adds	r5, #1
 8005b46:	4628      	mov	r0, r5
 8005b48:	f7fa fcf4 	bl	8000534 <__aeabi_i2d>
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	465b      	mov	r3, fp
 8005b50:	f7fa fd5a 	bl	8000608 <__aeabi_dmul>
 8005b54:	4b82      	ldr	r3, [pc, #520]	; (8005d60 <_dtoa_r+0x628>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	f7fa fba0 	bl	800029c <__adddf3>
 8005b5c:	46d0      	mov	r8, sl
 8005b5e:	46d9      	mov	r9, fp
 8005b60:	4682      	mov	sl, r0
 8005b62:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005b66:	2e00      	cmp	r6, #0
 8005b68:	d158      	bne.n	8005c1c <_dtoa_r+0x4e4>
 8005b6a:	4b7e      	ldr	r3, [pc, #504]	; (8005d64 <_dtoa_r+0x62c>)
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	4640      	mov	r0, r8
 8005b70:	4649      	mov	r1, r9
 8005b72:	f7fa fb91 	bl	8000298 <__aeabi_dsub>
 8005b76:	4652      	mov	r2, sl
 8005b78:	465b      	mov	r3, fp
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	4689      	mov	r9, r1
 8005b7e:	f7fa ffd3 	bl	8000b28 <__aeabi_dcmpgt>
 8005b82:	2800      	cmp	r0, #0
 8005b84:	f040 8295 	bne.w	80060b2 <_dtoa_r+0x97a>
 8005b88:	4652      	mov	r2, sl
 8005b8a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005b8e:	4640      	mov	r0, r8
 8005b90:	4649      	mov	r1, r9
 8005b92:	f7fa ffab 	bl	8000aec <__aeabi_dcmplt>
 8005b96:	2800      	cmp	r0, #0
 8005b98:	f040 8289 	bne.w	80060ae <_dtoa_r+0x976>
 8005b9c:	ec5b ab19 	vmov	sl, fp, d9
 8005ba0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	f2c0 8148 	blt.w	8005e38 <_dtoa_r+0x700>
 8005ba8:	9a00      	ldr	r2, [sp, #0]
 8005baa:	2a0e      	cmp	r2, #14
 8005bac:	f300 8144 	bgt.w	8005e38 <_dtoa_r+0x700>
 8005bb0:	4b67      	ldr	r3, [pc, #412]	; (8005d50 <_dtoa_r+0x618>)
 8005bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005bb6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	f280 80d5 	bge.w	8005d6c <_dtoa_r+0x634>
 8005bc2:	9b03      	ldr	r3, [sp, #12]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f300 80d1 	bgt.w	8005d6c <_dtoa_r+0x634>
 8005bca:	f040 826f 	bne.w	80060ac <_dtoa_r+0x974>
 8005bce:	4b65      	ldr	r3, [pc, #404]	; (8005d64 <_dtoa_r+0x62c>)
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fd17 	bl	8000608 <__aeabi_dmul>
 8005bda:	4652      	mov	r2, sl
 8005bdc:	465b      	mov	r3, fp
 8005bde:	f7fa ff99 	bl	8000b14 <__aeabi_dcmpge>
 8005be2:	9e03      	ldr	r6, [sp, #12]
 8005be4:	4637      	mov	r7, r6
 8005be6:	2800      	cmp	r0, #0
 8005be8:	f040 8245 	bne.w	8006076 <_dtoa_r+0x93e>
 8005bec:	9d01      	ldr	r5, [sp, #4]
 8005bee:	2331      	movs	r3, #49	; 0x31
 8005bf0:	f805 3b01 	strb.w	r3, [r5], #1
 8005bf4:	9b00      	ldr	r3, [sp, #0]
 8005bf6:	3301      	adds	r3, #1
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	e240      	b.n	800607e <_dtoa_r+0x946>
 8005bfc:	07f2      	lsls	r2, r6, #31
 8005bfe:	d505      	bpl.n	8005c0c <_dtoa_r+0x4d4>
 8005c00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c04:	f7fa fd00 	bl	8000608 <__aeabi_dmul>
 8005c08:	3501      	adds	r5, #1
 8005c0a:	2301      	movs	r3, #1
 8005c0c:	1076      	asrs	r6, r6, #1
 8005c0e:	3708      	adds	r7, #8
 8005c10:	e777      	b.n	8005b02 <_dtoa_r+0x3ca>
 8005c12:	2502      	movs	r5, #2
 8005c14:	e779      	b.n	8005b0a <_dtoa_r+0x3d2>
 8005c16:	9f00      	ldr	r7, [sp, #0]
 8005c18:	9e03      	ldr	r6, [sp, #12]
 8005c1a:	e794      	b.n	8005b46 <_dtoa_r+0x40e>
 8005c1c:	9901      	ldr	r1, [sp, #4]
 8005c1e:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <_dtoa_r+0x618>)
 8005c20:	4431      	add	r1, r6
 8005c22:	910d      	str	r1, [sp, #52]	; 0x34
 8005c24:	9908      	ldr	r1, [sp, #32]
 8005c26:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005c2a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005c2e:	2900      	cmp	r1, #0
 8005c30:	d043      	beq.n	8005cba <_dtoa_r+0x582>
 8005c32:	494d      	ldr	r1, [pc, #308]	; (8005d68 <_dtoa_r+0x630>)
 8005c34:	2000      	movs	r0, #0
 8005c36:	f7fa fe11 	bl	800085c <__aeabi_ddiv>
 8005c3a:	4652      	mov	r2, sl
 8005c3c:	465b      	mov	r3, fp
 8005c3e:	f7fa fb2b 	bl	8000298 <__aeabi_dsub>
 8005c42:	9d01      	ldr	r5, [sp, #4]
 8005c44:	4682      	mov	sl, r0
 8005c46:	468b      	mov	fp, r1
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	f7fa ff8c 	bl	8000b68 <__aeabi_d2iz>
 8005c50:	4606      	mov	r6, r0
 8005c52:	f7fa fc6f 	bl	8000534 <__aeabi_i2d>
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	f7fa fb1b 	bl	8000298 <__aeabi_dsub>
 8005c62:	3630      	adds	r6, #48	; 0x30
 8005c64:	f805 6b01 	strb.w	r6, [r5], #1
 8005c68:	4652      	mov	r2, sl
 8005c6a:	465b      	mov	r3, fp
 8005c6c:	4680      	mov	r8, r0
 8005c6e:	4689      	mov	r9, r1
 8005c70:	f7fa ff3c 	bl	8000aec <__aeabi_dcmplt>
 8005c74:	2800      	cmp	r0, #0
 8005c76:	d163      	bne.n	8005d40 <_dtoa_r+0x608>
 8005c78:	4642      	mov	r2, r8
 8005c7a:	464b      	mov	r3, r9
 8005c7c:	4936      	ldr	r1, [pc, #216]	; (8005d58 <_dtoa_r+0x620>)
 8005c7e:	2000      	movs	r0, #0
 8005c80:	f7fa fb0a 	bl	8000298 <__aeabi_dsub>
 8005c84:	4652      	mov	r2, sl
 8005c86:	465b      	mov	r3, fp
 8005c88:	f7fa ff30 	bl	8000aec <__aeabi_dcmplt>
 8005c8c:	2800      	cmp	r0, #0
 8005c8e:	f040 80b5 	bne.w	8005dfc <_dtoa_r+0x6c4>
 8005c92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c94:	429d      	cmp	r5, r3
 8005c96:	d081      	beq.n	8005b9c <_dtoa_r+0x464>
 8005c98:	4b30      	ldr	r3, [pc, #192]	; (8005d5c <_dtoa_r+0x624>)
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	f7fa fcb2 	bl	8000608 <__aeabi_dmul>
 8005ca4:	4b2d      	ldr	r3, [pc, #180]	; (8005d5c <_dtoa_r+0x624>)
 8005ca6:	4682      	mov	sl, r0
 8005ca8:	468b      	mov	fp, r1
 8005caa:	4640      	mov	r0, r8
 8005cac:	4649      	mov	r1, r9
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f7fa fcaa 	bl	8000608 <__aeabi_dmul>
 8005cb4:	4680      	mov	r8, r0
 8005cb6:	4689      	mov	r9, r1
 8005cb8:	e7c6      	b.n	8005c48 <_dtoa_r+0x510>
 8005cba:	4650      	mov	r0, sl
 8005cbc:	4659      	mov	r1, fp
 8005cbe:	f7fa fca3 	bl	8000608 <__aeabi_dmul>
 8005cc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cc4:	9d01      	ldr	r5, [sp, #4]
 8005cc6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cc8:	4682      	mov	sl, r0
 8005cca:	468b      	mov	fp, r1
 8005ccc:	4649      	mov	r1, r9
 8005cce:	4640      	mov	r0, r8
 8005cd0:	f7fa ff4a 	bl	8000b68 <__aeabi_d2iz>
 8005cd4:	4606      	mov	r6, r0
 8005cd6:	f7fa fc2d 	bl	8000534 <__aeabi_i2d>
 8005cda:	3630      	adds	r6, #48	; 0x30
 8005cdc:	4602      	mov	r2, r0
 8005cde:	460b      	mov	r3, r1
 8005ce0:	4640      	mov	r0, r8
 8005ce2:	4649      	mov	r1, r9
 8005ce4:	f7fa fad8 	bl	8000298 <__aeabi_dsub>
 8005ce8:	f805 6b01 	strb.w	r6, [r5], #1
 8005cec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005cee:	429d      	cmp	r5, r3
 8005cf0:	4680      	mov	r8, r0
 8005cf2:	4689      	mov	r9, r1
 8005cf4:	f04f 0200 	mov.w	r2, #0
 8005cf8:	d124      	bne.n	8005d44 <_dtoa_r+0x60c>
 8005cfa:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <_dtoa_r+0x630>)
 8005cfc:	4650      	mov	r0, sl
 8005cfe:	4659      	mov	r1, fp
 8005d00:	f7fa facc 	bl	800029c <__adddf3>
 8005d04:	4602      	mov	r2, r0
 8005d06:	460b      	mov	r3, r1
 8005d08:	4640      	mov	r0, r8
 8005d0a:	4649      	mov	r1, r9
 8005d0c:	f7fa ff0c 	bl	8000b28 <__aeabi_dcmpgt>
 8005d10:	2800      	cmp	r0, #0
 8005d12:	d173      	bne.n	8005dfc <_dtoa_r+0x6c4>
 8005d14:	4652      	mov	r2, sl
 8005d16:	465b      	mov	r3, fp
 8005d18:	4913      	ldr	r1, [pc, #76]	; (8005d68 <_dtoa_r+0x630>)
 8005d1a:	2000      	movs	r0, #0
 8005d1c:	f7fa fabc 	bl	8000298 <__aeabi_dsub>
 8005d20:	4602      	mov	r2, r0
 8005d22:	460b      	mov	r3, r1
 8005d24:	4640      	mov	r0, r8
 8005d26:	4649      	mov	r1, r9
 8005d28:	f7fa fee0 	bl	8000aec <__aeabi_dcmplt>
 8005d2c:	2800      	cmp	r0, #0
 8005d2e:	f43f af35 	beq.w	8005b9c <_dtoa_r+0x464>
 8005d32:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005d34:	1e6b      	subs	r3, r5, #1
 8005d36:	930f      	str	r3, [sp, #60]	; 0x3c
 8005d38:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005d3c:	2b30      	cmp	r3, #48	; 0x30
 8005d3e:	d0f8      	beq.n	8005d32 <_dtoa_r+0x5fa>
 8005d40:	9700      	str	r7, [sp, #0]
 8005d42:	e049      	b.n	8005dd8 <_dtoa_r+0x6a0>
 8005d44:	4b05      	ldr	r3, [pc, #20]	; (8005d5c <_dtoa_r+0x624>)
 8005d46:	f7fa fc5f 	bl	8000608 <__aeabi_dmul>
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	4689      	mov	r9, r1
 8005d4e:	e7bd      	b.n	8005ccc <_dtoa_r+0x594>
 8005d50:	08007c98 	.word	0x08007c98
 8005d54:	08007c70 	.word	0x08007c70
 8005d58:	3ff00000 	.word	0x3ff00000
 8005d5c:	40240000 	.word	0x40240000
 8005d60:	401c0000 	.word	0x401c0000
 8005d64:	40140000 	.word	0x40140000
 8005d68:	3fe00000 	.word	0x3fe00000
 8005d6c:	9d01      	ldr	r5, [sp, #4]
 8005d6e:	4656      	mov	r6, sl
 8005d70:	465f      	mov	r7, fp
 8005d72:	4642      	mov	r2, r8
 8005d74:	464b      	mov	r3, r9
 8005d76:	4630      	mov	r0, r6
 8005d78:	4639      	mov	r1, r7
 8005d7a:	f7fa fd6f 	bl	800085c <__aeabi_ddiv>
 8005d7e:	f7fa fef3 	bl	8000b68 <__aeabi_d2iz>
 8005d82:	4682      	mov	sl, r0
 8005d84:	f7fa fbd6 	bl	8000534 <__aeabi_i2d>
 8005d88:	4642      	mov	r2, r8
 8005d8a:	464b      	mov	r3, r9
 8005d8c:	f7fa fc3c 	bl	8000608 <__aeabi_dmul>
 8005d90:	4602      	mov	r2, r0
 8005d92:	460b      	mov	r3, r1
 8005d94:	4630      	mov	r0, r6
 8005d96:	4639      	mov	r1, r7
 8005d98:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005d9c:	f7fa fa7c 	bl	8000298 <__aeabi_dsub>
 8005da0:	f805 6b01 	strb.w	r6, [r5], #1
 8005da4:	9e01      	ldr	r6, [sp, #4]
 8005da6:	9f03      	ldr	r7, [sp, #12]
 8005da8:	1bae      	subs	r6, r5, r6
 8005daa:	42b7      	cmp	r7, r6
 8005dac:	4602      	mov	r2, r0
 8005dae:	460b      	mov	r3, r1
 8005db0:	d135      	bne.n	8005e1e <_dtoa_r+0x6e6>
 8005db2:	f7fa fa73 	bl	800029c <__adddf3>
 8005db6:	4642      	mov	r2, r8
 8005db8:	464b      	mov	r3, r9
 8005dba:	4606      	mov	r6, r0
 8005dbc:	460f      	mov	r7, r1
 8005dbe:	f7fa feb3 	bl	8000b28 <__aeabi_dcmpgt>
 8005dc2:	b9d0      	cbnz	r0, 8005dfa <_dtoa_r+0x6c2>
 8005dc4:	4642      	mov	r2, r8
 8005dc6:	464b      	mov	r3, r9
 8005dc8:	4630      	mov	r0, r6
 8005dca:	4639      	mov	r1, r7
 8005dcc:	f7fa fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 8005dd0:	b110      	cbz	r0, 8005dd8 <_dtoa_r+0x6a0>
 8005dd2:	f01a 0f01 	tst.w	sl, #1
 8005dd6:	d110      	bne.n	8005dfa <_dtoa_r+0x6c2>
 8005dd8:	4620      	mov	r0, r4
 8005dda:	ee18 1a10 	vmov	r1, s16
 8005dde:	f000 faf3 	bl	80063c8 <_Bfree>
 8005de2:	2300      	movs	r3, #0
 8005de4:	9800      	ldr	r0, [sp, #0]
 8005de6:	702b      	strb	r3, [r5, #0]
 8005de8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dea:	3001      	adds	r0, #1
 8005dec:	6018      	str	r0, [r3, #0]
 8005dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	f43f acf1 	beq.w	80057d8 <_dtoa_r+0xa0>
 8005df6:	601d      	str	r5, [r3, #0]
 8005df8:	e4ee      	b.n	80057d8 <_dtoa_r+0xa0>
 8005dfa:	9f00      	ldr	r7, [sp, #0]
 8005dfc:	462b      	mov	r3, r5
 8005dfe:	461d      	mov	r5, r3
 8005e00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005e04:	2a39      	cmp	r2, #57	; 0x39
 8005e06:	d106      	bne.n	8005e16 <_dtoa_r+0x6de>
 8005e08:	9a01      	ldr	r2, [sp, #4]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d1f7      	bne.n	8005dfe <_dtoa_r+0x6c6>
 8005e0e:	9901      	ldr	r1, [sp, #4]
 8005e10:	2230      	movs	r2, #48	; 0x30
 8005e12:	3701      	adds	r7, #1
 8005e14:	700a      	strb	r2, [r1, #0]
 8005e16:	781a      	ldrb	r2, [r3, #0]
 8005e18:	3201      	adds	r2, #1
 8005e1a:	701a      	strb	r2, [r3, #0]
 8005e1c:	e790      	b.n	8005d40 <_dtoa_r+0x608>
 8005e1e:	4ba6      	ldr	r3, [pc, #664]	; (80060b8 <_dtoa_r+0x980>)
 8005e20:	2200      	movs	r2, #0
 8005e22:	f7fa fbf1 	bl	8000608 <__aeabi_dmul>
 8005e26:	2200      	movs	r2, #0
 8005e28:	2300      	movs	r3, #0
 8005e2a:	4606      	mov	r6, r0
 8005e2c:	460f      	mov	r7, r1
 8005e2e:	f7fa fe53 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d09d      	beq.n	8005d72 <_dtoa_r+0x63a>
 8005e36:	e7cf      	b.n	8005dd8 <_dtoa_r+0x6a0>
 8005e38:	9a08      	ldr	r2, [sp, #32]
 8005e3a:	2a00      	cmp	r2, #0
 8005e3c:	f000 80d7 	beq.w	8005fee <_dtoa_r+0x8b6>
 8005e40:	9a06      	ldr	r2, [sp, #24]
 8005e42:	2a01      	cmp	r2, #1
 8005e44:	f300 80ba 	bgt.w	8005fbc <_dtoa_r+0x884>
 8005e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	f000 80b2 	beq.w	8005fb4 <_dtoa_r+0x87c>
 8005e50:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005e54:	9e07      	ldr	r6, [sp, #28]
 8005e56:	9d04      	ldr	r5, [sp, #16]
 8005e58:	9a04      	ldr	r2, [sp, #16]
 8005e5a:	441a      	add	r2, r3
 8005e5c:	9204      	str	r2, [sp, #16]
 8005e5e:	9a05      	ldr	r2, [sp, #20]
 8005e60:	2101      	movs	r1, #1
 8005e62:	441a      	add	r2, r3
 8005e64:	4620      	mov	r0, r4
 8005e66:	9205      	str	r2, [sp, #20]
 8005e68:	f000 fb66 	bl	8006538 <__i2b>
 8005e6c:	4607      	mov	r7, r0
 8005e6e:	2d00      	cmp	r5, #0
 8005e70:	dd0c      	ble.n	8005e8c <_dtoa_r+0x754>
 8005e72:	9b05      	ldr	r3, [sp, #20]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	dd09      	ble.n	8005e8c <_dtoa_r+0x754>
 8005e78:	42ab      	cmp	r3, r5
 8005e7a:	9a04      	ldr	r2, [sp, #16]
 8005e7c:	bfa8      	it	ge
 8005e7e:	462b      	movge	r3, r5
 8005e80:	1ad2      	subs	r2, r2, r3
 8005e82:	9204      	str	r2, [sp, #16]
 8005e84:	9a05      	ldr	r2, [sp, #20]
 8005e86:	1aed      	subs	r5, r5, r3
 8005e88:	1ad3      	subs	r3, r2, r3
 8005e8a:	9305      	str	r3, [sp, #20]
 8005e8c:	9b07      	ldr	r3, [sp, #28]
 8005e8e:	b31b      	cbz	r3, 8005ed8 <_dtoa_r+0x7a0>
 8005e90:	9b08      	ldr	r3, [sp, #32]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80af 	beq.w	8005ff6 <_dtoa_r+0x8be>
 8005e98:	2e00      	cmp	r6, #0
 8005e9a:	dd13      	ble.n	8005ec4 <_dtoa_r+0x78c>
 8005e9c:	4639      	mov	r1, r7
 8005e9e:	4632      	mov	r2, r6
 8005ea0:	4620      	mov	r0, r4
 8005ea2:	f000 fc09 	bl	80066b8 <__pow5mult>
 8005ea6:	ee18 2a10 	vmov	r2, s16
 8005eaa:	4601      	mov	r1, r0
 8005eac:	4607      	mov	r7, r0
 8005eae:	4620      	mov	r0, r4
 8005eb0:	f000 fb58 	bl	8006564 <__multiply>
 8005eb4:	ee18 1a10 	vmov	r1, s16
 8005eb8:	4680      	mov	r8, r0
 8005eba:	4620      	mov	r0, r4
 8005ebc:	f000 fa84 	bl	80063c8 <_Bfree>
 8005ec0:	ee08 8a10 	vmov	s16, r8
 8005ec4:	9b07      	ldr	r3, [sp, #28]
 8005ec6:	1b9a      	subs	r2, r3, r6
 8005ec8:	d006      	beq.n	8005ed8 <_dtoa_r+0x7a0>
 8005eca:	ee18 1a10 	vmov	r1, s16
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 fbf2 	bl	80066b8 <__pow5mult>
 8005ed4:	ee08 0a10 	vmov	s16, r0
 8005ed8:	2101      	movs	r1, #1
 8005eda:	4620      	mov	r0, r4
 8005edc:	f000 fb2c 	bl	8006538 <__i2b>
 8005ee0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	f340 8088 	ble.w	8005ffa <_dtoa_r+0x8c2>
 8005eea:	461a      	mov	r2, r3
 8005eec:	4601      	mov	r1, r0
 8005eee:	4620      	mov	r0, r4
 8005ef0:	f000 fbe2 	bl	80066b8 <__pow5mult>
 8005ef4:	9b06      	ldr	r3, [sp, #24]
 8005ef6:	2b01      	cmp	r3, #1
 8005ef8:	4606      	mov	r6, r0
 8005efa:	f340 8081 	ble.w	8006000 <_dtoa_r+0x8c8>
 8005efe:	f04f 0800 	mov.w	r8, #0
 8005f02:	6933      	ldr	r3, [r6, #16]
 8005f04:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005f08:	6918      	ldr	r0, [r3, #16]
 8005f0a:	f000 fac5 	bl	8006498 <__hi0bits>
 8005f0e:	f1c0 0020 	rsb	r0, r0, #32
 8005f12:	9b05      	ldr	r3, [sp, #20]
 8005f14:	4418      	add	r0, r3
 8005f16:	f010 001f 	ands.w	r0, r0, #31
 8005f1a:	f000 8092 	beq.w	8006042 <_dtoa_r+0x90a>
 8005f1e:	f1c0 0320 	rsb	r3, r0, #32
 8005f22:	2b04      	cmp	r3, #4
 8005f24:	f340 808a 	ble.w	800603c <_dtoa_r+0x904>
 8005f28:	f1c0 001c 	rsb	r0, r0, #28
 8005f2c:	9b04      	ldr	r3, [sp, #16]
 8005f2e:	4403      	add	r3, r0
 8005f30:	9304      	str	r3, [sp, #16]
 8005f32:	9b05      	ldr	r3, [sp, #20]
 8005f34:	4403      	add	r3, r0
 8005f36:	4405      	add	r5, r0
 8005f38:	9305      	str	r3, [sp, #20]
 8005f3a:	9b04      	ldr	r3, [sp, #16]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	dd07      	ble.n	8005f50 <_dtoa_r+0x818>
 8005f40:	ee18 1a10 	vmov	r1, s16
 8005f44:	461a      	mov	r2, r3
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 fc10 	bl	800676c <__lshift>
 8005f4c:	ee08 0a10 	vmov	s16, r0
 8005f50:	9b05      	ldr	r3, [sp, #20]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	dd05      	ble.n	8005f62 <_dtoa_r+0x82a>
 8005f56:	4631      	mov	r1, r6
 8005f58:	461a      	mov	r2, r3
 8005f5a:	4620      	mov	r0, r4
 8005f5c:	f000 fc06 	bl	800676c <__lshift>
 8005f60:	4606      	mov	r6, r0
 8005f62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d06e      	beq.n	8006046 <_dtoa_r+0x90e>
 8005f68:	ee18 0a10 	vmov	r0, s16
 8005f6c:	4631      	mov	r1, r6
 8005f6e:	f000 fc6d 	bl	800684c <__mcmp>
 8005f72:	2800      	cmp	r0, #0
 8005f74:	da67      	bge.n	8006046 <_dtoa_r+0x90e>
 8005f76:	9b00      	ldr	r3, [sp, #0]
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	ee18 1a10 	vmov	r1, s16
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	220a      	movs	r2, #10
 8005f82:	2300      	movs	r3, #0
 8005f84:	4620      	mov	r0, r4
 8005f86:	f000 fa41 	bl	800640c <__multadd>
 8005f8a:	9b08      	ldr	r3, [sp, #32]
 8005f8c:	ee08 0a10 	vmov	s16, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 81b1 	beq.w	80062f8 <_dtoa_r+0xbc0>
 8005f96:	2300      	movs	r3, #0
 8005f98:	4639      	mov	r1, r7
 8005f9a:	220a      	movs	r2, #10
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 fa35 	bl	800640c <__multadd>
 8005fa2:	9b02      	ldr	r3, [sp, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	4607      	mov	r7, r0
 8005fa8:	f300 808e 	bgt.w	80060c8 <_dtoa_r+0x990>
 8005fac:	9b06      	ldr	r3, [sp, #24]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	dc51      	bgt.n	8006056 <_dtoa_r+0x91e>
 8005fb2:	e089      	b.n	80060c8 <_dtoa_r+0x990>
 8005fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005fb6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005fba:	e74b      	b.n	8005e54 <_dtoa_r+0x71c>
 8005fbc:	9b03      	ldr	r3, [sp, #12]
 8005fbe:	1e5e      	subs	r6, r3, #1
 8005fc0:	9b07      	ldr	r3, [sp, #28]
 8005fc2:	42b3      	cmp	r3, r6
 8005fc4:	bfbf      	itttt	lt
 8005fc6:	9b07      	ldrlt	r3, [sp, #28]
 8005fc8:	9607      	strlt	r6, [sp, #28]
 8005fca:	1af2      	sublt	r2, r6, r3
 8005fcc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005fce:	bfb6      	itet	lt
 8005fd0:	189b      	addlt	r3, r3, r2
 8005fd2:	1b9e      	subge	r6, r3, r6
 8005fd4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005fd6:	9b03      	ldr	r3, [sp, #12]
 8005fd8:	bfb8      	it	lt
 8005fda:	2600      	movlt	r6, #0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	bfb7      	itett	lt
 8005fe0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005fe4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005fe8:	1a9d      	sublt	r5, r3, r2
 8005fea:	2300      	movlt	r3, #0
 8005fec:	e734      	b.n	8005e58 <_dtoa_r+0x720>
 8005fee:	9e07      	ldr	r6, [sp, #28]
 8005ff0:	9d04      	ldr	r5, [sp, #16]
 8005ff2:	9f08      	ldr	r7, [sp, #32]
 8005ff4:	e73b      	b.n	8005e6e <_dtoa_r+0x736>
 8005ff6:	9a07      	ldr	r2, [sp, #28]
 8005ff8:	e767      	b.n	8005eca <_dtoa_r+0x792>
 8005ffa:	9b06      	ldr	r3, [sp, #24]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	dc18      	bgt.n	8006032 <_dtoa_r+0x8fa>
 8006000:	f1ba 0f00 	cmp.w	sl, #0
 8006004:	d115      	bne.n	8006032 <_dtoa_r+0x8fa>
 8006006:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800600a:	b993      	cbnz	r3, 8006032 <_dtoa_r+0x8fa>
 800600c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006010:	0d1b      	lsrs	r3, r3, #20
 8006012:	051b      	lsls	r3, r3, #20
 8006014:	b183      	cbz	r3, 8006038 <_dtoa_r+0x900>
 8006016:	9b04      	ldr	r3, [sp, #16]
 8006018:	3301      	adds	r3, #1
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	9b05      	ldr	r3, [sp, #20]
 800601e:	3301      	adds	r3, #1
 8006020:	9305      	str	r3, [sp, #20]
 8006022:	f04f 0801 	mov.w	r8, #1
 8006026:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006028:	2b00      	cmp	r3, #0
 800602a:	f47f af6a 	bne.w	8005f02 <_dtoa_r+0x7ca>
 800602e:	2001      	movs	r0, #1
 8006030:	e76f      	b.n	8005f12 <_dtoa_r+0x7da>
 8006032:	f04f 0800 	mov.w	r8, #0
 8006036:	e7f6      	b.n	8006026 <_dtoa_r+0x8ee>
 8006038:	4698      	mov	r8, r3
 800603a:	e7f4      	b.n	8006026 <_dtoa_r+0x8ee>
 800603c:	f43f af7d 	beq.w	8005f3a <_dtoa_r+0x802>
 8006040:	4618      	mov	r0, r3
 8006042:	301c      	adds	r0, #28
 8006044:	e772      	b.n	8005f2c <_dtoa_r+0x7f4>
 8006046:	9b03      	ldr	r3, [sp, #12]
 8006048:	2b00      	cmp	r3, #0
 800604a:	dc37      	bgt.n	80060bc <_dtoa_r+0x984>
 800604c:	9b06      	ldr	r3, [sp, #24]
 800604e:	2b02      	cmp	r3, #2
 8006050:	dd34      	ble.n	80060bc <_dtoa_r+0x984>
 8006052:	9b03      	ldr	r3, [sp, #12]
 8006054:	9302      	str	r3, [sp, #8]
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	b96b      	cbnz	r3, 8006076 <_dtoa_r+0x93e>
 800605a:	4631      	mov	r1, r6
 800605c:	2205      	movs	r2, #5
 800605e:	4620      	mov	r0, r4
 8006060:	f000 f9d4 	bl	800640c <__multadd>
 8006064:	4601      	mov	r1, r0
 8006066:	4606      	mov	r6, r0
 8006068:	ee18 0a10 	vmov	r0, s16
 800606c:	f000 fbee 	bl	800684c <__mcmp>
 8006070:	2800      	cmp	r0, #0
 8006072:	f73f adbb 	bgt.w	8005bec <_dtoa_r+0x4b4>
 8006076:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006078:	9d01      	ldr	r5, [sp, #4]
 800607a:	43db      	mvns	r3, r3
 800607c:	9300      	str	r3, [sp, #0]
 800607e:	f04f 0800 	mov.w	r8, #0
 8006082:	4631      	mov	r1, r6
 8006084:	4620      	mov	r0, r4
 8006086:	f000 f99f 	bl	80063c8 <_Bfree>
 800608a:	2f00      	cmp	r7, #0
 800608c:	f43f aea4 	beq.w	8005dd8 <_dtoa_r+0x6a0>
 8006090:	f1b8 0f00 	cmp.w	r8, #0
 8006094:	d005      	beq.n	80060a2 <_dtoa_r+0x96a>
 8006096:	45b8      	cmp	r8, r7
 8006098:	d003      	beq.n	80060a2 <_dtoa_r+0x96a>
 800609a:	4641      	mov	r1, r8
 800609c:	4620      	mov	r0, r4
 800609e:	f000 f993 	bl	80063c8 <_Bfree>
 80060a2:	4639      	mov	r1, r7
 80060a4:	4620      	mov	r0, r4
 80060a6:	f000 f98f 	bl	80063c8 <_Bfree>
 80060aa:	e695      	b.n	8005dd8 <_dtoa_r+0x6a0>
 80060ac:	2600      	movs	r6, #0
 80060ae:	4637      	mov	r7, r6
 80060b0:	e7e1      	b.n	8006076 <_dtoa_r+0x93e>
 80060b2:	9700      	str	r7, [sp, #0]
 80060b4:	4637      	mov	r7, r6
 80060b6:	e599      	b.n	8005bec <_dtoa_r+0x4b4>
 80060b8:	40240000 	.word	0x40240000
 80060bc:	9b08      	ldr	r3, [sp, #32]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	f000 80ca 	beq.w	8006258 <_dtoa_r+0xb20>
 80060c4:	9b03      	ldr	r3, [sp, #12]
 80060c6:	9302      	str	r3, [sp, #8]
 80060c8:	2d00      	cmp	r5, #0
 80060ca:	dd05      	ble.n	80060d8 <_dtoa_r+0x9a0>
 80060cc:	4639      	mov	r1, r7
 80060ce:	462a      	mov	r2, r5
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 fb4b 	bl	800676c <__lshift>
 80060d6:	4607      	mov	r7, r0
 80060d8:	f1b8 0f00 	cmp.w	r8, #0
 80060dc:	d05b      	beq.n	8006196 <_dtoa_r+0xa5e>
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4620      	mov	r0, r4
 80060e2:	f000 f931 	bl	8006348 <_Balloc>
 80060e6:	4605      	mov	r5, r0
 80060e8:	b928      	cbnz	r0, 80060f6 <_dtoa_r+0x9be>
 80060ea:	4b87      	ldr	r3, [pc, #540]	; (8006308 <_dtoa_r+0xbd0>)
 80060ec:	4602      	mov	r2, r0
 80060ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80060f2:	f7ff bb3b 	b.w	800576c <_dtoa_r+0x34>
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	3202      	adds	r2, #2
 80060fa:	0092      	lsls	r2, r2, #2
 80060fc:	f107 010c 	add.w	r1, r7, #12
 8006100:	300c      	adds	r0, #12
 8006102:	f000 f913 	bl	800632c <memcpy>
 8006106:	2201      	movs	r2, #1
 8006108:	4629      	mov	r1, r5
 800610a:	4620      	mov	r0, r4
 800610c:	f000 fb2e 	bl	800676c <__lshift>
 8006110:	9b01      	ldr	r3, [sp, #4]
 8006112:	f103 0901 	add.w	r9, r3, #1
 8006116:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800611a:	4413      	add	r3, r2
 800611c:	9305      	str	r3, [sp, #20]
 800611e:	f00a 0301 	and.w	r3, sl, #1
 8006122:	46b8      	mov	r8, r7
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	4607      	mov	r7, r0
 8006128:	4631      	mov	r1, r6
 800612a:	ee18 0a10 	vmov	r0, s16
 800612e:	f7ff fa77 	bl	8005620 <quorem>
 8006132:	4641      	mov	r1, r8
 8006134:	9002      	str	r0, [sp, #8]
 8006136:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800613a:	ee18 0a10 	vmov	r0, s16
 800613e:	f000 fb85 	bl	800684c <__mcmp>
 8006142:	463a      	mov	r2, r7
 8006144:	9003      	str	r0, [sp, #12]
 8006146:	4631      	mov	r1, r6
 8006148:	4620      	mov	r0, r4
 800614a:	f000 fb9b 	bl	8006884 <__mdiff>
 800614e:	68c2      	ldr	r2, [r0, #12]
 8006150:	f109 3bff 	add.w	fp, r9, #4294967295
 8006154:	4605      	mov	r5, r0
 8006156:	bb02      	cbnz	r2, 800619a <_dtoa_r+0xa62>
 8006158:	4601      	mov	r1, r0
 800615a:	ee18 0a10 	vmov	r0, s16
 800615e:	f000 fb75 	bl	800684c <__mcmp>
 8006162:	4602      	mov	r2, r0
 8006164:	4629      	mov	r1, r5
 8006166:	4620      	mov	r0, r4
 8006168:	9207      	str	r2, [sp, #28]
 800616a:	f000 f92d 	bl	80063c8 <_Bfree>
 800616e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006172:	ea43 0102 	orr.w	r1, r3, r2
 8006176:	9b04      	ldr	r3, [sp, #16]
 8006178:	430b      	orrs	r3, r1
 800617a:	464d      	mov	r5, r9
 800617c:	d10f      	bne.n	800619e <_dtoa_r+0xa66>
 800617e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006182:	d02a      	beq.n	80061da <_dtoa_r+0xaa2>
 8006184:	9b03      	ldr	r3, [sp, #12]
 8006186:	2b00      	cmp	r3, #0
 8006188:	dd02      	ble.n	8006190 <_dtoa_r+0xa58>
 800618a:	9b02      	ldr	r3, [sp, #8]
 800618c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006190:	f88b a000 	strb.w	sl, [fp]
 8006194:	e775      	b.n	8006082 <_dtoa_r+0x94a>
 8006196:	4638      	mov	r0, r7
 8006198:	e7ba      	b.n	8006110 <_dtoa_r+0x9d8>
 800619a:	2201      	movs	r2, #1
 800619c:	e7e2      	b.n	8006164 <_dtoa_r+0xa2c>
 800619e:	9b03      	ldr	r3, [sp, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	db04      	blt.n	80061ae <_dtoa_r+0xa76>
 80061a4:	9906      	ldr	r1, [sp, #24]
 80061a6:	430b      	orrs	r3, r1
 80061a8:	9904      	ldr	r1, [sp, #16]
 80061aa:	430b      	orrs	r3, r1
 80061ac:	d122      	bne.n	80061f4 <_dtoa_r+0xabc>
 80061ae:	2a00      	cmp	r2, #0
 80061b0:	ddee      	ble.n	8006190 <_dtoa_r+0xa58>
 80061b2:	ee18 1a10 	vmov	r1, s16
 80061b6:	2201      	movs	r2, #1
 80061b8:	4620      	mov	r0, r4
 80061ba:	f000 fad7 	bl	800676c <__lshift>
 80061be:	4631      	mov	r1, r6
 80061c0:	ee08 0a10 	vmov	s16, r0
 80061c4:	f000 fb42 	bl	800684c <__mcmp>
 80061c8:	2800      	cmp	r0, #0
 80061ca:	dc03      	bgt.n	80061d4 <_dtoa_r+0xa9c>
 80061cc:	d1e0      	bne.n	8006190 <_dtoa_r+0xa58>
 80061ce:	f01a 0f01 	tst.w	sl, #1
 80061d2:	d0dd      	beq.n	8006190 <_dtoa_r+0xa58>
 80061d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80061d8:	d1d7      	bne.n	800618a <_dtoa_r+0xa52>
 80061da:	2339      	movs	r3, #57	; 0x39
 80061dc:	f88b 3000 	strb.w	r3, [fp]
 80061e0:	462b      	mov	r3, r5
 80061e2:	461d      	mov	r5, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80061ea:	2a39      	cmp	r2, #57	; 0x39
 80061ec:	d071      	beq.n	80062d2 <_dtoa_r+0xb9a>
 80061ee:	3201      	adds	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	e746      	b.n	8006082 <_dtoa_r+0x94a>
 80061f4:	2a00      	cmp	r2, #0
 80061f6:	dd07      	ble.n	8006208 <_dtoa_r+0xad0>
 80061f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80061fc:	d0ed      	beq.n	80061da <_dtoa_r+0xaa2>
 80061fe:	f10a 0301 	add.w	r3, sl, #1
 8006202:	f88b 3000 	strb.w	r3, [fp]
 8006206:	e73c      	b.n	8006082 <_dtoa_r+0x94a>
 8006208:	9b05      	ldr	r3, [sp, #20]
 800620a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800620e:	4599      	cmp	r9, r3
 8006210:	d047      	beq.n	80062a2 <_dtoa_r+0xb6a>
 8006212:	ee18 1a10 	vmov	r1, s16
 8006216:	2300      	movs	r3, #0
 8006218:	220a      	movs	r2, #10
 800621a:	4620      	mov	r0, r4
 800621c:	f000 f8f6 	bl	800640c <__multadd>
 8006220:	45b8      	cmp	r8, r7
 8006222:	ee08 0a10 	vmov	s16, r0
 8006226:	f04f 0300 	mov.w	r3, #0
 800622a:	f04f 020a 	mov.w	r2, #10
 800622e:	4641      	mov	r1, r8
 8006230:	4620      	mov	r0, r4
 8006232:	d106      	bne.n	8006242 <_dtoa_r+0xb0a>
 8006234:	f000 f8ea 	bl	800640c <__multadd>
 8006238:	4680      	mov	r8, r0
 800623a:	4607      	mov	r7, r0
 800623c:	f109 0901 	add.w	r9, r9, #1
 8006240:	e772      	b.n	8006128 <_dtoa_r+0x9f0>
 8006242:	f000 f8e3 	bl	800640c <__multadd>
 8006246:	4639      	mov	r1, r7
 8006248:	4680      	mov	r8, r0
 800624a:	2300      	movs	r3, #0
 800624c:	220a      	movs	r2, #10
 800624e:	4620      	mov	r0, r4
 8006250:	f000 f8dc 	bl	800640c <__multadd>
 8006254:	4607      	mov	r7, r0
 8006256:	e7f1      	b.n	800623c <_dtoa_r+0xb04>
 8006258:	9b03      	ldr	r3, [sp, #12]
 800625a:	9302      	str	r3, [sp, #8]
 800625c:	9d01      	ldr	r5, [sp, #4]
 800625e:	ee18 0a10 	vmov	r0, s16
 8006262:	4631      	mov	r1, r6
 8006264:	f7ff f9dc 	bl	8005620 <quorem>
 8006268:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800626c:	9b01      	ldr	r3, [sp, #4]
 800626e:	f805 ab01 	strb.w	sl, [r5], #1
 8006272:	1aea      	subs	r2, r5, r3
 8006274:	9b02      	ldr	r3, [sp, #8]
 8006276:	4293      	cmp	r3, r2
 8006278:	dd09      	ble.n	800628e <_dtoa_r+0xb56>
 800627a:	ee18 1a10 	vmov	r1, s16
 800627e:	2300      	movs	r3, #0
 8006280:	220a      	movs	r2, #10
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f8c2 	bl	800640c <__multadd>
 8006288:	ee08 0a10 	vmov	s16, r0
 800628c:	e7e7      	b.n	800625e <_dtoa_r+0xb26>
 800628e:	9b02      	ldr	r3, [sp, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	bfc8      	it	gt
 8006294:	461d      	movgt	r5, r3
 8006296:	9b01      	ldr	r3, [sp, #4]
 8006298:	bfd8      	it	le
 800629a:	2501      	movle	r5, #1
 800629c:	441d      	add	r5, r3
 800629e:	f04f 0800 	mov.w	r8, #0
 80062a2:	ee18 1a10 	vmov	r1, s16
 80062a6:	2201      	movs	r2, #1
 80062a8:	4620      	mov	r0, r4
 80062aa:	f000 fa5f 	bl	800676c <__lshift>
 80062ae:	4631      	mov	r1, r6
 80062b0:	ee08 0a10 	vmov	s16, r0
 80062b4:	f000 faca 	bl	800684c <__mcmp>
 80062b8:	2800      	cmp	r0, #0
 80062ba:	dc91      	bgt.n	80061e0 <_dtoa_r+0xaa8>
 80062bc:	d102      	bne.n	80062c4 <_dtoa_r+0xb8c>
 80062be:	f01a 0f01 	tst.w	sl, #1
 80062c2:	d18d      	bne.n	80061e0 <_dtoa_r+0xaa8>
 80062c4:	462b      	mov	r3, r5
 80062c6:	461d      	mov	r5, r3
 80062c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062cc:	2a30      	cmp	r2, #48	; 0x30
 80062ce:	d0fa      	beq.n	80062c6 <_dtoa_r+0xb8e>
 80062d0:	e6d7      	b.n	8006082 <_dtoa_r+0x94a>
 80062d2:	9a01      	ldr	r2, [sp, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d184      	bne.n	80061e2 <_dtoa_r+0xaaa>
 80062d8:	9b00      	ldr	r3, [sp, #0]
 80062da:	3301      	adds	r3, #1
 80062dc:	9300      	str	r3, [sp, #0]
 80062de:	2331      	movs	r3, #49	; 0x31
 80062e0:	7013      	strb	r3, [r2, #0]
 80062e2:	e6ce      	b.n	8006082 <_dtoa_r+0x94a>
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <_dtoa_r+0xbd4>)
 80062e6:	f7ff ba95 	b.w	8005814 <_dtoa_r+0xdc>
 80062ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f47f aa6e 	bne.w	80057ce <_dtoa_r+0x96>
 80062f2:	4b07      	ldr	r3, [pc, #28]	; (8006310 <_dtoa_r+0xbd8>)
 80062f4:	f7ff ba8e 	b.w	8005814 <_dtoa_r+0xdc>
 80062f8:	9b02      	ldr	r3, [sp, #8]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	dcae      	bgt.n	800625c <_dtoa_r+0xb24>
 80062fe:	9b06      	ldr	r3, [sp, #24]
 8006300:	2b02      	cmp	r3, #2
 8006302:	f73f aea8 	bgt.w	8006056 <_dtoa_r+0x91e>
 8006306:	e7a9      	b.n	800625c <_dtoa_r+0xb24>
 8006308:	08007c03 	.word	0x08007c03
 800630c:	08007b60 	.word	0x08007b60
 8006310:	08007b84 	.word	0x08007b84

08006314 <_localeconv_r>:
 8006314:	4800      	ldr	r0, [pc, #0]	; (8006318 <_localeconv_r+0x4>)
 8006316:	4770      	bx	lr
 8006318:	20000160 	.word	0x20000160

0800631c <malloc>:
 800631c:	4b02      	ldr	r3, [pc, #8]	; (8006328 <malloc+0xc>)
 800631e:	4601      	mov	r1, r0
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	f000 bc17 	b.w	8006b54 <_malloc_r>
 8006326:	bf00      	nop
 8006328:	2000000c 	.word	0x2000000c

0800632c <memcpy>:
 800632c:	440a      	add	r2, r1
 800632e:	4291      	cmp	r1, r2
 8006330:	f100 33ff 	add.w	r3, r0, #4294967295
 8006334:	d100      	bne.n	8006338 <memcpy+0xc>
 8006336:	4770      	bx	lr
 8006338:	b510      	push	{r4, lr}
 800633a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800633e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006342:	4291      	cmp	r1, r2
 8006344:	d1f9      	bne.n	800633a <memcpy+0xe>
 8006346:	bd10      	pop	{r4, pc}

08006348 <_Balloc>:
 8006348:	b570      	push	{r4, r5, r6, lr}
 800634a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800634c:	4604      	mov	r4, r0
 800634e:	460d      	mov	r5, r1
 8006350:	b976      	cbnz	r6, 8006370 <_Balloc+0x28>
 8006352:	2010      	movs	r0, #16
 8006354:	f7ff ffe2 	bl	800631c <malloc>
 8006358:	4602      	mov	r2, r0
 800635a:	6260      	str	r0, [r4, #36]	; 0x24
 800635c:	b920      	cbnz	r0, 8006368 <_Balloc+0x20>
 800635e:	4b18      	ldr	r3, [pc, #96]	; (80063c0 <_Balloc+0x78>)
 8006360:	4818      	ldr	r0, [pc, #96]	; (80063c4 <_Balloc+0x7c>)
 8006362:	2166      	movs	r1, #102	; 0x66
 8006364:	f000 fdd6 	bl	8006f14 <__assert_func>
 8006368:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800636c:	6006      	str	r6, [r0, #0]
 800636e:	60c6      	str	r6, [r0, #12]
 8006370:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006372:	68f3      	ldr	r3, [r6, #12]
 8006374:	b183      	cbz	r3, 8006398 <_Balloc+0x50>
 8006376:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800637e:	b9b8      	cbnz	r0, 80063b0 <_Balloc+0x68>
 8006380:	2101      	movs	r1, #1
 8006382:	fa01 f605 	lsl.w	r6, r1, r5
 8006386:	1d72      	adds	r2, r6, #5
 8006388:	0092      	lsls	r2, r2, #2
 800638a:	4620      	mov	r0, r4
 800638c:	f000 fb60 	bl	8006a50 <_calloc_r>
 8006390:	b160      	cbz	r0, 80063ac <_Balloc+0x64>
 8006392:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006396:	e00e      	b.n	80063b6 <_Balloc+0x6e>
 8006398:	2221      	movs	r2, #33	; 0x21
 800639a:	2104      	movs	r1, #4
 800639c:	4620      	mov	r0, r4
 800639e:	f000 fb57 	bl	8006a50 <_calloc_r>
 80063a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063a4:	60f0      	str	r0, [r6, #12]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e4      	bne.n	8006376 <_Balloc+0x2e>
 80063ac:	2000      	movs	r0, #0
 80063ae:	bd70      	pop	{r4, r5, r6, pc}
 80063b0:	6802      	ldr	r2, [r0, #0]
 80063b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80063b6:	2300      	movs	r3, #0
 80063b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80063bc:	e7f7      	b.n	80063ae <_Balloc+0x66>
 80063be:	bf00      	nop
 80063c0:	08007b91 	.word	0x08007b91
 80063c4:	08007c14 	.word	0x08007c14

080063c8 <_Bfree>:
 80063c8:	b570      	push	{r4, r5, r6, lr}
 80063ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063cc:	4605      	mov	r5, r0
 80063ce:	460c      	mov	r4, r1
 80063d0:	b976      	cbnz	r6, 80063f0 <_Bfree+0x28>
 80063d2:	2010      	movs	r0, #16
 80063d4:	f7ff ffa2 	bl	800631c <malloc>
 80063d8:	4602      	mov	r2, r0
 80063da:	6268      	str	r0, [r5, #36]	; 0x24
 80063dc:	b920      	cbnz	r0, 80063e8 <_Bfree+0x20>
 80063de:	4b09      	ldr	r3, [pc, #36]	; (8006404 <_Bfree+0x3c>)
 80063e0:	4809      	ldr	r0, [pc, #36]	; (8006408 <_Bfree+0x40>)
 80063e2:	218a      	movs	r1, #138	; 0x8a
 80063e4:	f000 fd96 	bl	8006f14 <__assert_func>
 80063e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063ec:	6006      	str	r6, [r0, #0]
 80063ee:	60c6      	str	r6, [r0, #12]
 80063f0:	b13c      	cbz	r4, 8006402 <_Bfree+0x3a>
 80063f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063f4:	6862      	ldr	r2, [r4, #4]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063fc:	6021      	str	r1, [r4, #0]
 80063fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006402:	bd70      	pop	{r4, r5, r6, pc}
 8006404:	08007b91 	.word	0x08007b91
 8006408:	08007c14 	.word	0x08007c14

0800640c <__multadd>:
 800640c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006410:	690d      	ldr	r5, [r1, #16]
 8006412:	4607      	mov	r7, r0
 8006414:	460c      	mov	r4, r1
 8006416:	461e      	mov	r6, r3
 8006418:	f101 0c14 	add.w	ip, r1, #20
 800641c:	2000      	movs	r0, #0
 800641e:	f8dc 3000 	ldr.w	r3, [ip]
 8006422:	b299      	uxth	r1, r3
 8006424:	fb02 6101 	mla	r1, r2, r1, r6
 8006428:	0c1e      	lsrs	r6, r3, #16
 800642a:	0c0b      	lsrs	r3, r1, #16
 800642c:	fb02 3306 	mla	r3, r2, r6, r3
 8006430:	b289      	uxth	r1, r1
 8006432:	3001      	adds	r0, #1
 8006434:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006438:	4285      	cmp	r5, r0
 800643a:	f84c 1b04 	str.w	r1, [ip], #4
 800643e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006442:	dcec      	bgt.n	800641e <__multadd+0x12>
 8006444:	b30e      	cbz	r6, 800648a <__multadd+0x7e>
 8006446:	68a3      	ldr	r3, [r4, #8]
 8006448:	42ab      	cmp	r3, r5
 800644a:	dc19      	bgt.n	8006480 <__multadd+0x74>
 800644c:	6861      	ldr	r1, [r4, #4]
 800644e:	4638      	mov	r0, r7
 8006450:	3101      	adds	r1, #1
 8006452:	f7ff ff79 	bl	8006348 <_Balloc>
 8006456:	4680      	mov	r8, r0
 8006458:	b928      	cbnz	r0, 8006466 <__multadd+0x5a>
 800645a:	4602      	mov	r2, r0
 800645c:	4b0c      	ldr	r3, [pc, #48]	; (8006490 <__multadd+0x84>)
 800645e:	480d      	ldr	r0, [pc, #52]	; (8006494 <__multadd+0x88>)
 8006460:	21b5      	movs	r1, #181	; 0xb5
 8006462:	f000 fd57 	bl	8006f14 <__assert_func>
 8006466:	6922      	ldr	r2, [r4, #16]
 8006468:	3202      	adds	r2, #2
 800646a:	f104 010c 	add.w	r1, r4, #12
 800646e:	0092      	lsls	r2, r2, #2
 8006470:	300c      	adds	r0, #12
 8006472:	f7ff ff5b 	bl	800632c <memcpy>
 8006476:	4621      	mov	r1, r4
 8006478:	4638      	mov	r0, r7
 800647a:	f7ff ffa5 	bl	80063c8 <_Bfree>
 800647e:	4644      	mov	r4, r8
 8006480:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006484:	3501      	adds	r5, #1
 8006486:	615e      	str	r6, [r3, #20]
 8006488:	6125      	str	r5, [r4, #16]
 800648a:	4620      	mov	r0, r4
 800648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006490:	08007c03 	.word	0x08007c03
 8006494:	08007c14 	.word	0x08007c14

08006498 <__hi0bits>:
 8006498:	0c03      	lsrs	r3, r0, #16
 800649a:	041b      	lsls	r3, r3, #16
 800649c:	b9d3      	cbnz	r3, 80064d4 <__hi0bits+0x3c>
 800649e:	0400      	lsls	r0, r0, #16
 80064a0:	2310      	movs	r3, #16
 80064a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80064a6:	bf04      	itt	eq
 80064a8:	0200      	lsleq	r0, r0, #8
 80064aa:	3308      	addeq	r3, #8
 80064ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80064b0:	bf04      	itt	eq
 80064b2:	0100      	lsleq	r0, r0, #4
 80064b4:	3304      	addeq	r3, #4
 80064b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80064ba:	bf04      	itt	eq
 80064bc:	0080      	lsleq	r0, r0, #2
 80064be:	3302      	addeq	r3, #2
 80064c0:	2800      	cmp	r0, #0
 80064c2:	db05      	blt.n	80064d0 <__hi0bits+0x38>
 80064c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80064c8:	f103 0301 	add.w	r3, r3, #1
 80064cc:	bf08      	it	eq
 80064ce:	2320      	moveq	r3, #32
 80064d0:	4618      	mov	r0, r3
 80064d2:	4770      	bx	lr
 80064d4:	2300      	movs	r3, #0
 80064d6:	e7e4      	b.n	80064a2 <__hi0bits+0xa>

080064d8 <__lo0bits>:
 80064d8:	6803      	ldr	r3, [r0, #0]
 80064da:	f013 0207 	ands.w	r2, r3, #7
 80064de:	4601      	mov	r1, r0
 80064e0:	d00b      	beq.n	80064fa <__lo0bits+0x22>
 80064e2:	07da      	lsls	r2, r3, #31
 80064e4:	d423      	bmi.n	800652e <__lo0bits+0x56>
 80064e6:	0798      	lsls	r0, r3, #30
 80064e8:	bf49      	itett	mi
 80064ea:	085b      	lsrmi	r3, r3, #1
 80064ec:	089b      	lsrpl	r3, r3, #2
 80064ee:	2001      	movmi	r0, #1
 80064f0:	600b      	strmi	r3, [r1, #0]
 80064f2:	bf5c      	itt	pl
 80064f4:	600b      	strpl	r3, [r1, #0]
 80064f6:	2002      	movpl	r0, #2
 80064f8:	4770      	bx	lr
 80064fa:	b298      	uxth	r0, r3
 80064fc:	b9a8      	cbnz	r0, 800652a <__lo0bits+0x52>
 80064fe:	0c1b      	lsrs	r3, r3, #16
 8006500:	2010      	movs	r0, #16
 8006502:	b2da      	uxtb	r2, r3
 8006504:	b90a      	cbnz	r2, 800650a <__lo0bits+0x32>
 8006506:	3008      	adds	r0, #8
 8006508:	0a1b      	lsrs	r3, r3, #8
 800650a:	071a      	lsls	r2, r3, #28
 800650c:	bf04      	itt	eq
 800650e:	091b      	lsreq	r3, r3, #4
 8006510:	3004      	addeq	r0, #4
 8006512:	079a      	lsls	r2, r3, #30
 8006514:	bf04      	itt	eq
 8006516:	089b      	lsreq	r3, r3, #2
 8006518:	3002      	addeq	r0, #2
 800651a:	07da      	lsls	r2, r3, #31
 800651c:	d403      	bmi.n	8006526 <__lo0bits+0x4e>
 800651e:	085b      	lsrs	r3, r3, #1
 8006520:	f100 0001 	add.w	r0, r0, #1
 8006524:	d005      	beq.n	8006532 <__lo0bits+0x5a>
 8006526:	600b      	str	r3, [r1, #0]
 8006528:	4770      	bx	lr
 800652a:	4610      	mov	r0, r2
 800652c:	e7e9      	b.n	8006502 <__lo0bits+0x2a>
 800652e:	2000      	movs	r0, #0
 8006530:	4770      	bx	lr
 8006532:	2020      	movs	r0, #32
 8006534:	4770      	bx	lr
	...

08006538 <__i2b>:
 8006538:	b510      	push	{r4, lr}
 800653a:	460c      	mov	r4, r1
 800653c:	2101      	movs	r1, #1
 800653e:	f7ff ff03 	bl	8006348 <_Balloc>
 8006542:	4602      	mov	r2, r0
 8006544:	b928      	cbnz	r0, 8006552 <__i2b+0x1a>
 8006546:	4b05      	ldr	r3, [pc, #20]	; (800655c <__i2b+0x24>)
 8006548:	4805      	ldr	r0, [pc, #20]	; (8006560 <__i2b+0x28>)
 800654a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800654e:	f000 fce1 	bl	8006f14 <__assert_func>
 8006552:	2301      	movs	r3, #1
 8006554:	6144      	str	r4, [r0, #20]
 8006556:	6103      	str	r3, [r0, #16]
 8006558:	bd10      	pop	{r4, pc}
 800655a:	bf00      	nop
 800655c:	08007c03 	.word	0x08007c03
 8006560:	08007c14 	.word	0x08007c14

08006564 <__multiply>:
 8006564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006568:	4691      	mov	r9, r2
 800656a:	690a      	ldr	r2, [r1, #16]
 800656c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006570:	429a      	cmp	r2, r3
 8006572:	bfb8      	it	lt
 8006574:	460b      	movlt	r3, r1
 8006576:	460c      	mov	r4, r1
 8006578:	bfbc      	itt	lt
 800657a:	464c      	movlt	r4, r9
 800657c:	4699      	movlt	r9, r3
 800657e:	6927      	ldr	r7, [r4, #16]
 8006580:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006584:	68a3      	ldr	r3, [r4, #8]
 8006586:	6861      	ldr	r1, [r4, #4]
 8006588:	eb07 060a 	add.w	r6, r7, sl
 800658c:	42b3      	cmp	r3, r6
 800658e:	b085      	sub	sp, #20
 8006590:	bfb8      	it	lt
 8006592:	3101      	addlt	r1, #1
 8006594:	f7ff fed8 	bl	8006348 <_Balloc>
 8006598:	b930      	cbnz	r0, 80065a8 <__multiply+0x44>
 800659a:	4602      	mov	r2, r0
 800659c:	4b44      	ldr	r3, [pc, #272]	; (80066b0 <__multiply+0x14c>)
 800659e:	4845      	ldr	r0, [pc, #276]	; (80066b4 <__multiply+0x150>)
 80065a0:	f240 115d 	movw	r1, #349	; 0x15d
 80065a4:	f000 fcb6 	bl	8006f14 <__assert_func>
 80065a8:	f100 0514 	add.w	r5, r0, #20
 80065ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80065b0:	462b      	mov	r3, r5
 80065b2:	2200      	movs	r2, #0
 80065b4:	4543      	cmp	r3, r8
 80065b6:	d321      	bcc.n	80065fc <__multiply+0x98>
 80065b8:	f104 0314 	add.w	r3, r4, #20
 80065bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80065c0:	f109 0314 	add.w	r3, r9, #20
 80065c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80065c8:	9202      	str	r2, [sp, #8]
 80065ca:	1b3a      	subs	r2, r7, r4
 80065cc:	3a15      	subs	r2, #21
 80065ce:	f022 0203 	bic.w	r2, r2, #3
 80065d2:	3204      	adds	r2, #4
 80065d4:	f104 0115 	add.w	r1, r4, #21
 80065d8:	428f      	cmp	r7, r1
 80065da:	bf38      	it	cc
 80065dc:	2204      	movcc	r2, #4
 80065de:	9201      	str	r2, [sp, #4]
 80065e0:	9a02      	ldr	r2, [sp, #8]
 80065e2:	9303      	str	r3, [sp, #12]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d80c      	bhi.n	8006602 <__multiply+0x9e>
 80065e8:	2e00      	cmp	r6, #0
 80065ea:	dd03      	ble.n	80065f4 <__multiply+0x90>
 80065ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d05a      	beq.n	80066aa <__multiply+0x146>
 80065f4:	6106      	str	r6, [r0, #16]
 80065f6:	b005      	add	sp, #20
 80065f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065fc:	f843 2b04 	str.w	r2, [r3], #4
 8006600:	e7d8      	b.n	80065b4 <__multiply+0x50>
 8006602:	f8b3 a000 	ldrh.w	sl, [r3]
 8006606:	f1ba 0f00 	cmp.w	sl, #0
 800660a:	d024      	beq.n	8006656 <__multiply+0xf2>
 800660c:	f104 0e14 	add.w	lr, r4, #20
 8006610:	46a9      	mov	r9, r5
 8006612:	f04f 0c00 	mov.w	ip, #0
 8006616:	f85e 2b04 	ldr.w	r2, [lr], #4
 800661a:	f8d9 1000 	ldr.w	r1, [r9]
 800661e:	fa1f fb82 	uxth.w	fp, r2
 8006622:	b289      	uxth	r1, r1
 8006624:	fb0a 110b 	mla	r1, sl, fp, r1
 8006628:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800662c:	f8d9 2000 	ldr.w	r2, [r9]
 8006630:	4461      	add	r1, ip
 8006632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006636:	fb0a c20b 	mla	r2, sl, fp, ip
 800663a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800663e:	b289      	uxth	r1, r1
 8006640:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006644:	4577      	cmp	r7, lr
 8006646:	f849 1b04 	str.w	r1, [r9], #4
 800664a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800664e:	d8e2      	bhi.n	8006616 <__multiply+0xb2>
 8006650:	9a01      	ldr	r2, [sp, #4]
 8006652:	f845 c002 	str.w	ip, [r5, r2]
 8006656:	9a03      	ldr	r2, [sp, #12]
 8006658:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800665c:	3304      	adds	r3, #4
 800665e:	f1b9 0f00 	cmp.w	r9, #0
 8006662:	d020      	beq.n	80066a6 <__multiply+0x142>
 8006664:	6829      	ldr	r1, [r5, #0]
 8006666:	f104 0c14 	add.w	ip, r4, #20
 800666a:	46ae      	mov	lr, r5
 800666c:	f04f 0a00 	mov.w	sl, #0
 8006670:	f8bc b000 	ldrh.w	fp, [ip]
 8006674:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006678:	fb09 220b 	mla	r2, r9, fp, r2
 800667c:	4492      	add	sl, r2
 800667e:	b289      	uxth	r1, r1
 8006680:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006684:	f84e 1b04 	str.w	r1, [lr], #4
 8006688:	f85c 2b04 	ldr.w	r2, [ip], #4
 800668c:	f8be 1000 	ldrh.w	r1, [lr]
 8006690:	0c12      	lsrs	r2, r2, #16
 8006692:	fb09 1102 	mla	r1, r9, r2, r1
 8006696:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800669a:	4567      	cmp	r7, ip
 800669c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80066a0:	d8e6      	bhi.n	8006670 <__multiply+0x10c>
 80066a2:	9a01      	ldr	r2, [sp, #4]
 80066a4:	50a9      	str	r1, [r5, r2]
 80066a6:	3504      	adds	r5, #4
 80066a8:	e79a      	b.n	80065e0 <__multiply+0x7c>
 80066aa:	3e01      	subs	r6, #1
 80066ac:	e79c      	b.n	80065e8 <__multiply+0x84>
 80066ae:	bf00      	nop
 80066b0:	08007c03 	.word	0x08007c03
 80066b4:	08007c14 	.word	0x08007c14

080066b8 <__pow5mult>:
 80066b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066bc:	4615      	mov	r5, r2
 80066be:	f012 0203 	ands.w	r2, r2, #3
 80066c2:	4606      	mov	r6, r0
 80066c4:	460f      	mov	r7, r1
 80066c6:	d007      	beq.n	80066d8 <__pow5mult+0x20>
 80066c8:	4c25      	ldr	r4, [pc, #148]	; (8006760 <__pow5mult+0xa8>)
 80066ca:	3a01      	subs	r2, #1
 80066cc:	2300      	movs	r3, #0
 80066ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066d2:	f7ff fe9b 	bl	800640c <__multadd>
 80066d6:	4607      	mov	r7, r0
 80066d8:	10ad      	asrs	r5, r5, #2
 80066da:	d03d      	beq.n	8006758 <__pow5mult+0xa0>
 80066dc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80066de:	b97c      	cbnz	r4, 8006700 <__pow5mult+0x48>
 80066e0:	2010      	movs	r0, #16
 80066e2:	f7ff fe1b 	bl	800631c <malloc>
 80066e6:	4602      	mov	r2, r0
 80066e8:	6270      	str	r0, [r6, #36]	; 0x24
 80066ea:	b928      	cbnz	r0, 80066f8 <__pow5mult+0x40>
 80066ec:	4b1d      	ldr	r3, [pc, #116]	; (8006764 <__pow5mult+0xac>)
 80066ee:	481e      	ldr	r0, [pc, #120]	; (8006768 <__pow5mult+0xb0>)
 80066f0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80066f4:	f000 fc0e 	bl	8006f14 <__assert_func>
 80066f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80066fc:	6004      	str	r4, [r0, #0]
 80066fe:	60c4      	str	r4, [r0, #12]
 8006700:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8006704:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006708:	b94c      	cbnz	r4, 800671e <__pow5mult+0x66>
 800670a:	f240 2171 	movw	r1, #625	; 0x271
 800670e:	4630      	mov	r0, r6
 8006710:	f7ff ff12 	bl	8006538 <__i2b>
 8006714:	2300      	movs	r3, #0
 8006716:	f8c8 0008 	str.w	r0, [r8, #8]
 800671a:	4604      	mov	r4, r0
 800671c:	6003      	str	r3, [r0, #0]
 800671e:	f04f 0900 	mov.w	r9, #0
 8006722:	07eb      	lsls	r3, r5, #31
 8006724:	d50a      	bpl.n	800673c <__pow5mult+0x84>
 8006726:	4639      	mov	r1, r7
 8006728:	4622      	mov	r2, r4
 800672a:	4630      	mov	r0, r6
 800672c:	f7ff ff1a 	bl	8006564 <__multiply>
 8006730:	4639      	mov	r1, r7
 8006732:	4680      	mov	r8, r0
 8006734:	4630      	mov	r0, r6
 8006736:	f7ff fe47 	bl	80063c8 <_Bfree>
 800673a:	4647      	mov	r7, r8
 800673c:	106d      	asrs	r5, r5, #1
 800673e:	d00b      	beq.n	8006758 <__pow5mult+0xa0>
 8006740:	6820      	ldr	r0, [r4, #0]
 8006742:	b938      	cbnz	r0, 8006754 <__pow5mult+0x9c>
 8006744:	4622      	mov	r2, r4
 8006746:	4621      	mov	r1, r4
 8006748:	4630      	mov	r0, r6
 800674a:	f7ff ff0b 	bl	8006564 <__multiply>
 800674e:	6020      	str	r0, [r4, #0]
 8006750:	f8c0 9000 	str.w	r9, [r0]
 8006754:	4604      	mov	r4, r0
 8006756:	e7e4      	b.n	8006722 <__pow5mult+0x6a>
 8006758:	4638      	mov	r0, r7
 800675a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800675e:	bf00      	nop
 8006760:	08007d60 	.word	0x08007d60
 8006764:	08007b91 	.word	0x08007b91
 8006768:	08007c14 	.word	0x08007c14

0800676c <__lshift>:
 800676c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006770:	460c      	mov	r4, r1
 8006772:	6849      	ldr	r1, [r1, #4]
 8006774:	6923      	ldr	r3, [r4, #16]
 8006776:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800677a:	68a3      	ldr	r3, [r4, #8]
 800677c:	4607      	mov	r7, r0
 800677e:	4691      	mov	r9, r2
 8006780:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006784:	f108 0601 	add.w	r6, r8, #1
 8006788:	42b3      	cmp	r3, r6
 800678a:	db0b      	blt.n	80067a4 <__lshift+0x38>
 800678c:	4638      	mov	r0, r7
 800678e:	f7ff fddb 	bl	8006348 <_Balloc>
 8006792:	4605      	mov	r5, r0
 8006794:	b948      	cbnz	r0, 80067aa <__lshift+0x3e>
 8006796:	4602      	mov	r2, r0
 8006798:	4b2a      	ldr	r3, [pc, #168]	; (8006844 <__lshift+0xd8>)
 800679a:	482b      	ldr	r0, [pc, #172]	; (8006848 <__lshift+0xdc>)
 800679c:	f240 11d9 	movw	r1, #473	; 0x1d9
 80067a0:	f000 fbb8 	bl	8006f14 <__assert_func>
 80067a4:	3101      	adds	r1, #1
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	e7ee      	b.n	8006788 <__lshift+0x1c>
 80067aa:	2300      	movs	r3, #0
 80067ac:	f100 0114 	add.w	r1, r0, #20
 80067b0:	f100 0210 	add.w	r2, r0, #16
 80067b4:	4618      	mov	r0, r3
 80067b6:	4553      	cmp	r3, sl
 80067b8:	db37      	blt.n	800682a <__lshift+0xbe>
 80067ba:	6920      	ldr	r0, [r4, #16]
 80067bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80067c0:	f104 0314 	add.w	r3, r4, #20
 80067c4:	f019 091f 	ands.w	r9, r9, #31
 80067c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80067cc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80067d0:	d02f      	beq.n	8006832 <__lshift+0xc6>
 80067d2:	f1c9 0e20 	rsb	lr, r9, #32
 80067d6:	468a      	mov	sl, r1
 80067d8:	f04f 0c00 	mov.w	ip, #0
 80067dc:	681a      	ldr	r2, [r3, #0]
 80067de:	fa02 f209 	lsl.w	r2, r2, r9
 80067e2:	ea42 020c 	orr.w	r2, r2, ip
 80067e6:	f84a 2b04 	str.w	r2, [sl], #4
 80067ea:	f853 2b04 	ldr.w	r2, [r3], #4
 80067ee:	4298      	cmp	r0, r3
 80067f0:	fa22 fc0e 	lsr.w	ip, r2, lr
 80067f4:	d8f2      	bhi.n	80067dc <__lshift+0x70>
 80067f6:	1b03      	subs	r3, r0, r4
 80067f8:	3b15      	subs	r3, #21
 80067fa:	f023 0303 	bic.w	r3, r3, #3
 80067fe:	3304      	adds	r3, #4
 8006800:	f104 0215 	add.w	r2, r4, #21
 8006804:	4290      	cmp	r0, r2
 8006806:	bf38      	it	cc
 8006808:	2304      	movcc	r3, #4
 800680a:	f841 c003 	str.w	ip, [r1, r3]
 800680e:	f1bc 0f00 	cmp.w	ip, #0
 8006812:	d001      	beq.n	8006818 <__lshift+0xac>
 8006814:	f108 0602 	add.w	r6, r8, #2
 8006818:	3e01      	subs	r6, #1
 800681a:	4638      	mov	r0, r7
 800681c:	612e      	str	r6, [r5, #16]
 800681e:	4621      	mov	r1, r4
 8006820:	f7ff fdd2 	bl	80063c8 <_Bfree>
 8006824:	4628      	mov	r0, r5
 8006826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800682a:	f842 0f04 	str.w	r0, [r2, #4]!
 800682e:	3301      	adds	r3, #1
 8006830:	e7c1      	b.n	80067b6 <__lshift+0x4a>
 8006832:	3904      	subs	r1, #4
 8006834:	f853 2b04 	ldr.w	r2, [r3], #4
 8006838:	f841 2f04 	str.w	r2, [r1, #4]!
 800683c:	4298      	cmp	r0, r3
 800683e:	d8f9      	bhi.n	8006834 <__lshift+0xc8>
 8006840:	e7ea      	b.n	8006818 <__lshift+0xac>
 8006842:	bf00      	nop
 8006844:	08007c03 	.word	0x08007c03
 8006848:	08007c14 	.word	0x08007c14

0800684c <__mcmp>:
 800684c:	b530      	push	{r4, r5, lr}
 800684e:	6902      	ldr	r2, [r0, #16]
 8006850:	690c      	ldr	r4, [r1, #16]
 8006852:	1b12      	subs	r2, r2, r4
 8006854:	d10e      	bne.n	8006874 <__mcmp+0x28>
 8006856:	f100 0314 	add.w	r3, r0, #20
 800685a:	3114      	adds	r1, #20
 800685c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006860:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006864:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006868:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800686c:	42a5      	cmp	r5, r4
 800686e:	d003      	beq.n	8006878 <__mcmp+0x2c>
 8006870:	d305      	bcc.n	800687e <__mcmp+0x32>
 8006872:	2201      	movs	r2, #1
 8006874:	4610      	mov	r0, r2
 8006876:	bd30      	pop	{r4, r5, pc}
 8006878:	4283      	cmp	r3, r0
 800687a:	d3f3      	bcc.n	8006864 <__mcmp+0x18>
 800687c:	e7fa      	b.n	8006874 <__mcmp+0x28>
 800687e:	f04f 32ff 	mov.w	r2, #4294967295
 8006882:	e7f7      	b.n	8006874 <__mcmp+0x28>

08006884 <__mdiff>:
 8006884:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006888:	460c      	mov	r4, r1
 800688a:	4606      	mov	r6, r0
 800688c:	4611      	mov	r1, r2
 800688e:	4620      	mov	r0, r4
 8006890:	4690      	mov	r8, r2
 8006892:	f7ff ffdb 	bl	800684c <__mcmp>
 8006896:	1e05      	subs	r5, r0, #0
 8006898:	d110      	bne.n	80068bc <__mdiff+0x38>
 800689a:	4629      	mov	r1, r5
 800689c:	4630      	mov	r0, r6
 800689e:	f7ff fd53 	bl	8006348 <_Balloc>
 80068a2:	b930      	cbnz	r0, 80068b2 <__mdiff+0x2e>
 80068a4:	4b3a      	ldr	r3, [pc, #232]	; (8006990 <__mdiff+0x10c>)
 80068a6:	4602      	mov	r2, r0
 80068a8:	f240 2132 	movw	r1, #562	; 0x232
 80068ac:	4839      	ldr	r0, [pc, #228]	; (8006994 <__mdiff+0x110>)
 80068ae:	f000 fb31 	bl	8006f14 <__assert_func>
 80068b2:	2301      	movs	r3, #1
 80068b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80068b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068bc:	bfa4      	itt	ge
 80068be:	4643      	movge	r3, r8
 80068c0:	46a0      	movge	r8, r4
 80068c2:	4630      	mov	r0, r6
 80068c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80068c8:	bfa6      	itte	ge
 80068ca:	461c      	movge	r4, r3
 80068cc:	2500      	movge	r5, #0
 80068ce:	2501      	movlt	r5, #1
 80068d0:	f7ff fd3a 	bl	8006348 <_Balloc>
 80068d4:	b920      	cbnz	r0, 80068e0 <__mdiff+0x5c>
 80068d6:	4b2e      	ldr	r3, [pc, #184]	; (8006990 <__mdiff+0x10c>)
 80068d8:	4602      	mov	r2, r0
 80068da:	f44f 7110 	mov.w	r1, #576	; 0x240
 80068de:	e7e5      	b.n	80068ac <__mdiff+0x28>
 80068e0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80068e4:	6926      	ldr	r6, [r4, #16]
 80068e6:	60c5      	str	r5, [r0, #12]
 80068e8:	f104 0914 	add.w	r9, r4, #20
 80068ec:	f108 0514 	add.w	r5, r8, #20
 80068f0:	f100 0e14 	add.w	lr, r0, #20
 80068f4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80068f8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80068fc:	f108 0210 	add.w	r2, r8, #16
 8006900:	46f2      	mov	sl, lr
 8006902:	2100      	movs	r1, #0
 8006904:	f859 3b04 	ldr.w	r3, [r9], #4
 8006908:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800690c:	fa1f f883 	uxth.w	r8, r3
 8006910:	fa11 f18b 	uxtah	r1, r1, fp
 8006914:	0c1b      	lsrs	r3, r3, #16
 8006916:	eba1 0808 	sub.w	r8, r1, r8
 800691a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800691e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006922:	fa1f f888 	uxth.w	r8, r8
 8006926:	1419      	asrs	r1, r3, #16
 8006928:	454e      	cmp	r6, r9
 800692a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800692e:	f84a 3b04 	str.w	r3, [sl], #4
 8006932:	d8e7      	bhi.n	8006904 <__mdiff+0x80>
 8006934:	1b33      	subs	r3, r6, r4
 8006936:	3b15      	subs	r3, #21
 8006938:	f023 0303 	bic.w	r3, r3, #3
 800693c:	3304      	adds	r3, #4
 800693e:	3415      	adds	r4, #21
 8006940:	42a6      	cmp	r6, r4
 8006942:	bf38      	it	cc
 8006944:	2304      	movcc	r3, #4
 8006946:	441d      	add	r5, r3
 8006948:	4473      	add	r3, lr
 800694a:	469e      	mov	lr, r3
 800694c:	462e      	mov	r6, r5
 800694e:	4566      	cmp	r6, ip
 8006950:	d30e      	bcc.n	8006970 <__mdiff+0xec>
 8006952:	f10c 0203 	add.w	r2, ip, #3
 8006956:	1b52      	subs	r2, r2, r5
 8006958:	f022 0203 	bic.w	r2, r2, #3
 800695c:	3d03      	subs	r5, #3
 800695e:	45ac      	cmp	ip, r5
 8006960:	bf38      	it	cc
 8006962:	2200      	movcc	r2, #0
 8006964:	441a      	add	r2, r3
 8006966:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800696a:	b17b      	cbz	r3, 800698c <__mdiff+0x108>
 800696c:	6107      	str	r7, [r0, #16]
 800696e:	e7a3      	b.n	80068b8 <__mdiff+0x34>
 8006970:	f856 8b04 	ldr.w	r8, [r6], #4
 8006974:	fa11 f288 	uxtah	r2, r1, r8
 8006978:	1414      	asrs	r4, r2, #16
 800697a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800697e:	b292      	uxth	r2, r2
 8006980:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006984:	f84e 2b04 	str.w	r2, [lr], #4
 8006988:	1421      	asrs	r1, r4, #16
 800698a:	e7e0      	b.n	800694e <__mdiff+0xca>
 800698c:	3f01      	subs	r7, #1
 800698e:	e7ea      	b.n	8006966 <__mdiff+0xe2>
 8006990:	08007c03 	.word	0x08007c03
 8006994:	08007c14 	.word	0x08007c14

08006998 <__d2b>:
 8006998:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800699c:	4689      	mov	r9, r1
 800699e:	2101      	movs	r1, #1
 80069a0:	ec57 6b10 	vmov	r6, r7, d0
 80069a4:	4690      	mov	r8, r2
 80069a6:	f7ff fccf 	bl	8006348 <_Balloc>
 80069aa:	4604      	mov	r4, r0
 80069ac:	b930      	cbnz	r0, 80069bc <__d2b+0x24>
 80069ae:	4602      	mov	r2, r0
 80069b0:	4b25      	ldr	r3, [pc, #148]	; (8006a48 <__d2b+0xb0>)
 80069b2:	4826      	ldr	r0, [pc, #152]	; (8006a4c <__d2b+0xb4>)
 80069b4:	f240 310a 	movw	r1, #778	; 0x30a
 80069b8:	f000 faac 	bl	8006f14 <__assert_func>
 80069bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80069c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80069c4:	bb35      	cbnz	r5, 8006a14 <__d2b+0x7c>
 80069c6:	2e00      	cmp	r6, #0
 80069c8:	9301      	str	r3, [sp, #4]
 80069ca:	d028      	beq.n	8006a1e <__d2b+0x86>
 80069cc:	4668      	mov	r0, sp
 80069ce:	9600      	str	r6, [sp, #0]
 80069d0:	f7ff fd82 	bl	80064d8 <__lo0bits>
 80069d4:	9900      	ldr	r1, [sp, #0]
 80069d6:	b300      	cbz	r0, 8006a1a <__d2b+0x82>
 80069d8:	9a01      	ldr	r2, [sp, #4]
 80069da:	f1c0 0320 	rsb	r3, r0, #32
 80069de:	fa02 f303 	lsl.w	r3, r2, r3
 80069e2:	430b      	orrs	r3, r1
 80069e4:	40c2      	lsrs	r2, r0
 80069e6:	6163      	str	r3, [r4, #20]
 80069e8:	9201      	str	r2, [sp, #4]
 80069ea:	9b01      	ldr	r3, [sp, #4]
 80069ec:	61a3      	str	r3, [r4, #24]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	bf14      	ite	ne
 80069f2:	2202      	movne	r2, #2
 80069f4:	2201      	moveq	r2, #1
 80069f6:	6122      	str	r2, [r4, #16]
 80069f8:	b1d5      	cbz	r5, 8006a30 <__d2b+0x98>
 80069fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80069fe:	4405      	add	r5, r0
 8006a00:	f8c9 5000 	str.w	r5, [r9]
 8006a04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006a08:	f8c8 0000 	str.w	r0, [r8]
 8006a0c:	4620      	mov	r0, r4
 8006a0e:	b003      	add	sp, #12
 8006a10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a18:	e7d5      	b.n	80069c6 <__d2b+0x2e>
 8006a1a:	6161      	str	r1, [r4, #20]
 8006a1c:	e7e5      	b.n	80069ea <__d2b+0x52>
 8006a1e:	a801      	add	r0, sp, #4
 8006a20:	f7ff fd5a 	bl	80064d8 <__lo0bits>
 8006a24:	9b01      	ldr	r3, [sp, #4]
 8006a26:	6163      	str	r3, [r4, #20]
 8006a28:	2201      	movs	r2, #1
 8006a2a:	6122      	str	r2, [r4, #16]
 8006a2c:	3020      	adds	r0, #32
 8006a2e:	e7e3      	b.n	80069f8 <__d2b+0x60>
 8006a30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006a34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006a38:	f8c9 0000 	str.w	r0, [r9]
 8006a3c:	6918      	ldr	r0, [r3, #16]
 8006a3e:	f7ff fd2b 	bl	8006498 <__hi0bits>
 8006a42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006a46:	e7df      	b.n	8006a08 <__d2b+0x70>
 8006a48:	08007c03 	.word	0x08007c03
 8006a4c:	08007c14 	.word	0x08007c14

08006a50 <_calloc_r>:
 8006a50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a52:	fba1 2402 	umull	r2, r4, r1, r2
 8006a56:	b94c      	cbnz	r4, 8006a6c <_calloc_r+0x1c>
 8006a58:	4611      	mov	r1, r2
 8006a5a:	9201      	str	r2, [sp, #4]
 8006a5c:	f000 f87a 	bl	8006b54 <_malloc_r>
 8006a60:	9a01      	ldr	r2, [sp, #4]
 8006a62:	4605      	mov	r5, r0
 8006a64:	b930      	cbnz	r0, 8006a74 <_calloc_r+0x24>
 8006a66:	4628      	mov	r0, r5
 8006a68:	b003      	add	sp, #12
 8006a6a:	bd30      	pop	{r4, r5, pc}
 8006a6c:	220c      	movs	r2, #12
 8006a6e:	6002      	str	r2, [r0, #0]
 8006a70:	2500      	movs	r5, #0
 8006a72:	e7f8      	b.n	8006a66 <_calloc_r+0x16>
 8006a74:	4621      	mov	r1, r4
 8006a76:	f7fe f941 	bl	8004cfc <memset>
 8006a7a:	e7f4      	b.n	8006a66 <_calloc_r+0x16>

08006a7c <_free_r>:
 8006a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a7e:	2900      	cmp	r1, #0
 8006a80:	d044      	beq.n	8006b0c <_free_r+0x90>
 8006a82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a86:	9001      	str	r0, [sp, #4]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f1a1 0404 	sub.w	r4, r1, #4
 8006a8e:	bfb8      	it	lt
 8006a90:	18e4      	addlt	r4, r4, r3
 8006a92:	f000 fa9b 	bl	8006fcc <__malloc_lock>
 8006a96:	4a1e      	ldr	r2, [pc, #120]	; (8006b10 <_free_r+0x94>)
 8006a98:	9801      	ldr	r0, [sp, #4]
 8006a9a:	6813      	ldr	r3, [r2, #0]
 8006a9c:	b933      	cbnz	r3, 8006aac <_free_r+0x30>
 8006a9e:	6063      	str	r3, [r4, #4]
 8006aa0:	6014      	str	r4, [r2, #0]
 8006aa2:	b003      	add	sp, #12
 8006aa4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006aa8:	f000 ba96 	b.w	8006fd8 <__malloc_unlock>
 8006aac:	42a3      	cmp	r3, r4
 8006aae:	d908      	bls.n	8006ac2 <_free_r+0x46>
 8006ab0:	6825      	ldr	r5, [r4, #0]
 8006ab2:	1961      	adds	r1, r4, r5
 8006ab4:	428b      	cmp	r3, r1
 8006ab6:	bf01      	itttt	eq
 8006ab8:	6819      	ldreq	r1, [r3, #0]
 8006aba:	685b      	ldreq	r3, [r3, #4]
 8006abc:	1949      	addeq	r1, r1, r5
 8006abe:	6021      	streq	r1, [r4, #0]
 8006ac0:	e7ed      	b.n	8006a9e <_free_r+0x22>
 8006ac2:	461a      	mov	r2, r3
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	b10b      	cbz	r3, 8006acc <_free_r+0x50>
 8006ac8:	42a3      	cmp	r3, r4
 8006aca:	d9fa      	bls.n	8006ac2 <_free_r+0x46>
 8006acc:	6811      	ldr	r1, [r2, #0]
 8006ace:	1855      	adds	r5, r2, r1
 8006ad0:	42a5      	cmp	r5, r4
 8006ad2:	d10b      	bne.n	8006aec <_free_r+0x70>
 8006ad4:	6824      	ldr	r4, [r4, #0]
 8006ad6:	4421      	add	r1, r4
 8006ad8:	1854      	adds	r4, r2, r1
 8006ada:	42a3      	cmp	r3, r4
 8006adc:	6011      	str	r1, [r2, #0]
 8006ade:	d1e0      	bne.n	8006aa2 <_free_r+0x26>
 8006ae0:	681c      	ldr	r4, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	6053      	str	r3, [r2, #4]
 8006ae6:	4421      	add	r1, r4
 8006ae8:	6011      	str	r1, [r2, #0]
 8006aea:	e7da      	b.n	8006aa2 <_free_r+0x26>
 8006aec:	d902      	bls.n	8006af4 <_free_r+0x78>
 8006aee:	230c      	movs	r3, #12
 8006af0:	6003      	str	r3, [r0, #0]
 8006af2:	e7d6      	b.n	8006aa2 <_free_r+0x26>
 8006af4:	6825      	ldr	r5, [r4, #0]
 8006af6:	1961      	adds	r1, r4, r5
 8006af8:	428b      	cmp	r3, r1
 8006afa:	bf04      	itt	eq
 8006afc:	6819      	ldreq	r1, [r3, #0]
 8006afe:	685b      	ldreq	r3, [r3, #4]
 8006b00:	6063      	str	r3, [r4, #4]
 8006b02:	bf04      	itt	eq
 8006b04:	1949      	addeq	r1, r1, r5
 8006b06:	6021      	streq	r1, [r4, #0]
 8006b08:	6054      	str	r4, [r2, #4]
 8006b0a:	e7ca      	b.n	8006aa2 <_free_r+0x26>
 8006b0c:	b003      	add	sp, #12
 8006b0e:	bd30      	pop	{r4, r5, pc}
 8006b10:	20000334 	.word	0x20000334

08006b14 <sbrk_aligned>:
 8006b14:	b570      	push	{r4, r5, r6, lr}
 8006b16:	4e0e      	ldr	r6, [pc, #56]	; (8006b50 <sbrk_aligned+0x3c>)
 8006b18:	460c      	mov	r4, r1
 8006b1a:	6831      	ldr	r1, [r6, #0]
 8006b1c:	4605      	mov	r5, r0
 8006b1e:	b911      	cbnz	r1, 8006b26 <sbrk_aligned+0x12>
 8006b20:	f000 f9e8 	bl	8006ef4 <_sbrk_r>
 8006b24:	6030      	str	r0, [r6, #0]
 8006b26:	4621      	mov	r1, r4
 8006b28:	4628      	mov	r0, r5
 8006b2a:	f000 f9e3 	bl	8006ef4 <_sbrk_r>
 8006b2e:	1c43      	adds	r3, r0, #1
 8006b30:	d00a      	beq.n	8006b48 <sbrk_aligned+0x34>
 8006b32:	1cc4      	adds	r4, r0, #3
 8006b34:	f024 0403 	bic.w	r4, r4, #3
 8006b38:	42a0      	cmp	r0, r4
 8006b3a:	d007      	beq.n	8006b4c <sbrk_aligned+0x38>
 8006b3c:	1a21      	subs	r1, r4, r0
 8006b3e:	4628      	mov	r0, r5
 8006b40:	f000 f9d8 	bl	8006ef4 <_sbrk_r>
 8006b44:	3001      	adds	r0, #1
 8006b46:	d101      	bne.n	8006b4c <sbrk_aligned+0x38>
 8006b48:	f04f 34ff 	mov.w	r4, #4294967295
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}
 8006b50:	20000338 	.word	0x20000338

08006b54 <_malloc_r>:
 8006b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b58:	1ccd      	adds	r5, r1, #3
 8006b5a:	f025 0503 	bic.w	r5, r5, #3
 8006b5e:	3508      	adds	r5, #8
 8006b60:	2d0c      	cmp	r5, #12
 8006b62:	bf38      	it	cc
 8006b64:	250c      	movcc	r5, #12
 8006b66:	2d00      	cmp	r5, #0
 8006b68:	4607      	mov	r7, r0
 8006b6a:	db01      	blt.n	8006b70 <_malloc_r+0x1c>
 8006b6c:	42a9      	cmp	r1, r5
 8006b6e:	d905      	bls.n	8006b7c <_malloc_r+0x28>
 8006b70:	230c      	movs	r3, #12
 8006b72:	603b      	str	r3, [r7, #0]
 8006b74:	2600      	movs	r6, #0
 8006b76:	4630      	mov	r0, r6
 8006b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b7c:	4e2e      	ldr	r6, [pc, #184]	; (8006c38 <_malloc_r+0xe4>)
 8006b7e:	f000 fa25 	bl	8006fcc <__malloc_lock>
 8006b82:	6833      	ldr	r3, [r6, #0]
 8006b84:	461c      	mov	r4, r3
 8006b86:	bb34      	cbnz	r4, 8006bd6 <_malloc_r+0x82>
 8006b88:	4629      	mov	r1, r5
 8006b8a:	4638      	mov	r0, r7
 8006b8c:	f7ff ffc2 	bl	8006b14 <sbrk_aligned>
 8006b90:	1c43      	adds	r3, r0, #1
 8006b92:	4604      	mov	r4, r0
 8006b94:	d14d      	bne.n	8006c32 <_malloc_r+0xde>
 8006b96:	6834      	ldr	r4, [r6, #0]
 8006b98:	4626      	mov	r6, r4
 8006b9a:	2e00      	cmp	r6, #0
 8006b9c:	d140      	bne.n	8006c20 <_malloc_r+0xcc>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	4631      	mov	r1, r6
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	eb04 0803 	add.w	r8, r4, r3
 8006ba8:	f000 f9a4 	bl	8006ef4 <_sbrk_r>
 8006bac:	4580      	cmp	r8, r0
 8006bae:	d13a      	bne.n	8006c26 <_malloc_r+0xd2>
 8006bb0:	6821      	ldr	r1, [r4, #0]
 8006bb2:	3503      	adds	r5, #3
 8006bb4:	1a6d      	subs	r5, r5, r1
 8006bb6:	f025 0503 	bic.w	r5, r5, #3
 8006bba:	3508      	adds	r5, #8
 8006bbc:	2d0c      	cmp	r5, #12
 8006bbe:	bf38      	it	cc
 8006bc0:	250c      	movcc	r5, #12
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4638      	mov	r0, r7
 8006bc6:	f7ff ffa5 	bl	8006b14 <sbrk_aligned>
 8006bca:	3001      	adds	r0, #1
 8006bcc:	d02b      	beq.n	8006c26 <_malloc_r+0xd2>
 8006bce:	6823      	ldr	r3, [r4, #0]
 8006bd0:	442b      	add	r3, r5
 8006bd2:	6023      	str	r3, [r4, #0]
 8006bd4:	e00e      	b.n	8006bf4 <_malloc_r+0xa0>
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	1b52      	subs	r2, r2, r5
 8006bda:	d41e      	bmi.n	8006c1a <_malloc_r+0xc6>
 8006bdc:	2a0b      	cmp	r2, #11
 8006bde:	d916      	bls.n	8006c0e <_malloc_r+0xba>
 8006be0:	1961      	adds	r1, r4, r5
 8006be2:	42a3      	cmp	r3, r4
 8006be4:	6025      	str	r5, [r4, #0]
 8006be6:	bf18      	it	ne
 8006be8:	6059      	strne	r1, [r3, #4]
 8006bea:	6863      	ldr	r3, [r4, #4]
 8006bec:	bf08      	it	eq
 8006bee:	6031      	streq	r1, [r6, #0]
 8006bf0:	5162      	str	r2, [r4, r5]
 8006bf2:	604b      	str	r3, [r1, #4]
 8006bf4:	4638      	mov	r0, r7
 8006bf6:	f104 060b 	add.w	r6, r4, #11
 8006bfa:	f000 f9ed 	bl	8006fd8 <__malloc_unlock>
 8006bfe:	f026 0607 	bic.w	r6, r6, #7
 8006c02:	1d23      	adds	r3, r4, #4
 8006c04:	1af2      	subs	r2, r6, r3
 8006c06:	d0b6      	beq.n	8006b76 <_malloc_r+0x22>
 8006c08:	1b9b      	subs	r3, r3, r6
 8006c0a:	50a3      	str	r3, [r4, r2]
 8006c0c:	e7b3      	b.n	8006b76 <_malloc_r+0x22>
 8006c0e:	6862      	ldr	r2, [r4, #4]
 8006c10:	42a3      	cmp	r3, r4
 8006c12:	bf0c      	ite	eq
 8006c14:	6032      	streq	r2, [r6, #0]
 8006c16:	605a      	strne	r2, [r3, #4]
 8006c18:	e7ec      	b.n	8006bf4 <_malloc_r+0xa0>
 8006c1a:	4623      	mov	r3, r4
 8006c1c:	6864      	ldr	r4, [r4, #4]
 8006c1e:	e7b2      	b.n	8006b86 <_malloc_r+0x32>
 8006c20:	4634      	mov	r4, r6
 8006c22:	6876      	ldr	r6, [r6, #4]
 8006c24:	e7b9      	b.n	8006b9a <_malloc_r+0x46>
 8006c26:	230c      	movs	r3, #12
 8006c28:	603b      	str	r3, [r7, #0]
 8006c2a:	4638      	mov	r0, r7
 8006c2c:	f000 f9d4 	bl	8006fd8 <__malloc_unlock>
 8006c30:	e7a1      	b.n	8006b76 <_malloc_r+0x22>
 8006c32:	6025      	str	r5, [r4, #0]
 8006c34:	e7de      	b.n	8006bf4 <_malloc_r+0xa0>
 8006c36:	bf00      	nop
 8006c38:	20000334 	.word	0x20000334

08006c3c <__ssputs_r>:
 8006c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c40:	688e      	ldr	r6, [r1, #8]
 8006c42:	429e      	cmp	r6, r3
 8006c44:	4682      	mov	sl, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	4690      	mov	r8, r2
 8006c4a:	461f      	mov	r7, r3
 8006c4c:	d838      	bhi.n	8006cc0 <__ssputs_r+0x84>
 8006c4e:	898a      	ldrh	r2, [r1, #12]
 8006c50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006c54:	d032      	beq.n	8006cbc <__ssputs_r+0x80>
 8006c56:	6825      	ldr	r5, [r4, #0]
 8006c58:	6909      	ldr	r1, [r1, #16]
 8006c5a:	eba5 0901 	sub.w	r9, r5, r1
 8006c5e:	6965      	ldr	r5, [r4, #20]
 8006c60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006c64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006c68:	3301      	adds	r3, #1
 8006c6a:	444b      	add	r3, r9
 8006c6c:	106d      	asrs	r5, r5, #1
 8006c6e:	429d      	cmp	r5, r3
 8006c70:	bf38      	it	cc
 8006c72:	461d      	movcc	r5, r3
 8006c74:	0553      	lsls	r3, r2, #21
 8006c76:	d531      	bpl.n	8006cdc <__ssputs_r+0xa0>
 8006c78:	4629      	mov	r1, r5
 8006c7a:	f7ff ff6b 	bl	8006b54 <_malloc_r>
 8006c7e:	4606      	mov	r6, r0
 8006c80:	b950      	cbnz	r0, 8006c98 <__ssputs_r+0x5c>
 8006c82:	230c      	movs	r3, #12
 8006c84:	f8ca 3000 	str.w	r3, [sl]
 8006c88:	89a3      	ldrh	r3, [r4, #12]
 8006c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c8e:	81a3      	strh	r3, [r4, #12]
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c98:	6921      	ldr	r1, [r4, #16]
 8006c9a:	464a      	mov	r2, r9
 8006c9c:	f7ff fb46 	bl	800632c <memcpy>
 8006ca0:	89a3      	ldrh	r3, [r4, #12]
 8006ca2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ca6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006caa:	81a3      	strh	r3, [r4, #12]
 8006cac:	6126      	str	r6, [r4, #16]
 8006cae:	6165      	str	r5, [r4, #20]
 8006cb0:	444e      	add	r6, r9
 8006cb2:	eba5 0509 	sub.w	r5, r5, r9
 8006cb6:	6026      	str	r6, [r4, #0]
 8006cb8:	60a5      	str	r5, [r4, #8]
 8006cba:	463e      	mov	r6, r7
 8006cbc:	42be      	cmp	r6, r7
 8006cbe:	d900      	bls.n	8006cc2 <__ssputs_r+0x86>
 8006cc0:	463e      	mov	r6, r7
 8006cc2:	6820      	ldr	r0, [r4, #0]
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	4641      	mov	r1, r8
 8006cc8:	f000 f966 	bl	8006f98 <memmove>
 8006ccc:	68a3      	ldr	r3, [r4, #8]
 8006cce:	1b9b      	subs	r3, r3, r6
 8006cd0:	60a3      	str	r3, [r4, #8]
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	4433      	add	r3, r6
 8006cd6:	6023      	str	r3, [r4, #0]
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e7db      	b.n	8006c94 <__ssputs_r+0x58>
 8006cdc:	462a      	mov	r2, r5
 8006cde:	f000 f981 	bl	8006fe4 <_realloc_r>
 8006ce2:	4606      	mov	r6, r0
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	d1e1      	bne.n	8006cac <__ssputs_r+0x70>
 8006ce8:	6921      	ldr	r1, [r4, #16]
 8006cea:	4650      	mov	r0, sl
 8006cec:	f7ff fec6 	bl	8006a7c <_free_r>
 8006cf0:	e7c7      	b.n	8006c82 <__ssputs_r+0x46>
	...

08006cf4 <_svfiprintf_r>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	4698      	mov	r8, r3
 8006cfa:	898b      	ldrh	r3, [r1, #12]
 8006cfc:	061b      	lsls	r3, r3, #24
 8006cfe:	b09d      	sub	sp, #116	; 0x74
 8006d00:	4607      	mov	r7, r0
 8006d02:	460d      	mov	r5, r1
 8006d04:	4614      	mov	r4, r2
 8006d06:	d50e      	bpl.n	8006d26 <_svfiprintf_r+0x32>
 8006d08:	690b      	ldr	r3, [r1, #16]
 8006d0a:	b963      	cbnz	r3, 8006d26 <_svfiprintf_r+0x32>
 8006d0c:	2140      	movs	r1, #64	; 0x40
 8006d0e:	f7ff ff21 	bl	8006b54 <_malloc_r>
 8006d12:	6028      	str	r0, [r5, #0]
 8006d14:	6128      	str	r0, [r5, #16]
 8006d16:	b920      	cbnz	r0, 8006d22 <_svfiprintf_r+0x2e>
 8006d18:	230c      	movs	r3, #12
 8006d1a:	603b      	str	r3, [r7, #0]
 8006d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d20:	e0d1      	b.n	8006ec6 <_svfiprintf_r+0x1d2>
 8006d22:	2340      	movs	r3, #64	; 0x40
 8006d24:	616b      	str	r3, [r5, #20]
 8006d26:	2300      	movs	r3, #0
 8006d28:	9309      	str	r3, [sp, #36]	; 0x24
 8006d2a:	2320      	movs	r3, #32
 8006d2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d30:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d34:	2330      	movs	r3, #48	; 0x30
 8006d36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ee0 <_svfiprintf_r+0x1ec>
 8006d3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d3e:	f04f 0901 	mov.w	r9, #1
 8006d42:	4623      	mov	r3, r4
 8006d44:	469a      	mov	sl, r3
 8006d46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d4a:	b10a      	cbz	r2, 8006d50 <_svfiprintf_r+0x5c>
 8006d4c:	2a25      	cmp	r2, #37	; 0x25
 8006d4e:	d1f9      	bne.n	8006d44 <_svfiprintf_r+0x50>
 8006d50:	ebba 0b04 	subs.w	fp, sl, r4
 8006d54:	d00b      	beq.n	8006d6e <_svfiprintf_r+0x7a>
 8006d56:	465b      	mov	r3, fp
 8006d58:	4622      	mov	r2, r4
 8006d5a:	4629      	mov	r1, r5
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	f7ff ff6d 	bl	8006c3c <__ssputs_r>
 8006d62:	3001      	adds	r0, #1
 8006d64:	f000 80aa 	beq.w	8006ebc <_svfiprintf_r+0x1c8>
 8006d68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d6a:	445a      	add	r2, fp
 8006d6c:	9209      	str	r2, [sp, #36]	; 0x24
 8006d6e:	f89a 3000 	ldrb.w	r3, [sl]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	f000 80a2 	beq.w	8006ebc <_svfiprintf_r+0x1c8>
 8006d78:	2300      	movs	r3, #0
 8006d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8006d7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006d82:	f10a 0a01 	add.w	sl, sl, #1
 8006d86:	9304      	str	r3, [sp, #16]
 8006d88:	9307      	str	r3, [sp, #28]
 8006d8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006d8e:	931a      	str	r3, [sp, #104]	; 0x68
 8006d90:	4654      	mov	r4, sl
 8006d92:	2205      	movs	r2, #5
 8006d94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d98:	4851      	ldr	r0, [pc, #324]	; (8006ee0 <_svfiprintf_r+0x1ec>)
 8006d9a:	f7f9 fa29 	bl	80001f0 <memchr>
 8006d9e:	9a04      	ldr	r2, [sp, #16]
 8006da0:	b9d8      	cbnz	r0, 8006dda <_svfiprintf_r+0xe6>
 8006da2:	06d0      	lsls	r0, r2, #27
 8006da4:	bf44      	itt	mi
 8006da6:	2320      	movmi	r3, #32
 8006da8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dac:	0711      	lsls	r1, r2, #28
 8006dae:	bf44      	itt	mi
 8006db0:	232b      	movmi	r3, #43	; 0x2b
 8006db2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006db6:	f89a 3000 	ldrb.w	r3, [sl]
 8006dba:	2b2a      	cmp	r3, #42	; 0x2a
 8006dbc:	d015      	beq.n	8006dea <_svfiprintf_r+0xf6>
 8006dbe:	9a07      	ldr	r2, [sp, #28]
 8006dc0:	4654      	mov	r4, sl
 8006dc2:	2000      	movs	r0, #0
 8006dc4:	f04f 0c0a 	mov.w	ip, #10
 8006dc8:	4621      	mov	r1, r4
 8006dca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006dce:	3b30      	subs	r3, #48	; 0x30
 8006dd0:	2b09      	cmp	r3, #9
 8006dd2:	d94e      	bls.n	8006e72 <_svfiprintf_r+0x17e>
 8006dd4:	b1b0      	cbz	r0, 8006e04 <_svfiprintf_r+0x110>
 8006dd6:	9207      	str	r2, [sp, #28]
 8006dd8:	e014      	b.n	8006e04 <_svfiprintf_r+0x110>
 8006dda:	eba0 0308 	sub.w	r3, r0, r8
 8006dde:	fa09 f303 	lsl.w	r3, r9, r3
 8006de2:	4313      	orrs	r3, r2
 8006de4:	9304      	str	r3, [sp, #16]
 8006de6:	46a2      	mov	sl, r4
 8006de8:	e7d2      	b.n	8006d90 <_svfiprintf_r+0x9c>
 8006dea:	9b03      	ldr	r3, [sp, #12]
 8006dec:	1d19      	adds	r1, r3, #4
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	9103      	str	r1, [sp, #12]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bfbb      	ittet	lt
 8006df6:	425b      	neglt	r3, r3
 8006df8:	f042 0202 	orrlt.w	r2, r2, #2
 8006dfc:	9307      	strge	r3, [sp, #28]
 8006dfe:	9307      	strlt	r3, [sp, #28]
 8006e00:	bfb8      	it	lt
 8006e02:	9204      	strlt	r2, [sp, #16]
 8006e04:	7823      	ldrb	r3, [r4, #0]
 8006e06:	2b2e      	cmp	r3, #46	; 0x2e
 8006e08:	d10c      	bne.n	8006e24 <_svfiprintf_r+0x130>
 8006e0a:	7863      	ldrb	r3, [r4, #1]
 8006e0c:	2b2a      	cmp	r3, #42	; 0x2a
 8006e0e:	d135      	bne.n	8006e7c <_svfiprintf_r+0x188>
 8006e10:	9b03      	ldr	r3, [sp, #12]
 8006e12:	1d1a      	adds	r2, r3, #4
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	9203      	str	r2, [sp, #12]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	bfb8      	it	lt
 8006e1c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e20:	3402      	adds	r4, #2
 8006e22:	9305      	str	r3, [sp, #20]
 8006e24:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ef0 <_svfiprintf_r+0x1fc>
 8006e28:	7821      	ldrb	r1, [r4, #0]
 8006e2a:	2203      	movs	r2, #3
 8006e2c:	4650      	mov	r0, sl
 8006e2e:	f7f9 f9df 	bl	80001f0 <memchr>
 8006e32:	b140      	cbz	r0, 8006e46 <_svfiprintf_r+0x152>
 8006e34:	2340      	movs	r3, #64	; 0x40
 8006e36:	eba0 000a 	sub.w	r0, r0, sl
 8006e3a:	fa03 f000 	lsl.w	r0, r3, r0
 8006e3e:	9b04      	ldr	r3, [sp, #16]
 8006e40:	4303      	orrs	r3, r0
 8006e42:	3401      	adds	r4, #1
 8006e44:	9304      	str	r3, [sp, #16]
 8006e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e4a:	4826      	ldr	r0, [pc, #152]	; (8006ee4 <_svfiprintf_r+0x1f0>)
 8006e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e50:	2206      	movs	r2, #6
 8006e52:	f7f9 f9cd 	bl	80001f0 <memchr>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	d038      	beq.n	8006ecc <_svfiprintf_r+0x1d8>
 8006e5a:	4b23      	ldr	r3, [pc, #140]	; (8006ee8 <_svfiprintf_r+0x1f4>)
 8006e5c:	bb1b      	cbnz	r3, 8006ea6 <_svfiprintf_r+0x1b2>
 8006e5e:	9b03      	ldr	r3, [sp, #12]
 8006e60:	3307      	adds	r3, #7
 8006e62:	f023 0307 	bic.w	r3, r3, #7
 8006e66:	3308      	adds	r3, #8
 8006e68:	9303      	str	r3, [sp, #12]
 8006e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e6c:	4433      	add	r3, r6
 8006e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8006e70:	e767      	b.n	8006d42 <_svfiprintf_r+0x4e>
 8006e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8006e76:	460c      	mov	r4, r1
 8006e78:	2001      	movs	r0, #1
 8006e7a:	e7a5      	b.n	8006dc8 <_svfiprintf_r+0xd4>
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	3401      	adds	r4, #1
 8006e80:	9305      	str	r3, [sp, #20]
 8006e82:	4619      	mov	r1, r3
 8006e84:	f04f 0c0a 	mov.w	ip, #10
 8006e88:	4620      	mov	r0, r4
 8006e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006e8e:	3a30      	subs	r2, #48	; 0x30
 8006e90:	2a09      	cmp	r2, #9
 8006e92:	d903      	bls.n	8006e9c <_svfiprintf_r+0x1a8>
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d0c5      	beq.n	8006e24 <_svfiprintf_r+0x130>
 8006e98:	9105      	str	r1, [sp, #20]
 8006e9a:	e7c3      	b.n	8006e24 <_svfiprintf_r+0x130>
 8006e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e7f0      	b.n	8006e88 <_svfiprintf_r+0x194>
 8006ea6:	ab03      	add	r3, sp, #12
 8006ea8:	9300      	str	r3, [sp, #0]
 8006eaa:	462a      	mov	r2, r5
 8006eac:	4b0f      	ldr	r3, [pc, #60]	; (8006eec <_svfiprintf_r+0x1f8>)
 8006eae:	a904      	add	r1, sp, #16
 8006eb0:	4638      	mov	r0, r7
 8006eb2:	f7fd ffcb 	bl	8004e4c <_printf_float>
 8006eb6:	1c42      	adds	r2, r0, #1
 8006eb8:	4606      	mov	r6, r0
 8006eba:	d1d6      	bne.n	8006e6a <_svfiprintf_r+0x176>
 8006ebc:	89ab      	ldrh	r3, [r5, #12]
 8006ebe:	065b      	lsls	r3, r3, #25
 8006ec0:	f53f af2c 	bmi.w	8006d1c <_svfiprintf_r+0x28>
 8006ec4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ec6:	b01d      	add	sp, #116	; 0x74
 8006ec8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ecc:	ab03      	add	r3, sp, #12
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	462a      	mov	r2, r5
 8006ed2:	4b06      	ldr	r3, [pc, #24]	; (8006eec <_svfiprintf_r+0x1f8>)
 8006ed4:	a904      	add	r1, sp, #16
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	f7fe fa5c 	bl	8005394 <_printf_i>
 8006edc:	e7eb      	b.n	8006eb6 <_svfiprintf_r+0x1c2>
 8006ede:	bf00      	nop
 8006ee0:	08007d6c 	.word	0x08007d6c
 8006ee4:	08007d76 	.word	0x08007d76
 8006ee8:	08004e4d 	.word	0x08004e4d
 8006eec:	08006c3d 	.word	0x08006c3d
 8006ef0:	08007d72 	.word	0x08007d72

08006ef4 <_sbrk_r>:
 8006ef4:	b538      	push	{r3, r4, r5, lr}
 8006ef6:	4d06      	ldr	r5, [pc, #24]	; (8006f10 <_sbrk_r+0x1c>)
 8006ef8:	2300      	movs	r3, #0
 8006efa:	4604      	mov	r4, r0
 8006efc:	4608      	mov	r0, r1
 8006efe:	602b      	str	r3, [r5, #0]
 8006f00:	f7fa ff36 	bl	8001d70 <_sbrk>
 8006f04:	1c43      	adds	r3, r0, #1
 8006f06:	d102      	bne.n	8006f0e <_sbrk_r+0x1a>
 8006f08:	682b      	ldr	r3, [r5, #0]
 8006f0a:	b103      	cbz	r3, 8006f0e <_sbrk_r+0x1a>
 8006f0c:	6023      	str	r3, [r4, #0]
 8006f0e:	bd38      	pop	{r3, r4, r5, pc}
 8006f10:	2000033c 	.word	0x2000033c

08006f14 <__assert_func>:
 8006f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006f16:	4614      	mov	r4, r2
 8006f18:	461a      	mov	r2, r3
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <__assert_func+0x2c>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4605      	mov	r5, r0
 8006f20:	68d8      	ldr	r0, [r3, #12]
 8006f22:	b14c      	cbz	r4, 8006f38 <__assert_func+0x24>
 8006f24:	4b07      	ldr	r3, [pc, #28]	; (8006f44 <__assert_func+0x30>)
 8006f26:	9100      	str	r1, [sp, #0]
 8006f28:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006f2c:	4906      	ldr	r1, [pc, #24]	; (8006f48 <__assert_func+0x34>)
 8006f2e:	462b      	mov	r3, r5
 8006f30:	f000 f80e 	bl	8006f50 <fiprintf>
 8006f34:	f000 faac 	bl	8007490 <abort>
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <__assert_func+0x38>)
 8006f3a:	461c      	mov	r4, r3
 8006f3c:	e7f3      	b.n	8006f26 <__assert_func+0x12>
 8006f3e:	bf00      	nop
 8006f40:	2000000c 	.word	0x2000000c
 8006f44:	08007d7d 	.word	0x08007d7d
 8006f48:	08007d8a 	.word	0x08007d8a
 8006f4c:	08007db8 	.word	0x08007db8

08006f50 <fiprintf>:
 8006f50:	b40e      	push	{r1, r2, r3}
 8006f52:	b503      	push	{r0, r1, lr}
 8006f54:	4601      	mov	r1, r0
 8006f56:	ab03      	add	r3, sp, #12
 8006f58:	4805      	ldr	r0, [pc, #20]	; (8006f70 <fiprintf+0x20>)
 8006f5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f5e:	6800      	ldr	r0, [r0, #0]
 8006f60:	9301      	str	r3, [sp, #4]
 8006f62:	f000 f897 	bl	8007094 <_vfiprintf_r>
 8006f66:	b002      	add	sp, #8
 8006f68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f6c:	b003      	add	sp, #12
 8006f6e:	4770      	bx	lr
 8006f70:	2000000c 	.word	0x2000000c

08006f74 <__ascii_mbtowc>:
 8006f74:	b082      	sub	sp, #8
 8006f76:	b901      	cbnz	r1, 8006f7a <__ascii_mbtowc+0x6>
 8006f78:	a901      	add	r1, sp, #4
 8006f7a:	b142      	cbz	r2, 8006f8e <__ascii_mbtowc+0x1a>
 8006f7c:	b14b      	cbz	r3, 8006f92 <__ascii_mbtowc+0x1e>
 8006f7e:	7813      	ldrb	r3, [r2, #0]
 8006f80:	600b      	str	r3, [r1, #0]
 8006f82:	7812      	ldrb	r2, [r2, #0]
 8006f84:	1e10      	subs	r0, r2, #0
 8006f86:	bf18      	it	ne
 8006f88:	2001      	movne	r0, #1
 8006f8a:	b002      	add	sp, #8
 8006f8c:	4770      	bx	lr
 8006f8e:	4610      	mov	r0, r2
 8006f90:	e7fb      	b.n	8006f8a <__ascii_mbtowc+0x16>
 8006f92:	f06f 0001 	mvn.w	r0, #1
 8006f96:	e7f8      	b.n	8006f8a <__ascii_mbtowc+0x16>

08006f98 <memmove>:
 8006f98:	4288      	cmp	r0, r1
 8006f9a:	b510      	push	{r4, lr}
 8006f9c:	eb01 0402 	add.w	r4, r1, r2
 8006fa0:	d902      	bls.n	8006fa8 <memmove+0x10>
 8006fa2:	4284      	cmp	r4, r0
 8006fa4:	4623      	mov	r3, r4
 8006fa6:	d807      	bhi.n	8006fb8 <memmove+0x20>
 8006fa8:	1e43      	subs	r3, r0, #1
 8006faa:	42a1      	cmp	r1, r4
 8006fac:	d008      	beq.n	8006fc0 <memmove+0x28>
 8006fae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fb6:	e7f8      	b.n	8006faa <memmove+0x12>
 8006fb8:	4402      	add	r2, r0
 8006fba:	4601      	mov	r1, r0
 8006fbc:	428a      	cmp	r2, r1
 8006fbe:	d100      	bne.n	8006fc2 <memmove+0x2a>
 8006fc0:	bd10      	pop	{r4, pc}
 8006fc2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fc6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fca:	e7f7      	b.n	8006fbc <memmove+0x24>

08006fcc <__malloc_lock>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	; (8006fd4 <__malloc_lock+0x8>)
 8006fce:	f000 bc1f 	b.w	8007810 <__retarget_lock_acquire_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	20000340 	.word	0x20000340

08006fd8 <__malloc_unlock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_unlock+0x8>)
 8006fda:	f000 bc1a 	b.w	8007812 <__retarget_lock_release_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20000340 	.word	0x20000340

08006fe4 <_realloc_r>:
 8006fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fe8:	4680      	mov	r8, r0
 8006fea:	4614      	mov	r4, r2
 8006fec:	460e      	mov	r6, r1
 8006fee:	b921      	cbnz	r1, 8006ffa <_realloc_r+0x16>
 8006ff0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	f7ff bdad 	b.w	8006b54 <_malloc_r>
 8006ffa:	b92a      	cbnz	r2, 8007008 <_realloc_r+0x24>
 8006ffc:	f7ff fd3e 	bl	8006a7c <_free_r>
 8007000:	4625      	mov	r5, r4
 8007002:	4628      	mov	r0, r5
 8007004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007008:	f000 fc6a 	bl	80078e0 <_malloc_usable_size_r>
 800700c:	4284      	cmp	r4, r0
 800700e:	4607      	mov	r7, r0
 8007010:	d802      	bhi.n	8007018 <_realloc_r+0x34>
 8007012:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007016:	d812      	bhi.n	800703e <_realloc_r+0x5a>
 8007018:	4621      	mov	r1, r4
 800701a:	4640      	mov	r0, r8
 800701c:	f7ff fd9a 	bl	8006b54 <_malloc_r>
 8007020:	4605      	mov	r5, r0
 8007022:	2800      	cmp	r0, #0
 8007024:	d0ed      	beq.n	8007002 <_realloc_r+0x1e>
 8007026:	42bc      	cmp	r4, r7
 8007028:	4622      	mov	r2, r4
 800702a:	4631      	mov	r1, r6
 800702c:	bf28      	it	cs
 800702e:	463a      	movcs	r2, r7
 8007030:	f7ff f97c 	bl	800632c <memcpy>
 8007034:	4631      	mov	r1, r6
 8007036:	4640      	mov	r0, r8
 8007038:	f7ff fd20 	bl	8006a7c <_free_r>
 800703c:	e7e1      	b.n	8007002 <_realloc_r+0x1e>
 800703e:	4635      	mov	r5, r6
 8007040:	e7df      	b.n	8007002 <_realloc_r+0x1e>

08007042 <__sfputc_r>:
 8007042:	6893      	ldr	r3, [r2, #8]
 8007044:	3b01      	subs	r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	b410      	push	{r4}
 800704a:	6093      	str	r3, [r2, #8]
 800704c:	da08      	bge.n	8007060 <__sfputc_r+0x1e>
 800704e:	6994      	ldr	r4, [r2, #24]
 8007050:	42a3      	cmp	r3, r4
 8007052:	db01      	blt.n	8007058 <__sfputc_r+0x16>
 8007054:	290a      	cmp	r1, #10
 8007056:	d103      	bne.n	8007060 <__sfputc_r+0x1e>
 8007058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800705c:	f000 b94a 	b.w	80072f4 <__swbuf_r>
 8007060:	6813      	ldr	r3, [r2, #0]
 8007062:	1c58      	adds	r0, r3, #1
 8007064:	6010      	str	r0, [r2, #0]
 8007066:	7019      	strb	r1, [r3, #0]
 8007068:	4608      	mov	r0, r1
 800706a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800706e:	4770      	bx	lr

08007070 <__sfputs_r>:
 8007070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007072:	4606      	mov	r6, r0
 8007074:	460f      	mov	r7, r1
 8007076:	4614      	mov	r4, r2
 8007078:	18d5      	adds	r5, r2, r3
 800707a:	42ac      	cmp	r4, r5
 800707c:	d101      	bne.n	8007082 <__sfputs_r+0x12>
 800707e:	2000      	movs	r0, #0
 8007080:	e007      	b.n	8007092 <__sfputs_r+0x22>
 8007082:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007086:	463a      	mov	r2, r7
 8007088:	4630      	mov	r0, r6
 800708a:	f7ff ffda 	bl	8007042 <__sfputc_r>
 800708e:	1c43      	adds	r3, r0, #1
 8007090:	d1f3      	bne.n	800707a <__sfputs_r+0xa>
 8007092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007094 <_vfiprintf_r>:
 8007094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007098:	460d      	mov	r5, r1
 800709a:	b09d      	sub	sp, #116	; 0x74
 800709c:	4614      	mov	r4, r2
 800709e:	4698      	mov	r8, r3
 80070a0:	4606      	mov	r6, r0
 80070a2:	b118      	cbz	r0, 80070ac <_vfiprintf_r+0x18>
 80070a4:	6983      	ldr	r3, [r0, #24]
 80070a6:	b90b      	cbnz	r3, 80070ac <_vfiprintf_r+0x18>
 80070a8:	f000 fb14 	bl	80076d4 <__sinit>
 80070ac:	4b89      	ldr	r3, [pc, #548]	; (80072d4 <_vfiprintf_r+0x240>)
 80070ae:	429d      	cmp	r5, r3
 80070b0:	d11b      	bne.n	80070ea <_vfiprintf_r+0x56>
 80070b2:	6875      	ldr	r5, [r6, #4]
 80070b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070b6:	07d9      	lsls	r1, r3, #31
 80070b8:	d405      	bmi.n	80070c6 <_vfiprintf_r+0x32>
 80070ba:	89ab      	ldrh	r3, [r5, #12]
 80070bc:	059a      	lsls	r2, r3, #22
 80070be:	d402      	bmi.n	80070c6 <_vfiprintf_r+0x32>
 80070c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070c2:	f000 fba5 	bl	8007810 <__retarget_lock_acquire_recursive>
 80070c6:	89ab      	ldrh	r3, [r5, #12]
 80070c8:	071b      	lsls	r3, r3, #28
 80070ca:	d501      	bpl.n	80070d0 <_vfiprintf_r+0x3c>
 80070cc:	692b      	ldr	r3, [r5, #16]
 80070ce:	b9eb      	cbnz	r3, 800710c <_vfiprintf_r+0x78>
 80070d0:	4629      	mov	r1, r5
 80070d2:	4630      	mov	r0, r6
 80070d4:	f000 f96e 	bl	80073b4 <__swsetup_r>
 80070d8:	b1c0      	cbz	r0, 800710c <_vfiprintf_r+0x78>
 80070da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070dc:	07dc      	lsls	r4, r3, #31
 80070de:	d50e      	bpl.n	80070fe <_vfiprintf_r+0x6a>
 80070e0:	f04f 30ff 	mov.w	r0, #4294967295
 80070e4:	b01d      	add	sp, #116	; 0x74
 80070e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ea:	4b7b      	ldr	r3, [pc, #492]	; (80072d8 <_vfiprintf_r+0x244>)
 80070ec:	429d      	cmp	r5, r3
 80070ee:	d101      	bne.n	80070f4 <_vfiprintf_r+0x60>
 80070f0:	68b5      	ldr	r5, [r6, #8]
 80070f2:	e7df      	b.n	80070b4 <_vfiprintf_r+0x20>
 80070f4:	4b79      	ldr	r3, [pc, #484]	; (80072dc <_vfiprintf_r+0x248>)
 80070f6:	429d      	cmp	r5, r3
 80070f8:	bf08      	it	eq
 80070fa:	68f5      	ldreq	r5, [r6, #12]
 80070fc:	e7da      	b.n	80070b4 <_vfiprintf_r+0x20>
 80070fe:	89ab      	ldrh	r3, [r5, #12]
 8007100:	0598      	lsls	r0, r3, #22
 8007102:	d4ed      	bmi.n	80070e0 <_vfiprintf_r+0x4c>
 8007104:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007106:	f000 fb84 	bl	8007812 <__retarget_lock_release_recursive>
 800710a:	e7e9      	b.n	80070e0 <_vfiprintf_r+0x4c>
 800710c:	2300      	movs	r3, #0
 800710e:	9309      	str	r3, [sp, #36]	; 0x24
 8007110:	2320      	movs	r3, #32
 8007112:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007116:	f8cd 800c 	str.w	r8, [sp, #12]
 800711a:	2330      	movs	r3, #48	; 0x30
 800711c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072e0 <_vfiprintf_r+0x24c>
 8007120:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007124:	f04f 0901 	mov.w	r9, #1
 8007128:	4623      	mov	r3, r4
 800712a:	469a      	mov	sl, r3
 800712c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007130:	b10a      	cbz	r2, 8007136 <_vfiprintf_r+0xa2>
 8007132:	2a25      	cmp	r2, #37	; 0x25
 8007134:	d1f9      	bne.n	800712a <_vfiprintf_r+0x96>
 8007136:	ebba 0b04 	subs.w	fp, sl, r4
 800713a:	d00b      	beq.n	8007154 <_vfiprintf_r+0xc0>
 800713c:	465b      	mov	r3, fp
 800713e:	4622      	mov	r2, r4
 8007140:	4629      	mov	r1, r5
 8007142:	4630      	mov	r0, r6
 8007144:	f7ff ff94 	bl	8007070 <__sfputs_r>
 8007148:	3001      	adds	r0, #1
 800714a:	f000 80aa 	beq.w	80072a2 <_vfiprintf_r+0x20e>
 800714e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007150:	445a      	add	r2, fp
 8007152:	9209      	str	r2, [sp, #36]	; 0x24
 8007154:	f89a 3000 	ldrb.w	r3, [sl]
 8007158:	2b00      	cmp	r3, #0
 800715a:	f000 80a2 	beq.w	80072a2 <_vfiprintf_r+0x20e>
 800715e:	2300      	movs	r3, #0
 8007160:	f04f 32ff 	mov.w	r2, #4294967295
 8007164:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007168:	f10a 0a01 	add.w	sl, sl, #1
 800716c:	9304      	str	r3, [sp, #16]
 800716e:	9307      	str	r3, [sp, #28]
 8007170:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007174:	931a      	str	r3, [sp, #104]	; 0x68
 8007176:	4654      	mov	r4, sl
 8007178:	2205      	movs	r2, #5
 800717a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717e:	4858      	ldr	r0, [pc, #352]	; (80072e0 <_vfiprintf_r+0x24c>)
 8007180:	f7f9 f836 	bl	80001f0 <memchr>
 8007184:	9a04      	ldr	r2, [sp, #16]
 8007186:	b9d8      	cbnz	r0, 80071c0 <_vfiprintf_r+0x12c>
 8007188:	06d1      	lsls	r1, r2, #27
 800718a:	bf44      	itt	mi
 800718c:	2320      	movmi	r3, #32
 800718e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007192:	0713      	lsls	r3, r2, #28
 8007194:	bf44      	itt	mi
 8007196:	232b      	movmi	r3, #43	; 0x2b
 8007198:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800719c:	f89a 3000 	ldrb.w	r3, [sl]
 80071a0:	2b2a      	cmp	r3, #42	; 0x2a
 80071a2:	d015      	beq.n	80071d0 <_vfiprintf_r+0x13c>
 80071a4:	9a07      	ldr	r2, [sp, #28]
 80071a6:	4654      	mov	r4, sl
 80071a8:	2000      	movs	r0, #0
 80071aa:	f04f 0c0a 	mov.w	ip, #10
 80071ae:	4621      	mov	r1, r4
 80071b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071b4:	3b30      	subs	r3, #48	; 0x30
 80071b6:	2b09      	cmp	r3, #9
 80071b8:	d94e      	bls.n	8007258 <_vfiprintf_r+0x1c4>
 80071ba:	b1b0      	cbz	r0, 80071ea <_vfiprintf_r+0x156>
 80071bc:	9207      	str	r2, [sp, #28]
 80071be:	e014      	b.n	80071ea <_vfiprintf_r+0x156>
 80071c0:	eba0 0308 	sub.w	r3, r0, r8
 80071c4:	fa09 f303 	lsl.w	r3, r9, r3
 80071c8:	4313      	orrs	r3, r2
 80071ca:	9304      	str	r3, [sp, #16]
 80071cc:	46a2      	mov	sl, r4
 80071ce:	e7d2      	b.n	8007176 <_vfiprintf_r+0xe2>
 80071d0:	9b03      	ldr	r3, [sp, #12]
 80071d2:	1d19      	adds	r1, r3, #4
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	9103      	str	r1, [sp, #12]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	bfbb      	ittet	lt
 80071dc:	425b      	neglt	r3, r3
 80071de:	f042 0202 	orrlt.w	r2, r2, #2
 80071e2:	9307      	strge	r3, [sp, #28]
 80071e4:	9307      	strlt	r3, [sp, #28]
 80071e6:	bfb8      	it	lt
 80071e8:	9204      	strlt	r2, [sp, #16]
 80071ea:	7823      	ldrb	r3, [r4, #0]
 80071ec:	2b2e      	cmp	r3, #46	; 0x2e
 80071ee:	d10c      	bne.n	800720a <_vfiprintf_r+0x176>
 80071f0:	7863      	ldrb	r3, [r4, #1]
 80071f2:	2b2a      	cmp	r3, #42	; 0x2a
 80071f4:	d135      	bne.n	8007262 <_vfiprintf_r+0x1ce>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	1d1a      	adds	r2, r3, #4
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	9203      	str	r2, [sp, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	bfb8      	it	lt
 8007202:	f04f 33ff 	movlt.w	r3, #4294967295
 8007206:	3402      	adds	r4, #2
 8007208:	9305      	str	r3, [sp, #20]
 800720a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072f0 <_vfiprintf_r+0x25c>
 800720e:	7821      	ldrb	r1, [r4, #0]
 8007210:	2203      	movs	r2, #3
 8007212:	4650      	mov	r0, sl
 8007214:	f7f8 ffec 	bl	80001f0 <memchr>
 8007218:	b140      	cbz	r0, 800722c <_vfiprintf_r+0x198>
 800721a:	2340      	movs	r3, #64	; 0x40
 800721c:	eba0 000a 	sub.w	r0, r0, sl
 8007220:	fa03 f000 	lsl.w	r0, r3, r0
 8007224:	9b04      	ldr	r3, [sp, #16]
 8007226:	4303      	orrs	r3, r0
 8007228:	3401      	adds	r4, #1
 800722a:	9304      	str	r3, [sp, #16]
 800722c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007230:	482c      	ldr	r0, [pc, #176]	; (80072e4 <_vfiprintf_r+0x250>)
 8007232:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007236:	2206      	movs	r2, #6
 8007238:	f7f8 ffda 	bl	80001f0 <memchr>
 800723c:	2800      	cmp	r0, #0
 800723e:	d03f      	beq.n	80072c0 <_vfiprintf_r+0x22c>
 8007240:	4b29      	ldr	r3, [pc, #164]	; (80072e8 <_vfiprintf_r+0x254>)
 8007242:	bb1b      	cbnz	r3, 800728c <_vfiprintf_r+0x1f8>
 8007244:	9b03      	ldr	r3, [sp, #12]
 8007246:	3307      	adds	r3, #7
 8007248:	f023 0307 	bic.w	r3, r3, #7
 800724c:	3308      	adds	r3, #8
 800724e:	9303      	str	r3, [sp, #12]
 8007250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007252:	443b      	add	r3, r7
 8007254:	9309      	str	r3, [sp, #36]	; 0x24
 8007256:	e767      	b.n	8007128 <_vfiprintf_r+0x94>
 8007258:	fb0c 3202 	mla	r2, ip, r2, r3
 800725c:	460c      	mov	r4, r1
 800725e:	2001      	movs	r0, #1
 8007260:	e7a5      	b.n	80071ae <_vfiprintf_r+0x11a>
 8007262:	2300      	movs	r3, #0
 8007264:	3401      	adds	r4, #1
 8007266:	9305      	str	r3, [sp, #20]
 8007268:	4619      	mov	r1, r3
 800726a:	f04f 0c0a 	mov.w	ip, #10
 800726e:	4620      	mov	r0, r4
 8007270:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007274:	3a30      	subs	r2, #48	; 0x30
 8007276:	2a09      	cmp	r2, #9
 8007278:	d903      	bls.n	8007282 <_vfiprintf_r+0x1ee>
 800727a:	2b00      	cmp	r3, #0
 800727c:	d0c5      	beq.n	800720a <_vfiprintf_r+0x176>
 800727e:	9105      	str	r1, [sp, #20]
 8007280:	e7c3      	b.n	800720a <_vfiprintf_r+0x176>
 8007282:	fb0c 2101 	mla	r1, ip, r1, r2
 8007286:	4604      	mov	r4, r0
 8007288:	2301      	movs	r3, #1
 800728a:	e7f0      	b.n	800726e <_vfiprintf_r+0x1da>
 800728c:	ab03      	add	r3, sp, #12
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	462a      	mov	r2, r5
 8007292:	4b16      	ldr	r3, [pc, #88]	; (80072ec <_vfiprintf_r+0x258>)
 8007294:	a904      	add	r1, sp, #16
 8007296:	4630      	mov	r0, r6
 8007298:	f7fd fdd8 	bl	8004e4c <_printf_float>
 800729c:	4607      	mov	r7, r0
 800729e:	1c78      	adds	r0, r7, #1
 80072a0:	d1d6      	bne.n	8007250 <_vfiprintf_r+0x1bc>
 80072a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072a4:	07d9      	lsls	r1, r3, #31
 80072a6:	d405      	bmi.n	80072b4 <_vfiprintf_r+0x220>
 80072a8:	89ab      	ldrh	r3, [r5, #12]
 80072aa:	059a      	lsls	r2, r3, #22
 80072ac:	d402      	bmi.n	80072b4 <_vfiprintf_r+0x220>
 80072ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072b0:	f000 faaf 	bl	8007812 <__retarget_lock_release_recursive>
 80072b4:	89ab      	ldrh	r3, [r5, #12]
 80072b6:	065b      	lsls	r3, r3, #25
 80072b8:	f53f af12 	bmi.w	80070e0 <_vfiprintf_r+0x4c>
 80072bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072be:	e711      	b.n	80070e4 <_vfiprintf_r+0x50>
 80072c0:	ab03      	add	r3, sp, #12
 80072c2:	9300      	str	r3, [sp, #0]
 80072c4:	462a      	mov	r2, r5
 80072c6:	4b09      	ldr	r3, [pc, #36]	; (80072ec <_vfiprintf_r+0x258>)
 80072c8:	a904      	add	r1, sp, #16
 80072ca:	4630      	mov	r0, r6
 80072cc:	f7fe f862 	bl	8005394 <_printf_i>
 80072d0:	e7e4      	b.n	800729c <_vfiprintf_r+0x208>
 80072d2:	bf00      	nop
 80072d4:	08007ee4 	.word	0x08007ee4
 80072d8:	08007f04 	.word	0x08007f04
 80072dc:	08007ec4 	.word	0x08007ec4
 80072e0:	08007d6c 	.word	0x08007d6c
 80072e4:	08007d76 	.word	0x08007d76
 80072e8:	08004e4d 	.word	0x08004e4d
 80072ec:	08007071 	.word	0x08007071
 80072f0:	08007d72 	.word	0x08007d72

080072f4 <__swbuf_r>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	460e      	mov	r6, r1
 80072f8:	4614      	mov	r4, r2
 80072fa:	4605      	mov	r5, r0
 80072fc:	b118      	cbz	r0, 8007306 <__swbuf_r+0x12>
 80072fe:	6983      	ldr	r3, [r0, #24]
 8007300:	b90b      	cbnz	r3, 8007306 <__swbuf_r+0x12>
 8007302:	f000 f9e7 	bl	80076d4 <__sinit>
 8007306:	4b21      	ldr	r3, [pc, #132]	; (800738c <__swbuf_r+0x98>)
 8007308:	429c      	cmp	r4, r3
 800730a:	d12b      	bne.n	8007364 <__swbuf_r+0x70>
 800730c:	686c      	ldr	r4, [r5, #4]
 800730e:	69a3      	ldr	r3, [r4, #24]
 8007310:	60a3      	str	r3, [r4, #8]
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	071a      	lsls	r2, r3, #28
 8007316:	d52f      	bpl.n	8007378 <__swbuf_r+0x84>
 8007318:	6923      	ldr	r3, [r4, #16]
 800731a:	b36b      	cbz	r3, 8007378 <__swbuf_r+0x84>
 800731c:	6923      	ldr	r3, [r4, #16]
 800731e:	6820      	ldr	r0, [r4, #0]
 8007320:	1ac0      	subs	r0, r0, r3
 8007322:	6963      	ldr	r3, [r4, #20]
 8007324:	b2f6      	uxtb	r6, r6
 8007326:	4283      	cmp	r3, r0
 8007328:	4637      	mov	r7, r6
 800732a:	dc04      	bgt.n	8007336 <__swbuf_r+0x42>
 800732c:	4621      	mov	r1, r4
 800732e:	4628      	mov	r0, r5
 8007330:	f000 f93c 	bl	80075ac <_fflush_r>
 8007334:	bb30      	cbnz	r0, 8007384 <__swbuf_r+0x90>
 8007336:	68a3      	ldr	r3, [r4, #8]
 8007338:	3b01      	subs	r3, #1
 800733a:	60a3      	str	r3, [r4, #8]
 800733c:	6823      	ldr	r3, [r4, #0]
 800733e:	1c5a      	adds	r2, r3, #1
 8007340:	6022      	str	r2, [r4, #0]
 8007342:	701e      	strb	r6, [r3, #0]
 8007344:	6963      	ldr	r3, [r4, #20]
 8007346:	3001      	adds	r0, #1
 8007348:	4283      	cmp	r3, r0
 800734a:	d004      	beq.n	8007356 <__swbuf_r+0x62>
 800734c:	89a3      	ldrh	r3, [r4, #12]
 800734e:	07db      	lsls	r3, r3, #31
 8007350:	d506      	bpl.n	8007360 <__swbuf_r+0x6c>
 8007352:	2e0a      	cmp	r6, #10
 8007354:	d104      	bne.n	8007360 <__swbuf_r+0x6c>
 8007356:	4621      	mov	r1, r4
 8007358:	4628      	mov	r0, r5
 800735a:	f000 f927 	bl	80075ac <_fflush_r>
 800735e:	b988      	cbnz	r0, 8007384 <__swbuf_r+0x90>
 8007360:	4638      	mov	r0, r7
 8007362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007364:	4b0a      	ldr	r3, [pc, #40]	; (8007390 <__swbuf_r+0x9c>)
 8007366:	429c      	cmp	r4, r3
 8007368:	d101      	bne.n	800736e <__swbuf_r+0x7a>
 800736a:	68ac      	ldr	r4, [r5, #8]
 800736c:	e7cf      	b.n	800730e <__swbuf_r+0x1a>
 800736e:	4b09      	ldr	r3, [pc, #36]	; (8007394 <__swbuf_r+0xa0>)
 8007370:	429c      	cmp	r4, r3
 8007372:	bf08      	it	eq
 8007374:	68ec      	ldreq	r4, [r5, #12]
 8007376:	e7ca      	b.n	800730e <__swbuf_r+0x1a>
 8007378:	4621      	mov	r1, r4
 800737a:	4628      	mov	r0, r5
 800737c:	f000 f81a 	bl	80073b4 <__swsetup_r>
 8007380:	2800      	cmp	r0, #0
 8007382:	d0cb      	beq.n	800731c <__swbuf_r+0x28>
 8007384:	f04f 37ff 	mov.w	r7, #4294967295
 8007388:	e7ea      	b.n	8007360 <__swbuf_r+0x6c>
 800738a:	bf00      	nop
 800738c:	08007ee4 	.word	0x08007ee4
 8007390:	08007f04 	.word	0x08007f04
 8007394:	08007ec4 	.word	0x08007ec4

08007398 <__ascii_wctomb>:
 8007398:	b149      	cbz	r1, 80073ae <__ascii_wctomb+0x16>
 800739a:	2aff      	cmp	r2, #255	; 0xff
 800739c:	bf85      	ittet	hi
 800739e:	238a      	movhi	r3, #138	; 0x8a
 80073a0:	6003      	strhi	r3, [r0, #0]
 80073a2:	700a      	strbls	r2, [r1, #0]
 80073a4:	f04f 30ff 	movhi.w	r0, #4294967295
 80073a8:	bf98      	it	ls
 80073aa:	2001      	movls	r0, #1
 80073ac:	4770      	bx	lr
 80073ae:	4608      	mov	r0, r1
 80073b0:	4770      	bx	lr
	...

080073b4 <__swsetup_r>:
 80073b4:	4b32      	ldr	r3, [pc, #200]	; (8007480 <__swsetup_r+0xcc>)
 80073b6:	b570      	push	{r4, r5, r6, lr}
 80073b8:	681d      	ldr	r5, [r3, #0]
 80073ba:	4606      	mov	r6, r0
 80073bc:	460c      	mov	r4, r1
 80073be:	b125      	cbz	r5, 80073ca <__swsetup_r+0x16>
 80073c0:	69ab      	ldr	r3, [r5, #24]
 80073c2:	b913      	cbnz	r3, 80073ca <__swsetup_r+0x16>
 80073c4:	4628      	mov	r0, r5
 80073c6:	f000 f985 	bl	80076d4 <__sinit>
 80073ca:	4b2e      	ldr	r3, [pc, #184]	; (8007484 <__swsetup_r+0xd0>)
 80073cc:	429c      	cmp	r4, r3
 80073ce:	d10f      	bne.n	80073f0 <__swsetup_r+0x3c>
 80073d0:	686c      	ldr	r4, [r5, #4]
 80073d2:	89a3      	ldrh	r3, [r4, #12]
 80073d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80073d8:	0719      	lsls	r1, r3, #28
 80073da:	d42c      	bmi.n	8007436 <__swsetup_r+0x82>
 80073dc:	06dd      	lsls	r5, r3, #27
 80073de:	d411      	bmi.n	8007404 <__swsetup_r+0x50>
 80073e0:	2309      	movs	r3, #9
 80073e2:	6033      	str	r3, [r6, #0]
 80073e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80073e8:	81a3      	strh	r3, [r4, #12]
 80073ea:	f04f 30ff 	mov.w	r0, #4294967295
 80073ee:	e03e      	b.n	800746e <__swsetup_r+0xba>
 80073f0:	4b25      	ldr	r3, [pc, #148]	; (8007488 <__swsetup_r+0xd4>)
 80073f2:	429c      	cmp	r4, r3
 80073f4:	d101      	bne.n	80073fa <__swsetup_r+0x46>
 80073f6:	68ac      	ldr	r4, [r5, #8]
 80073f8:	e7eb      	b.n	80073d2 <__swsetup_r+0x1e>
 80073fa:	4b24      	ldr	r3, [pc, #144]	; (800748c <__swsetup_r+0xd8>)
 80073fc:	429c      	cmp	r4, r3
 80073fe:	bf08      	it	eq
 8007400:	68ec      	ldreq	r4, [r5, #12]
 8007402:	e7e6      	b.n	80073d2 <__swsetup_r+0x1e>
 8007404:	0758      	lsls	r0, r3, #29
 8007406:	d512      	bpl.n	800742e <__swsetup_r+0x7a>
 8007408:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800740a:	b141      	cbz	r1, 800741e <__swsetup_r+0x6a>
 800740c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007410:	4299      	cmp	r1, r3
 8007412:	d002      	beq.n	800741a <__swsetup_r+0x66>
 8007414:	4630      	mov	r0, r6
 8007416:	f7ff fb31 	bl	8006a7c <_free_r>
 800741a:	2300      	movs	r3, #0
 800741c:	6363      	str	r3, [r4, #52]	; 0x34
 800741e:	89a3      	ldrh	r3, [r4, #12]
 8007420:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007424:	81a3      	strh	r3, [r4, #12]
 8007426:	2300      	movs	r3, #0
 8007428:	6063      	str	r3, [r4, #4]
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	6023      	str	r3, [r4, #0]
 800742e:	89a3      	ldrh	r3, [r4, #12]
 8007430:	f043 0308 	orr.w	r3, r3, #8
 8007434:	81a3      	strh	r3, [r4, #12]
 8007436:	6923      	ldr	r3, [r4, #16]
 8007438:	b94b      	cbnz	r3, 800744e <__swsetup_r+0x9a>
 800743a:	89a3      	ldrh	r3, [r4, #12]
 800743c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007440:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007444:	d003      	beq.n	800744e <__swsetup_r+0x9a>
 8007446:	4621      	mov	r1, r4
 8007448:	4630      	mov	r0, r6
 800744a:	f000 fa09 	bl	8007860 <__smakebuf_r>
 800744e:	89a0      	ldrh	r0, [r4, #12]
 8007450:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007454:	f010 0301 	ands.w	r3, r0, #1
 8007458:	d00a      	beq.n	8007470 <__swsetup_r+0xbc>
 800745a:	2300      	movs	r3, #0
 800745c:	60a3      	str	r3, [r4, #8]
 800745e:	6963      	ldr	r3, [r4, #20]
 8007460:	425b      	negs	r3, r3
 8007462:	61a3      	str	r3, [r4, #24]
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	b943      	cbnz	r3, 800747a <__swsetup_r+0xc6>
 8007468:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800746c:	d1ba      	bne.n	80073e4 <__swsetup_r+0x30>
 800746e:	bd70      	pop	{r4, r5, r6, pc}
 8007470:	0781      	lsls	r1, r0, #30
 8007472:	bf58      	it	pl
 8007474:	6963      	ldrpl	r3, [r4, #20]
 8007476:	60a3      	str	r3, [r4, #8]
 8007478:	e7f4      	b.n	8007464 <__swsetup_r+0xb0>
 800747a:	2000      	movs	r0, #0
 800747c:	e7f7      	b.n	800746e <__swsetup_r+0xba>
 800747e:	bf00      	nop
 8007480:	2000000c 	.word	0x2000000c
 8007484:	08007ee4 	.word	0x08007ee4
 8007488:	08007f04 	.word	0x08007f04
 800748c:	08007ec4 	.word	0x08007ec4

08007490 <abort>:
 8007490:	b508      	push	{r3, lr}
 8007492:	2006      	movs	r0, #6
 8007494:	f000 fa54 	bl	8007940 <raise>
 8007498:	2001      	movs	r0, #1
 800749a:	f7fa fbf1 	bl	8001c80 <_exit>
	...

080074a0 <__sflush_r>:
 80074a0:	898a      	ldrh	r2, [r1, #12]
 80074a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a6:	4605      	mov	r5, r0
 80074a8:	0710      	lsls	r0, r2, #28
 80074aa:	460c      	mov	r4, r1
 80074ac:	d458      	bmi.n	8007560 <__sflush_r+0xc0>
 80074ae:	684b      	ldr	r3, [r1, #4]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	dc05      	bgt.n	80074c0 <__sflush_r+0x20>
 80074b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	dc02      	bgt.n	80074c0 <__sflush_r+0x20>
 80074ba:	2000      	movs	r0, #0
 80074bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074c2:	2e00      	cmp	r6, #0
 80074c4:	d0f9      	beq.n	80074ba <__sflush_r+0x1a>
 80074c6:	2300      	movs	r3, #0
 80074c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80074cc:	682f      	ldr	r7, [r5, #0]
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	d032      	beq.n	8007538 <__sflush_r+0x98>
 80074d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80074d4:	89a3      	ldrh	r3, [r4, #12]
 80074d6:	075a      	lsls	r2, r3, #29
 80074d8:	d505      	bpl.n	80074e6 <__sflush_r+0x46>
 80074da:	6863      	ldr	r3, [r4, #4]
 80074dc:	1ac0      	subs	r0, r0, r3
 80074de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80074e0:	b10b      	cbz	r3, 80074e6 <__sflush_r+0x46>
 80074e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80074e4:	1ac0      	subs	r0, r0, r3
 80074e6:	2300      	movs	r3, #0
 80074e8:	4602      	mov	r2, r0
 80074ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074ec:	6a21      	ldr	r1, [r4, #32]
 80074ee:	4628      	mov	r0, r5
 80074f0:	47b0      	blx	r6
 80074f2:	1c43      	adds	r3, r0, #1
 80074f4:	89a3      	ldrh	r3, [r4, #12]
 80074f6:	d106      	bne.n	8007506 <__sflush_r+0x66>
 80074f8:	6829      	ldr	r1, [r5, #0]
 80074fa:	291d      	cmp	r1, #29
 80074fc:	d82c      	bhi.n	8007558 <__sflush_r+0xb8>
 80074fe:	4a2a      	ldr	r2, [pc, #168]	; (80075a8 <__sflush_r+0x108>)
 8007500:	40ca      	lsrs	r2, r1
 8007502:	07d6      	lsls	r6, r2, #31
 8007504:	d528      	bpl.n	8007558 <__sflush_r+0xb8>
 8007506:	2200      	movs	r2, #0
 8007508:	6062      	str	r2, [r4, #4]
 800750a:	04d9      	lsls	r1, r3, #19
 800750c:	6922      	ldr	r2, [r4, #16]
 800750e:	6022      	str	r2, [r4, #0]
 8007510:	d504      	bpl.n	800751c <__sflush_r+0x7c>
 8007512:	1c42      	adds	r2, r0, #1
 8007514:	d101      	bne.n	800751a <__sflush_r+0x7a>
 8007516:	682b      	ldr	r3, [r5, #0]
 8007518:	b903      	cbnz	r3, 800751c <__sflush_r+0x7c>
 800751a:	6560      	str	r0, [r4, #84]	; 0x54
 800751c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800751e:	602f      	str	r7, [r5, #0]
 8007520:	2900      	cmp	r1, #0
 8007522:	d0ca      	beq.n	80074ba <__sflush_r+0x1a>
 8007524:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007528:	4299      	cmp	r1, r3
 800752a:	d002      	beq.n	8007532 <__sflush_r+0x92>
 800752c:	4628      	mov	r0, r5
 800752e:	f7ff faa5 	bl	8006a7c <_free_r>
 8007532:	2000      	movs	r0, #0
 8007534:	6360      	str	r0, [r4, #52]	; 0x34
 8007536:	e7c1      	b.n	80074bc <__sflush_r+0x1c>
 8007538:	6a21      	ldr	r1, [r4, #32]
 800753a:	2301      	movs	r3, #1
 800753c:	4628      	mov	r0, r5
 800753e:	47b0      	blx	r6
 8007540:	1c41      	adds	r1, r0, #1
 8007542:	d1c7      	bne.n	80074d4 <__sflush_r+0x34>
 8007544:	682b      	ldr	r3, [r5, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d0c4      	beq.n	80074d4 <__sflush_r+0x34>
 800754a:	2b1d      	cmp	r3, #29
 800754c:	d001      	beq.n	8007552 <__sflush_r+0xb2>
 800754e:	2b16      	cmp	r3, #22
 8007550:	d101      	bne.n	8007556 <__sflush_r+0xb6>
 8007552:	602f      	str	r7, [r5, #0]
 8007554:	e7b1      	b.n	80074ba <__sflush_r+0x1a>
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	e7ad      	b.n	80074bc <__sflush_r+0x1c>
 8007560:	690f      	ldr	r7, [r1, #16]
 8007562:	2f00      	cmp	r7, #0
 8007564:	d0a9      	beq.n	80074ba <__sflush_r+0x1a>
 8007566:	0793      	lsls	r3, r2, #30
 8007568:	680e      	ldr	r6, [r1, #0]
 800756a:	bf08      	it	eq
 800756c:	694b      	ldreq	r3, [r1, #20]
 800756e:	600f      	str	r7, [r1, #0]
 8007570:	bf18      	it	ne
 8007572:	2300      	movne	r3, #0
 8007574:	eba6 0807 	sub.w	r8, r6, r7
 8007578:	608b      	str	r3, [r1, #8]
 800757a:	f1b8 0f00 	cmp.w	r8, #0
 800757e:	dd9c      	ble.n	80074ba <__sflush_r+0x1a>
 8007580:	6a21      	ldr	r1, [r4, #32]
 8007582:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007584:	4643      	mov	r3, r8
 8007586:	463a      	mov	r2, r7
 8007588:	4628      	mov	r0, r5
 800758a:	47b0      	blx	r6
 800758c:	2800      	cmp	r0, #0
 800758e:	dc06      	bgt.n	800759e <__sflush_r+0xfe>
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007596:	81a3      	strh	r3, [r4, #12]
 8007598:	f04f 30ff 	mov.w	r0, #4294967295
 800759c:	e78e      	b.n	80074bc <__sflush_r+0x1c>
 800759e:	4407      	add	r7, r0
 80075a0:	eba8 0800 	sub.w	r8, r8, r0
 80075a4:	e7e9      	b.n	800757a <__sflush_r+0xda>
 80075a6:	bf00      	nop
 80075a8:	20400001 	.word	0x20400001

080075ac <_fflush_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	690b      	ldr	r3, [r1, #16]
 80075b0:	4605      	mov	r5, r0
 80075b2:	460c      	mov	r4, r1
 80075b4:	b913      	cbnz	r3, 80075bc <_fflush_r+0x10>
 80075b6:	2500      	movs	r5, #0
 80075b8:	4628      	mov	r0, r5
 80075ba:	bd38      	pop	{r3, r4, r5, pc}
 80075bc:	b118      	cbz	r0, 80075c6 <_fflush_r+0x1a>
 80075be:	6983      	ldr	r3, [r0, #24]
 80075c0:	b90b      	cbnz	r3, 80075c6 <_fflush_r+0x1a>
 80075c2:	f000 f887 	bl	80076d4 <__sinit>
 80075c6:	4b14      	ldr	r3, [pc, #80]	; (8007618 <_fflush_r+0x6c>)
 80075c8:	429c      	cmp	r4, r3
 80075ca:	d11b      	bne.n	8007604 <_fflush_r+0x58>
 80075cc:	686c      	ldr	r4, [r5, #4]
 80075ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d0ef      	beq.n	80075b6 <_fflush_r+0xa>
 80075d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80075d8:	07d0      	lsls	r0, r2, #31
 80075da:	d404      	bmi.n	80075e6 <_fflush_r+0x3a>
 80075dc:	0599      	lsls	r1, r3, #22
 80075de:	d402      	bmi.n	80075e6 <_fflush_r+0x3a>
 80075e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075e2:	f000 f915 	bl	8007810 <__retarget_lock_acquire_recursive>
 80075e6:	4628      	mov	r0, r5
 80075e8:	4621      	mov	r1, r4
 80075ea:	f7ff ff59 	bl	80074a0 <__sflush_r>
 80075ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80075f0:	07da      	lsls	r2, r3, #31
 80075f2:	4605      	mov	r5, r0
 80075f4:	d4e0      	bmi.n	80075b8 <_fflush_r+0xc>
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	059b      	lsls	r3, r3, #22
 80075fa:	d4dd      	bmi.n	80075b8 <_fflush_r+0xc>
 80075fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80075fe:	f000 f908 	bl	8007812 <__retarget_lock_release_recursive>
 8007602:	e7d9      	b.n	80075b8 <_fflush_r+0xc>
 8007604:	4b05      	ldr	r3, [pc, #20]	; (800761c <_fflush_r+0x70>)
 8007606:	429c      	cmp	r4, r3
 8007608:	d101      	bne.n	800760e <_fflush_r+0x62>
 800760a:	68ac      	ldr	r4, [r5, #8]
 800760c:	e7df      	b.n	80075ce <_fflush_r+0x22>
 800760e:	4b04      	ldr	r3, [pc, #16]	; (8007620 <_fflush_r+0x74>)
 8007610:	429c      	cmp	r4, r3
 8007612:	bf08      	it	eq
 8007614:	68ec      	ldreq	r4, [r5, #12]
 8007616:	e7da      	b.n	80075ce <_fflush_r+0x22>
 8007618:	08007ee4 	.word	0x08007ee4
 800761c:	08007f04 	.word	0x08007f04
 8007620:	08007ec4 	.word	0x08007ec4

08007624 <std>:
 8007624:	2300      	movs	r3, #0
 8007626:	b510      	push	{r4, lr}
 8007628:	4604      	mov	r4, r0
 800762a:	e9c0 3300 	strd	r3, r3, [r0]
 800762e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007632:	6083      	str	r3, [r0, #8]
 8007634:	8181      	strh	r1, [r0, #12]
 8007636:	6643      	str	r3, [r0, #100]	; 0x64
 8007638:	81c2      	strh	r2, [r0, #14]
 800763a:	6183      	str	r3, [r0, #24]
 800763c:	4619      	mov	r1, r3
 800763e:	2208      	movs	r2, #8
 8007640:	305c      	adds	r0, #92	; 0x5c
 8007642:	f7fd fb5b 	bl	8004cfc <memset>
 8007646:	4b05      	ldr	r3, [pc, #20]	; (800765c <std+0x38>)
 8007648:	6263      	str	r3, [r4, #36]	; 0x24
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <std+0x3c>)
 800764c:	62a3      	str	r3, [r4, #40]	; 0x28
 800764e:	4b05      	ldr	r3, [pc, #20]	; (8007664 <std+0x40>)
 8007650:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <std+0x44>)
 8007654:	6224      	str	r4, [r4, #32]
 8007656:	6323      	str	r3, [r4, #48]	; 0x30
 8007658:	bd10      	pop	{r4, pc}
 800765a:	bf00      	nop
 800765c:	08007979 	.word	0x08007979
 8007660:	0800799b 	.word	0x0800799b
 8007664:	080079d3 	.word	0x080079d3
 8007668:	080079f7 	.word	0x080079f7

0800766c <_cleanup_r>:
 800766c:	4901      	ldr	r1, [pc, #4]	; (8007674 <_cleanup_r+0x8>)
 800766e:	f000 b8af 	b.w	80077d0 <_fwalk_reent>
 8007672:	bf00      	nop
 8007674:	080075ad 	.word	0x080075ad

08007678 <__sfmoreglue>:
 8007678:	b570      	push	{r4, r5, r6, lr}
 800767a:	2268      	movs	r2, #104	; 0x68
 800767c:	1e4d      	subs	r5, r1, #1
 800767e:	4355      	muls	r5, r2
 8007680:	460e      	mov	r6, r1
 8007682:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007686:	f7ff fa65 	bl	8006b54 <_malloc_r>
 800768a:	4604      	mov	r4, r0
 800768c:	b140      	cbz	r0, 80076a0 <__sfmoreglue+0x28>
 800768e:	2100      	movs	r1, #0
 8007690:	e9c0 1600 	strd	r1, r6, [r0]
 8007694:	300c      	adds	r0, #12
 8007696:	60a0      	str	r0, [r4, #8]
 8007698:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800769c:	f7fd fb2e 	bl	8004cfc <memset>
 80076a0:	4620      	mov	r0, r4
 80076a2:	bd70      	pop	{r4, r5, r6, pc}

080076a4 <__sfp_lock_acquire>:
 80076a4:	4801      	ldr	r0, [pc, #4]	; (80076ac <__sfp_lock_acquire+0x8>)
 80076a6:	f000 b8b3 	b.w	8007810 <__retarget_lock_acquire_recursive>
 80076aa:	bf00      	nop
 80076ac:	20000341 	.word	0x20000341

080076b0 <__sfp_lock_release>:
 80076b0:	4801      	ldr	r0, [pc, #4]	; (80076b8 <__sfp_lock_release+0x8>)
 80076b2:	f000 b8ae 	b.w	8007812 <__retarget_lock_release_recursive>
 80076b6:	bf00      	nop
 80076b8:	20000341 	.word	0x20000341

080076bc <__sinit_lock_acquire>:
 80076bc:	4801      	ldr	r0, [pc, #4]	; (80076c4 <__sinit_lock_acquire+0x8>)
 80076be:	f000 b8a7 	b.w	8007810 <__retarget_lock_acquire_recursive>
 80076c2:	bf00      	nop
 80076c4:	20000342 	.word	0x20000342

080076c8 <__sinit_lock_release>:
 80076c8:	4801      	ldr	r0, [pc, #4]	; (80076d0 <__sinit_lock_release+0x8>)
 80076ca:	f000 b8a2 	b.w	8007812 <__retarget_lock_release_recursive>
 80076ce:	bf00      	nop
 80076d0:	20000342 	.word	0x20000342

080076d4 <__sinit>:
 80076d4:	b510      	push	{r4, lr}
 80076d6:	4604      	mov	r4, r0
 80076d8:	f7ff fff0 	bl	80076bc <__sinit_lock_acquire>
 80076dc:	69a3      	ldr	r3, [r4, #24]
 80076de:	b11b      	cbz	r3, 80076e8 <__sinit+0x14>
 80076e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e4:	f7ff bff0 	b.w	80076c8 <__sinit_lock_release>
 80076e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076ec:	6523      	str	r3, [r4, #80]	; 0x50
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <__sinit+0x68>)
 80076f0:	4a13      	ldr	r2, [pc, #76]	; (8007740 <__sinit+0x6c>)
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80076f6:	42a3      	cmp	r3, r4
 80076f8:	bf04      	itt	eq
 80076fa:	2301      	moveq	r3, #1
 80076fc:	61a3      	streq	r3, [r4, #24]
 80076fe:	4620      	mov	r0, r4
 8007700:	f000 f820 	bl	8007744 <__sfp>
 8007704:	6060      	str	r0, [r4, #4]
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f81c 	bl	8007744 <__sfp>
 800770c:	60a0      	str	r0, [r4, #8]
 800770e:	4620      	mov	r0, r4
 8007710:	f000 f818 	bl	8007744 <__sfp>
 8007714:	2200      	movs	r2, #0
 8007716:	60e0      	str	r0, [r4, #12]
 8007718:	2104      	movs	r1, #4
 800771a:	6860      	ldr	r0, [r4, #4]
 800771c:	f7ff ff82 	bl	8007624 <std>
 8007720:	68a0      	ldr	r0, [r4, #8]
 8007722:	2201      	movs	r2, #1
 8007724:	2109      	movs	r1, #9
 8007726:	f7ff ff7d 	bl	8007624 <std>
 800772a:	68e0      	ldr	r0, [r4, #12]
 800772c:	2202      	movs	r2, #2
 800772e:	2112      	movs	r1, #18
 8007730:	f7ff ff78 	bl	8007624 <std>
 8007734:	2301      	movs	r3, #1
 8007736:	61a3      	str	r3, [r4, #24]
 8007738:	e7d2      	b.n	80076e0 <__sinit+0xc>
 800773a:	bf00      	nop
 800773c:	08007b4c 	.word	0x08007b4c
 8007740:	0800766d 	.word	0x0800766d

08007744 <__sfp>:
 8007744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007746:	4607      	mov	r7, r0
 8007748:	f7ff ffac 	bl	80076a4 <__sfp_lock_acquire>
 800774c:	4b1e      	ldr	r3, [pc, #120]	; (80077c8 <__sfp+0x84>)
 800774e:	681e      	ldr	r6, [r3, #0]
 8007750:	69b3      	ldr	r3, [r6, #24]
 8007752:	b913      	cbnz	r3, 800775a <__sfp+0x16>
 8007754:	4630      	mov	r0, r6
 8007756:	f7ff ffbd 	bl	80076d4 <__sinit>
 800775a:	3648      	adds	r6, #72	; 0x48
 800775c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007760:	3b01      	subs	r3, #1
 8007762:	d503      	bpl.n	800776c <__sfp+0x28>
 8007764:	6833      	ldr	r3, [r6, #0]
 8007766:	b30b      	cbz	r3, 80077ac <__sfp+0x68>
 8007768:	6836      	ldr	r6, [r6, #0]
 800776a:	e7f7      	b.n	800775c <__sfp+0x18>
 800776c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007770:	b9d5      	cbnz	r5, 80077a8 <__sfp+0x64>
 8007772:	4b16      	ldr	r3, [pc, #88]	; (80077cc <__sfp+0x88>)
 8007774:	60e3      	str	r3, [r4, #12]
 8007776:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800777a:	6665      	str	r5, [r4, #100]	; 0x64
 800777c:	f000 f847 	bl	800780e <__retarget_lock_init_recursive>
 8007780:	f7ff ff96 	bl	80076b0 <__sfp_lock_release>
 8007784:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007788:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800778c:	6025      	str	r5, [r4, #0]
 800778e:	61a5      	str	r5, [r4, #24]
 8007790:	2208      	movs	r2, #8
 8007792:	4629      	mov	r1, r5
 8007794:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007798:	f7fd fab0 	bl	8004cfc <memset>
 800779c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077a4:	4620      	mov	r0, r4
 80077a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a8:	3468      	adds	r4, #104	; 0x68
 80077aa:	e7d9      	b.n	8007760 <__sfp+0x1c>
 80077ac:	2104      	movs	r1, #4
 80077ae:	4638      	mov	r0, r7
 80077b0:	f7ff ff62 	bl	8007678 <__sfmoreglue>
 80077b4:	4604      	mov	r4, r0
 80077b6:	6030      	str	r0, [r6, #0]
 80077b8:	2800      	cmp	r0, #0
 80077ba:	d1d5      	bne.n	8007768 <__sfp+0x24>
 80077bc:	f7ff ff78 	bl	80076b0 <__sfp_lock_release>
 80077c0:	230c      	movs	r3, #12
 80077c2:	603b      	str	r3, [r7, #0]
 80077c4:	e7ee      	b.n	80077a4 <__sfp+0x60>
 80077c6:	bf00      	nop
 80077c8:	08007b4c 	.word	0x08007b4c
 80077cc:	ffff0001 	.word	0xffff0001

080077d0 <_fwalk_reent>:
 80077d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d4:	4606      	mov	r6, r0
 80077d6:	4688      	mov	r8, r1
 80077d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077dc:	2700      	movs	r7, #0
 80077de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e2:	f1b9 0901 	subs.w	r9, r9, #1
 80077e6:	d505      	bpl.n	80077f4 <_fwalk_reent+0x24>
 80077e8:	6824      	ldr	r4, [r4, #0]
 80077ea:	2c00      	cmp	r4, #0
 80077ec:	d1f7      	bne.n	80077de <_fwalk_reent+0xe>
 80077ee:	4638      	mov	r0, r7
 80077f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f4:	89ab      	ldrh	r3, [r5, #12]
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d907      	bls.n	800780a <_fwalk_reent+0x3a>
 80077fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80077fe:	3301      	adds	r3, #1
 8007800:	d003      	beq.n	800780a <_fwalk_reent+0x3a>
 8007802:	4629      	mov	r1, r5
 8007804:	4630      	mov	r0, r6
 8007806:	47c0      	blx	r8
 8007808:	4307      	orrs	r7, r0
 800780a:	3568      	adds	r5, #104	; 0x68
 800780c:	e7e9      	b.n	80077e2 <_fwalk_reent+0x12>

0800780e <__retarget_lock_init_recursive>:
 800780e:	4770      	bx	lr

08007810 <__retarget_lock_acquire_recursive>:
 8007810:	4770      	bx	lr

08007812 <__retarget_lock_release_recursive>:
 8007812:	4770      	bx	lr

08007814 <__swhatbuf_r>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	460e      	mov	r6, r1
 8007818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800781c:	2900      	cmp	r1, #0
 800781e:	b096      	sub	sp, #88	; 0x58
 8007820:	4614      	mov	r4, r2
 8007822:	461d      	mov	r5, r3
 8007824:	da08      	bge.n	8007838 <__swhatbuf_r+0x24>
 8007826:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800782a:	2200      	movs	r2, #0
 800782c:	602a      	str	r2, [r5, #0]
 800782e:	061a      	lsls	r2, r3, #24
 8007830:	d410      	bmi.n	8007854 <__swhatbuf_r+0x40>
 8007832:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007836:	e00e      	b.n	8007856 <__swhatbuf_r+0x42>
 8007838:	466a      	mov	r2, sp
 800783a:	f000 f903 	bl	8007a44 <_fstat_r>
 800783e:	2800      	cmp	r0, #0
 8007840:	dbf1      	blt.n	8007826 <__swhatbuf_r+0x12>
 8007842:	9a01      	ldr	r2, [sp, #4]
 8007844:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007848:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800784c:	425a      	negs	r2, r3
 800784e:	415a      	adcs	r2, r3
 8007850:	602a      	str	r2, [r5, #0]
 8007852:	e7ee      	b.n	8007832 <__swhatbuf_r+0x1e>
 8007854:	2340      	movs	r3, #64	; 0x40
 8007856:	2000      	movs	r0, #0
 8007858:	6023      	str	r3, [r4, #0]
 800785a:	b016      	add	sp, #88	; 0x58
 800785c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007860 <__smakebuf_r>:
 8007860:	898b      	ldrh	r3, [r1, #12]
 8007862:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007864:	079d      	lsls	r5, r3, #30
 8007866:	4606      	mov	r6, r0
 8007868:	460c      	mov	r4, r1
 800786a:	d507      	bpl.n	800787c <__smakebuf_r+0x1c>
 800786c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007870:	6023      	str	r3, [r4, #0]
 8007872:	6123      	str	r3, [r4, #16]
 8007874:	2301      	movs	r3, #1
 8007876:	6163      	str	r3, [r4, #20]
 8007878:	b002      	add	sp, #8
 800787a:	bd70      	pop	{r4, r5, r6, pc}
 800787c:	ab01      	add	r3, sp, #4
 800787e:	466a      	mov	r2, sp
 8007880:	f7ff ffc8 	bl	8007814 <__swhatbuf_r>
 8007884:	9900      	ldr	r1, [sp, #0]
 8007886:	4605      	mov	r5, r0
 8007888:	4630      	mov	r0, r6
 800788a:	f7ff f963 	bl	8006b54 <_malloc_r>
 800788e:	b948      	cbnz	r0, 80078a4 <__smakebuf_r+0x44>
 8007890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007894:	059a      	lsls	r2, r3, #22
 8007896:	d4ef      	bmi.n	8007878 <__smakebuf_r+0x18>
 8007898:	f023 0303 	bic.w	r3, r3, #3
 800789c:	f043 0302 	orr.w	r3, r3, #2
 80078a0:	81a3      	strh	r3, [r4, #12]
 80078a2:	e7e3      	b.n	800786c <__smakebuf_r+0xc>
 80078a4:	4b0d      	ldr	r3, [pc, #52]	; (80078dc <__smakebuf_r+0x7c>)
 80078a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80078a8:	89a3      	ldrh	r3, [r4, #12]
 80078aa:	6020      	str	r0, [r4, #0]
 80078ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80078b0:	81a3      	strh	r3, [r4, #12]
 80078b2:	9b00      	ldr	r3, [sp, #0]
 80078b4:	6163      	str	r3, [r4, #20]
 80078b6:	9b01      	ldr	r3, [sp, #4]
 80078b8:	6120      	str	r0, [r4, #16]
 80078ba:	b15b      	cbz	r3, 80078d4 <__smakebuf_r+0x74>
 80078bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c0:	4630      	mov	r0, r6
 80078c2:	f000 f8d1 	bl	8007a68 <_isatty_r>
 80078c6:	b128      	cbz	r0, 80078d4 <__smakebuf_r+0x74>
 80078c8:	89a3      	ldrh	r3, [r4, #12]
 80078ca:	f023 0303 	bic.w	r3, r3, #3
 80078ce:	f043 0301 	orr.w	r3, r3, #1
 80078d2:	81a3      	strh	r3, [r4, #12]
 80078d4:	89a0      	ldrh	r0, [r4, #12]
 80078d6:	4305      	orrs	r5, r0
 80078d8:	81a5      	strh	r5, [r4, #12]
 80078da:	e7cd      	b.n	8007878 <__smakebuf_r+0x18>
 80078dc:	0800766d 	.word	0x0800766d

080078e0 <_malloc_usable_size_r>:
 80078e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078e4:	1f18      	subs	r0, r3, #4
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	bfbc      	itt	lt
 80078ea:	580b      	ldrlt	r3, [r1, r0]
 80078ec:	18c0      	addlt	r0, r0, r3
 80078ee:	4770      	bx	lr

080078f0 <_raise_r>:
 80078f0:	291f      	cmp	r1, #31
 80078f2:	b538      	push	{r3, r4, r5, lr}
 80078f4:	4604      	mov	r4, r0
 80078f6:	460d      	mov	r5, r1
 80078f8:	d904      	bls.n	8007904 <_raise_r+0x14>
 80078fa:	2316      	movs	r3, #22
 80078fc:	6003      	str	r3, [r0, #0]
 80078fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007902:	bd38      	pop	{r3, r4, r5, pc}
 8007904:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007906:	b112      	cbz	r2, 800790e <_raise_r+0x1e>
 8007908:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800790c:	b94b      	cbnz	r3, 8007922 <_raise_r+0x32>
 800790e:	4620      	mov	r0, r4
 8007910:	f000 f830 	bl	8007974 <_getpid_r>
 8007914:	462a      	mov	r2, r5
 8007916:	4601      	mov	r1, r0
 8007918:	4620      	mov	r0, r4
 800791a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800791e:	f000 b817 	b.w	8007950 <_kill_r>
 8007922:	2b01      	cmp	r3, #1
 8007924:	d00a      	beq.n	800793c <_raise_r+0x4c>
 8007926:	1c59      	adds	r1, r3, #1
 8007928:	d103      	bne.n	8007932 <_raise_r+0x42>
 800792a:	2316      	movs	r3, #22
 800792c:	6003      	str	r3, [r0, #0]
 800792e:	2001      	movs	r0, #1
 8007930:	e7e7      	b.n	8007902 <_raise_r+0x12>
 8007932:	2400      	movs	r4, #0
 8007934:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007938:	4628      	mov	r0, r5
 800793a:	4798      	blx	r3
 800793c:	2000      	movs	r0, #0
 800793e:	e7e0      	b.n	8007902 <_raise_r+0x12>

08007940 <raise>:
 8007940:	4b02      	ldr	r3, [pc, #8]	; (800794c <raise+0xc>)
 8007942:	4601      	mov	r1, r0
 8007944:	6818      	ldr	r0, [r3, #0]
 8007946:	f7ff bfd3 	b.w	80078f0 <_raise_r>
 800794a:	bf00      	nop
 800794c:	2000000c 	.word	0x2000000c

08007950 <_kill_r>:
 8007950:	b538      	push	{r3, r4, r5, lr}
 8007952:	4d07      	ldr	r5, [pc, #28]	; (8007970 <_kill_r+0x20>)
 8007954:	2300      	movs	r3, #0
 8007956:	4604      	mov	r4, r0
 8007958:	4608      	mov	r0, r1
 800795a:	4611      	mov	r1, r2
 800795c:	602b      	str	r3, [r5, #0]
 800795e:	f7fa f97f 	bl	8001c60 <_kill>
 8007962:	1c43      	adds	r3, r0, #1
 8007964:	d102      	bne.n	800796c <_kill_r+0x1c>
 8007966:	682b      	ldr	r3, [r5, #0]
 8007968:	b103      	cbz	r3, 800796c <_kill_r+0x1c>
 800796a:	6023      	str	r3, [r4, #0]
 800796c:	bd38      	pop	{r3, r4, r5, pc}
 800796e:	bf00      	nop
 8007970:	2000033c 	.word	0x2000033c

08007974 <_getpid_r>:
 8007974:	f7fa b96c 	b.w	8001c50 <_getpid>

08007978 <__sread>:
 8007978:	b510      	push	{r4, lr}
 800797a:	460c      	mov	r4, r1
 800797c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007980:	f000 f894 	bl	8007aac <_read_r>
 8007984:	2800      	cmp	r0, #0
 8007986:	bfab      	itete	ge
 8007988:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800798a:	89a3      	ldrhlt	r3, [r4, #12]
 800798c:	181b      	addge	r3, r3, r0
 800798e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007992:	bfac      	ite	ge
 8007994:	6563      	strge	r3, [r4, #84]	; 0x54
 8007996:	81a3      	strhlt	r3, [r4, #12]
 8007998:	bd10      	pop	{r4, pc}

0800799a <__swrite>:
 800799a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799e:	461f      	mov	r7, r3
 80079a0:	898b      	ldrh	r3, [r1, #12]
 80079a2:	05db      	lsls	r3, r3, #23
 80079a4:	4605      	mov	r5, r0
 80079a6:	460c      	mov	r4, r1
 80079a8:	4616      	mov	r6, r2
 80079aa:	d505      	bpl.n	80079b8 <__swrite+0x1e>
 80079ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b0:	2302      	movs	r3, #2
 80079b2:	2200      	movs	r2, #0
 80079b4:	f000 f868 	bl	8007a88 <_lseek_r>
 80079b8:	89a3      	ldrh	r3, [r4, #12]
 80079ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079c2:	81a3      	strh	r3, [r4, #12]
 80079c4:	4632      	mov	r2, r6
 80079c6:	463b      	mov	r3, r7
 80079c8:	4628      	mov	r0, r5
 80079ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ce:	f000 b817 	b.w	8007a00 <_write_r>

080079d2 <__sseek>:
 80079d2:	b510      	push	{r4, lr}
 80079d4:	460c      	mov	r4, r1
 80079d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079da:	f000 f855 	bl	8007a88 <_lseek_r>
 80079de:	1c43      	adds	r3, r0, #1
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	bf15      	itete	ne
 80079e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80079e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ee:	81a3      	strheq	r3, [r4, #12]
 80079f0:	bf18      	it	ne
 80079f2:	81a3      	strhne	r3, [r4, #12]
 80079f4:	bd10      	pop	{r4, pc}

080079f6 <__sclose>:
 80079f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079fa:	f000 b813 	b.w	8007a24 <_close_r>
	...

08007a00 <_write_r>:
 8007a00:	b538      	push	{r3, r4, r5, lr}
 8007a02:	4d07      	ldr	r5, [pc, #28]	; (8007a20 <_write_r+0x20>)
 8007a04:	4604      	mov	r4, r0
 8007a06:	4608      	mov	r0, r1
 8007a08:	4611      	mov	r1, r2
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	602a      	str	r2, [r5, #0]
 8007a0e:	461a      	mov	r2, r3
 8007a10:	f7fa f95d 	bl	8001cce <_write>
 8007a14:	1c43      	adds	r3, r0, #1
 8007a16:	d102      	bne.n	8007a1e <_write_r+0x1e>
 8007a18:	682b      	ldr	r3, [r5, #0]
 8007a1a:	b103      	cbz	r3, 8007a1e <_write_r+0x1e>
 8007a1c:	6023      	str	r3, [r4, #0]
 8007a1e:	bd38      	pop	{r3, r4, r5, pc}
 8007a20:	2000033c 	.word	0x2000033c

08007a24 <_close_r>:
 8007a24:	b538      	push	{r3, r4, r5, lr}
 8007a26:	4d06      	ldr	r5, [pc, #24]	; (8007a40 <_close_r+0x1c>)
 8007a28:	2300      	movs	r3, #0
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	4608      	mov	r0, r1
 8007a2e:	602b      	str	r3, [r5, #0]
 8007a30:	f7fa f969 	bl	8001d06 <_close>
 8007a34:	1c43      	adds	r3, r0, #1
 8007a36:	d102      	bne.n	8007a3e <_close_r+0x1a>
 8007a38:	682b      	ldr	r3, [r5, #0]
 8007a3a:	b103      	cbz	r3, 8007a3e <_close_r+0x1a>
 8007a3c:	6023      	str	r3, [r4, #0]
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	2000033c 	.word	0x2000033c

08007a44 <_fstat_r>:
 8007a44:	b538      	push	{r3, r4, r5, lr}
 8007a46:	4d07      	ldr	r5, [pc, #28]	; (8007a64 <_fstat_r+0x20>)
 8007a48:	2300      	movs	r3, #0
 8007a4a:	4604      	mov	r4, r0
 8007a4c:	4608      	mov	r0, r1
 8007a4e:	4611      	mov	r1, r2
 8007a50:	602b      	str	r3, [r5, #0]
 8007a52:	f7fa f964 	bl	8001d1e <_fstat>
 8007a56:	1c43      	adds	r3, r0, #1
 8007a58:	d102      	bne.n	8007a60 <_fstat_r+0x1c>
 8007a5a:	682b      	ldr	r3, [r5, #0]
 8007a5c:	b103      	cbz	r3, 8007a60 <_fstat_r+0x1c>
 8007a5e:	6023      	str	r3, [r4, #0]
 8007a60:	bd38      	pop	{r3, r4, r5, pc}
 8007a62:	bf00      	nop
 8007a64:	2000033c 	.word	0x2000033c

08007a68 <_isatty_r>:
 8007a68:	b538      	push	{r3, r4, r5, lr}
 8007a6a:	4d06      	ldr	r5, [pc, #24]	; (8007a84 <_isatty_r+0x1c>)
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	4604      	mov	r4, r0
 8007a70:	4608      	mov	r0, r1
 8007a72:	602b      	str	r3, [r5, #0]
 8007a74:	f7fa f963 	bl	8001d3e <_isatty>
 8007a78:	1c43      	adds	r3, r0, #1
 8007a7a:	d102      	bne.n	8007a82 <_isatty_r+0x1a>
 8007a7c:	682b      	ldr	r3, [r5, #0]
 8007a7e:	b103      	cbz	r3, 8007a82 <_isatty_r+0x1a>
 8007a80:	6023      	str	r3, [r4, #0]
 8007a82:	bd38      	pop	{r3, r4, r5, pc}
 8007a84:	2000033c 	.word	0x2000033c

08007a88 <_lseek_r>:
 8007a88:	b538      	push	{r3, r4, r5, lr}
 8007a8a:	4d07      	ldr	r5, [pc, #28]	; (8007aa8 <_lseek_r+0x20>)
 8007a8c:	4604      	mov	r4, r0
 8007a8e:	4608      	mov	r0, r1
 8007a90:	4611      	mov	r1, r2
 8007a92:	2200      	movs	r2, #0
 8007a94:	602a      	str	r2, [r5, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f7fa f95c 	bl	8001d54 <_lseek>
 8007a9c:	1c43      	adds	r3, r0, #1
 8007a9e:	d102      	bne.n	8007aa6 <_lseek_r+0x1e>
 8007aa0:	682b      	ldr	r3, [r5, #0]
 8007aa2:	b103      	cbz	r3, 8007aa6 <_lseek_r+0x1e>
 8007aa4:	6023      	str	r3, [r4, #0]
 8007aa6:	bd38      	pop	{r3, r4, r5, pc}
 8007aa8:	2000033c 	.word	0x2000033c

08007aac <_read_r>:
 8007aac:	b538      	push	{r3, r4, r5, lr}
 8007aae:	4d07      	ldr	r5, [pc, #28]	; (8007acc <_read_r+0x20>)
 8007ab0:	4604      	mov	r4, r0
 8007ab2:	4608      	mov	r0, r1
 8007ab4:	4611      	mov	r1, r2
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	602a      	str	r2, [r5, #0]
 8007aba:	461a      	mov	r2, r3
 8007abc:	f7fa f8ea 	bl	8001c94 <_read>
 8007ac0:	1c43      	adds	r3, r0, #1
 8007ac2:	d102      	bne.n	8007aca <_read_r+0x1e>
 8007ac4:	682b      	ldr	r3, [r5, #0]
 8007ac6:	b103      	cbz	r3, 8007aca <_read_r+0x1e>
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	bd38      	pop	{r3, r4, r5, pc}
 8007acc:	2000033c 	.word	0x2000033c

08007ad0 <_init>:
 8007ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ad2:	bf00      	nop
 8007ad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ad6:	bc08      	pop	{r3}
 8007ad8:	469e      	mov	lr, r3
 8007ada:	4770      	bx	lr

08007adc <_fini>:
 8007adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ade:	bf00      	nop
 8007ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae2:	bc08      	pop	{r3}
 8007ae4:	469e      	mov	lr, r3
 8007ae6:	4770      	bx	lr
